
/home/kbkang/RISC-V_Testbench_CV32e40p/Original_CV32e40p_Testbench/cv32e40p/tests/custom/dhrystone/dhrystone.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <__vector_start>:
.section .vectors, "ax"
.option norvc
.global vector_table

vector_table:
	j u_sw_irq_handler
   0:	0870006f          	jal	x0,886 <u_sw_irq_handler>
	j __no_irq_handler
   4:	04f0006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
   8:	04b0006f          	jal	x0,852 <__no_irq_handler>
	j m_software_irq_handler
   c:	0550006f          	jal	x0,860 <m_software_irq_handler>
	j __no_irq_handler
  10:	0430006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
  14:	03f0006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
  18:	03b0006f          	jal	x0,852 <__no_irq_handler>
	j m_timer_irq_handler
  1c:	0470006f          	jal	x0,862 <m_timer_irq_handler>
	j __no_irq_handler
  20:	0330006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
  24:	02f0006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
  28:	02b0006f          	jal	x0,852 <__no_irq_handler>
	j m_external_irq_handler
  2c:	0390006f          	jal	x0,864 <m_external_irq_handler>
	j __no_irq_handler
  30:	0230006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
  34:	01f0006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
  38:	01b0006f          	jal	x0,852 <__no_irq_handler>
	j __no_irq_handler
  3c:	0170006f          	jal	x0,852 <__no_irq_handler>
	j m_fast0_irq_handler
  40:	0270006f          	jal	x0,866 <m_fast0_irq_handler>
	j m_fast1_irq_handler
  44:	0250006f          	jal	x0,868 <m_fast1_irq_handler>
	j m_fast2_irq_handler
  48:	0230006f          	jal	x0,86a <m_fast2_irq_handler>
	j m_fast3_irq_handler
  4c:	0210006f          	jal	x0,86c <m_fast3_irq_handler>
	j m_fast4_irq_handler
  50:	01f0006f          	jal	x0,86e <m_fast4_irq_handler>
	j m_fast5_irq_handler
  54:	01d0006f          	jal	x0,870 <m_fast5_irq_handler>
	j m_fast6_irq_handler
  58:	01b0006f          	jal	x0,872 <m_fast6_irq_handler>
	j m_fast7_irq_handler
  5c:	0190006f          	jal	x0,874 <m_fast7_irq_handler>
	j m_fast8_irq_handler
  60:	0170006f          	jal	x0,876 <m_fast8_irq_handler>
	j m_fast9_irq_handler
  64:	0150006f          	jal	x0,878 <m_fast9_irq_handler>
	j m_fast10_irq_handler
  68:	0130006f          	jal	x0,87a <m_fast10_irq_handler>
	j m_fast11_irq_handler
  6c:	0110006f          	jal	x0,87c <m_fast11_irq_handler>
	j m_fast12_irq_handler
  70:	00f0006f          	jal	x0,87e <m_fast12_irq_handler>
	j m_fast13_irq_handler
  74:	00d0006f          	jal	x0,880 <m_fast13_irq_handler>
	j m_fast14_irq_handler
  78:	00b0006f          	jal	x0,882 <m_fast14_irq_handler>
	j m_fast15_irq_handler
  7c:	0090006f          	jal	x0,884 <m_fast15_irq_handler>

Disassembly of section .init:

00000080 <_start>:

_start:
/* initialize global pointer */
.option push
.option norelax
1:	auipc gp, %pcrel_hi(__global_pointer$)
  80:	00005197          	auipc	x3,0x5
	addi  gp, gp, %pcrel_lo(1b)
  84:	0d818193          	addi	x3,x3,216 # 5158 <__global_pointer$>
.option pop

/* initialize stack pointer */
	la sp, __stack_end
  88:	00400117          	auipc	x2,0x400
  8c:	f7810113          	addi	x2,x2,-136 # 400000 <__heap_end>

/* set vector table address */
	la a0, __vector_start
  90:	00000517          	auipc	x10,0x0
  94:	f7050513          	addi	x10,x10,-144 # 0 <__vector_start>
	ori a0, a0, 1 /*vector mode = vectored */
  98:	00156513          	ori	x10,x10,1
	csrw mtvec, a0
  9c:	30551073          	csrrw	x0,mtvec,x10

/* clear the bss segment */
	la a0, _edata
  a0:	81018513          	addi	x10,x3,-2032 # 4968 <Dhrystones_Per_Second>
	la a2, _end
  a4:	00007617          	auipc	x12,0x7
  a8:	7e060613          	addi	x12,x12,2016 # 7884 <__bss_end>
	sub a2, a2, a0
  ac:	8e09                	c.sub	x12,x10
	li a1, 0
  ae:	4581                	c.li	x11,0
	call memset
  b0:	530010ef          	jal	x1,15e0 <memset>

/* new-style constructors and destructors */
	la a0, __libc_fini_array
  b4:	00001517          	auipc	x10,0x1
  b8:	4d050513          	addi	x10,x10,1232 # 1584 <__libc_fini_array>
	call atexit
  bc:	2e9000ef          	jal	x1,ba4 <atexit>
	call __libc_init_array
  c0:	428010ef          	jal	x1,14e8 <__libc_init_array>
//	lw a0, 0(sp)                    /* a0 = argc */
//	addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
//	li a2, 0                        /* a2 = envp = NULL */
// Initialize these variables to 0. Cannot use argc or argv
// since the stack is not initialized
	li a0, 0
  c4:	4501                	c.li	x10,0
	li a1, 0
  c6:	4581                	c.li	x11,0
	li a2, 0
  c8:	4601                	c.li	x12,0

	call main
  ca:	280d                	c.jal	fc <main>
	tail exit
  cc:	a011                	c.j	d0 <exit>

000000ce <_fini>:
.type   _fini, @function
_init:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
	ret
  ce:	8082                	c.jr	x1

Disassembly of section .text:

000000d0 <exit>:
      d0:	ff010113          	addi	x2,x2,-16
      d4:	00000593          	addi	x11,x0,0
      d8:	00812423          	sw	x8,8(x2)
      dc:	00112623          	sw	x1,12(x2)
      e0:	00050413          	addi	x8,x10,0
      e4:	700010ef          	jal	x1,17e4 <__call_exitprocs>
      e8:	84c1a783          	lw	x15,-1972(x3) # 49a4 <__stdio_exit_handler>
      ec:	00078463          	beq	x15,x0,f4 <exit+0x24>
      f0:	000780e7          	jalr	x1,0(x15)
      f4:	00040513          	addi	x10,x8,0
      f8:	0a7000ef          	jal	x1,99e <_exit>

000000fc <main>:
main ()
/*****/

  /* main program, corresponds to procedures        */
  /* Main and Proc_0 in the Ada version             */
{
      fc:	7175                	c.addi16sp	x2,-144
  REG   int             Run_Index;
  REG   int             Number_Of_Runs;

  /* Initializations */

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
      fe:	03000513          	addi	x10,x0,48
{
     102:	c706                	c.swsp	x1,140(x2)
     104:	c326                	c.swsp	x9,132(x2)
     106:	c14a                	c.swsp	x18,128(x2)
     108:	dad6                	c.swsp	x21,116(x2)
     10a:	c522                	c.swsp	x8,136(x2)
     10c:	dece                	c.swsp	x19,124(x2)
     10e:	dcd2                	c.swsp	x20,120(x2)
     110:	d8da                	c.swsp	x22,112(x2)
     112:	d6de                	c.swsp	x23,108(x2)
     114:	d4e2                	c.swsp	x24,104(x2)
     116:	d2e6                	c.swsp	x25,100(x2)
     118:	d0ea                	c.swsp	x26,96(x2)
     11a:	ceee                	c.swsp	x27,92(x2)
  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     11c:	2651                	c.jal	4a0 <malloc>
     11e:	84a1a023          	sw	x10,-1984(x3) # 4998 <Next_Ptr_Glob>
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     122:	03000513          	addi	x10,x0,48
     126:	2ead                	c.jal	4a0 <malloc>

  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
     128:	8401a783          	lw	x15,-1984(x3) # 4998 <Next_Ptr_Glob>
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     12c:	84a1a223          	sw	x10,-1980(x3) # 499c <Ptr_Glob>
  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
     130:	c11c                	c.sw	x15,0(x10)
  Ptr_Glob->Discr                       = Ident_1;
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
     132:	4789                	c.li	x15,2
     134:	c51c                	c.sw	x15,8(x10)
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     136:	6591                	c.lui	x11,0x4
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
     138:	02800793          	addi	x15,x0,40
     13c:	c55c                	c.sw	x15,12(x10)
  Ptr_Glob->Discr                       = Ident_1;
     13e:	00052223          	sw	x0,4(x10)
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     142:	d4458593          	addi	x11,x11,-700 # 3d44 <_isatty_r+0x5c>
     146:	0541                	c.addi	x10,16
     148:	2e9d                	c.jal	4be <strcpy>
          "DHRYSTONE PROGRAM, SOME STRING");
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
     14a:	6591                	c.lui	x11,0x4
     14c:	d6858593          	addi	x11,x11,-664 # 3d68 <_isatty_r+0x80>
     150:	0808                	c.addi4spn	x10,x2,16
     152:	26b5                	c.jal	4be <strcpy>

  Arr_2_Glob [8][7] = 10;
     154:	6a95                	c.lui	x21,0x5
     156:	e84a8793          	addi	x15,x21,-380 # 4e84 <Arr_2_Glob>
     15a:	4729                	c.li	x14,10
        /* Was missing in published program. Without this statement,    */
        /* Arr_2_Glob [8][7] would have an undefined value.             */
        /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
        /* overflow may occur for this array element.                   */

  printf ("\n");
     15c:	4529                	c.li	x10,10
  Arr_2_Glob [8][7] = 10;
     15e:	64e7ae23          	sw	x14,1628(x15)
  printf ("\n");
     162:	69f000ef          	jal	x1,1000 <putchar>
  printf ("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
     166:	6511                	c.lui	x10,0x4
     168:	d8850513          	addi	x10,x10,-632 # 3d88 <_isatty_r+0xa0>
     16c:	785000ef          	jal	x1,10f0 <puts>
  printf ("\n");
     170:	4529                	c.li	x10,10
     172:	68f000ef          	jal	x1,1000 <putchar>
  if (Reg)
     176:	8301a783          	lw	x15,-2000(x3) # 4988 <Reg>
     17a:	2c078d63          	beq	x15,x0,454 <main+0x358>
  {
    printf ("Program compiled with 'register' attribute\n");
     17e:	6511                	c.lui	x10,0x4
     180:	db850513          	addi	x10,x10,-584 # 3db8 <_isatty_r+0xd0>
    printf ("\n");
  }
  else
  {
    printf ("Program compiled without 'register' attribute\n");
     184:	76d000ef          	jal	x1,10f0 <puts>
    printf ("\n");
     188:	4529                	c.li	x10,10
     18a:	677000ef          	jal	x1,1000 <putchar>
  }
  printf ("Please give the number of runs through the benchmark: ");
     18e:	6511                	c.lui	x10,0x4
     190:	e1450513          	addi	x10,x10,-492 # 3e14 <_isatty_r+0x12c>
     194:	2185                	c.jal	5f4 <printf>
  {
    // int n;
    // scanf ("%d", &n);
    Number_Of_Runs = 100;
  }
  printf ("\n");
     196:	4529                	c.li	x10,10
     198:	669000ef          	jal	x1,1000 <putchar>

  printf ("Execution starts, %d runs through Dhrystone\n", Number_Of_Runs);
     19c:	6511                	c.lui	x10,0x4
     19e:	06400593          	addi	x11,x0,100
     1a2:	e4c50513          	addi	x10,x10,-436 # 3e4c <_isatty_r+0x164>
     1a6:	21b9                	c.jal	5f4 <printf>

  /***************/
  /* Start timer */
// asm volatile ("rdcycle %0" : "=r"(Begin_Time));
// asm volatile ("rdinstret %0" : "=r"(Begin_Insn));
clock_start(0);
     1a8:	200007b7          	lui	x15,0x20000
     1ac:	0207a023          	sw	x0,32(x15) # 20000020 <__heap_end+0x1fc00020>
  /***************/
  // Begin_Time = io->timeus;

  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
     1b0:	4d05                	c.li	x26,1
      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
        /* Int_3_Loc == 7 */
      Int_1_Loc += 1;
    } /* while */
      /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
     1b2:	86418993          	addi	x19,x3,-1948 # 49bc <heap_memory>
    Proc_5();
     1b6:	239d                	c.jal	71c <Proc_5>
    Proc_4();
     1b8:	2391                	c.jal	6fc <Proc_4>
    strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
     1ba:	6591                	c.lui	x11,0x4
     1bc:	e7c58593          	addi	x11,x11,-388 # 3e7c <_isatty_r+0x194>
     1c0:	1808                	c.addi4spn	x10,x2,48
     1c2:	2cf5                	c.jal	4be <strcpy>
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
     1c4:	180c                	c.addi4spn	x11,x2,48
     1c6:	0808                	c.addi4spn	x10,x2,16
     1c8:	654000ef          	jal	x1,81c <Func_2>
     1cc:	00153513          	sltiu	x10,x10,1
    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
     1d0:	469d                	c.li	x13,7
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
     1d2:	82a1ac23          	sw	x10,-1992(x3) # 4990 <Bool_Glob>
    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
     1d6:	460d                	c.li	x12,3
     1d8:	e84a8593          	addi	x11,x21,-380
     1dc:	c6418513          	addi	x10,x3,-924 # 4dbc <Arr_1_Glob>
     1e0:	23d5                	c.jal	7c4 <Proc_8>
      /* Int_Glob == 5 */
    Proc_1 (Ptr_Glob);
     1e2:	8441a503          	lw	x10,-1980(x3) # 499c <Ptr_Glob>
    Enum_Loc = Ident_2;
     1e6:	4a05                	c.li	x20,1
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     1e8:	04100b13          	addi	x22,x0,65
    Proc_1 (Ptr_Glob);
     1ec:	2b95                	c.jal	760 <Proc_1>
    Int_2_Loc = 3;
     1ee:	440d                	c.li	x8,3
  Capital_Letter        Ch_1_Loc;
  Capital_Letter        Ch_2_Loc;

  Ch_1_Loc = Ch_1_Par_Val;
  Ch_2_Loc = Ch_1_Loc;
  if (Ch_2_Loc != Ch_2_Par_Val)
     1f0:	04300b93          	addi	x23,x0,67
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     1f4:	8341c703          	lbu	x14,-1996(x3) # 498c <Ch_2_Glob>
     1f8:	27677263          	bgeu	x14,x22,45c <main+0x360>
    Int_2_Loc = Int_2_Loc * Int_1_Loc;
     1fc:	470d                	c.li	x14,3
     1fe:	02e40433          	mul	x8,x8,x14
    Int_1_Loc = Int_2_Loc / Int_3_Loc;
     202:	4b9d                	c.li	x23,7
    Proc_2 (&Int_1_Loc);
     204:	0068                	c.addi4spn	x10,x2,12
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
     206:	0d05                	c.addi	x26,1
    Int_1_Loc = Int_2_Loc / Int_3_Loc;
     208:	03744b33          	div	x22,x8,x23
     20c:	c65a                	c.swsp	x22,12(x2)
    Proc_2 (&Int_1_Loc);
     20e:	2975                	c.jal	6ca <Proc_2>
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
     210:	06500713          	addi	x14,x0,101
     214:	faed11e3          	bne	x26,x14,1b6 <main+0xba>
clock_end(0);
     218:	200007b7          	lui	x15,0x20000
  printf ("Execution ends\n");
     21c:	6511                	c.lui	x10,0x4
clock_end(0);
     21e:	0207a223          	sw	x0,36(x15) # 20000024 <__heap_end+0x1fc00024>
  printf ("Execution ends\n");
     222:	ebc50513          	addi	x10,x10,-324 # 3ebc <_isatty_r+0x1d4>
     226:	6cb000ef          	jal	x1,10f0 <puts>
  printf ("\n");
     22a:	4529                	c.li	x10,10
     22c:	5d5000ef          	jal	x1,1000 <putchar>
  printf ("Final values of the variables used in the benchmark:\n");
     230:	6511                	c.lui	x10,0x4
     232:	ecc50513          	addi	x10,x10,-308 # 3ecc <_isatty_r+0x1e4>
     236:	6bb000ef          	jal	x1,10f0 <puts>
  printf ("\n");
     23a:	4529                	c.li	x10,10
     23c:	5c5000ef          	jal	x1,1000 <putchar>
  printf ("Int_Glob:            %d\n", Int_Glob);
     240:	83c1a583          	lw	x11,-1988(x3) # 4994 <Int_Glob>
     244:	6511                	c.lui	x10,0x4
     246:	f0450513          	addi	x10,x10,-252 # 3f04 <_isatty_r+0x21c>
  printf ("        should be:   %d\n", 5);
     24a:	6a91                	c.lui	x21,0x4
  printf ("Int_Glob:            %d\n", Int_Glob);
     24c:	2665                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 5);
     24e:	4595                	c.li	x11,5
     250:	f20a8513          	addi	x10,x21,-224 # 3f20 <_isatty_r+0x238>
     254:	2645                	c.jal	5f4 <printf>
  printf ("Bool_Glob:           %d\n", Bool_Glob);
     256:	8381a583          	lw	x11,-1992(x3) # 4990 <Bool_Glob>
     25a:	6511                	c.lui	x10,0x4
     25c:	f3c50513          	addi	x10,x10,-196 # 3f3c <_isatty_r+0x254>
     260:	2e51                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 1);
     262:	4585                	c.li	x11,1
     264:	f20a8513          	addi	x10,x21,-224
     268:	2671                	c.jal	5f4 <printf>
  printf ("Ch_1_Glob:           %c\n", Ch_1_Glob);
     26a:	8351c583          	lbu	x11,-1995(x3) # 498d <Ch_1_Glob>
     26e:	6511                	c.lui	x10,0x4
     270:	f5850513          	addi	x10,x10,-168 # 3f58 <_isatty_r+0x270>
     274:	2641                	c.jal	5f4 <printf>
  printf ("        should be:   %c\n", 'A');
     276:	6c91                	c.lui	x25,0x4
     278:	04100593          	addi	x11,x0,65
     27c:	f74c8513          	addi	x10,x25,-140 # 3f74 <_isatty_r+0x28c>
     280:	2e95                	c.jal	5f4 <printf>
  printf ("Ch_2_Glob:           %c\n", Ch_2_Glob);
     282:	8341c583          	lbu	x11,-1996(x3) # 498c <Ch_2_Glob>
     286:	6511                	c.lui	x10,0x4
     288:	f9050513          	addi	x10,x10,-112 # 3f90 <_isatty_r+0x2a8>
     28c:	26a5                	c.jal	5f4 <printf>
  printf ("        should be:   %c\n", 'B');
     28e:	04200593          	addi	x11,x0,66
     292:	f74c8513          	addi	x10,x25,-140
     296:	2eb9                	c.jal	5f4 <printf>
  printf ("Arr_1_Glob[8]:       %d\n", Arr_1_Glob[8]);
     298:	4209a583          	lw	x11,1056(x19)
     29c:	6511                	c.lui	x10,0x4
     29e:	fac50513          	addi	x10,x10,-84 # 3fac <_isatty_r+0x2c4>
     2a2:	2e89                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 7);
     2a4:	459d                	c.li	x11,7
     2a6:	f20a8513          	addi	x10,x21,-224
     2aa:	26a9                	c.jal	5f4 <printf>
  printf ("Arr_2_Glob[8][7]:    %d\n", Arr_2_Glob[8][7]);
     2ac:	6795                	c.lui	x15,0x5
     2ae:	e8478793          	addi	x15,x15,-380 # 4e84 <Arr_2_Glob>
     2b2:	65c7a583          	lw	x11,1628(x15)
     2b6:	6511                	c.lui	x10,0x4
     2b8:	fc850513          	addi	x10,x10,-56 # 3fc8 <_isatty_r+0x2e0>
     2bc:	2e25                	c.jal	5f4 <printf>
  printf ("        should be:   Number_Of_Runs + 10\n");
     2be:	6511                	c.lui	x10,0x4
     2c0:	fe450513          	addi	x10,x10,-28 # 3fe4 <_isatty_r+0x2fc>
     2c4:	62d000ef          	jal	x1,10f0 <puts>
  printf ("Ptr_Glob->\n");
     2c8:	6511                	c.lui	x10,0x4
     2ca:	01050513          	addi	x10,x10,16 # 4010 <_isatty_r+0x328>
     2ce:	623000ef          	jal	x1,10f0 <puts>
  printf ("  Ptr_Comp:          %d\n", (int) Ptr_Glob->Ptr_Comp);
     2d2:	8441a783          	lw	x15,-1980(x3) # 499c <Ptr_Glob>
     2d6:	6d91                	c.lui	x27,0x4
     2d8:	01cd8513          	addi	x10,x27,28 # 401c <_isatty_r+0x334>
     2dc:	438c                	c.lw	x11,0(x15)
  printf ("  Discr:             %d\n", Ptr_Glob->Discr);
     2de:	6d11                	c.lui	x26,0x4
  printf ("  Enum_Comp:         %d\n", Ptr_Glob->variant.var_1.Enum_Comp);
     2e0:	6c91                	c.lui	x25,0x4
  printf ("  Ptr_Comp:          %d\n", (int) Ptr_Glob->Ptr_Comp);
     2e2:	2e09                	c.jal	5f4 <printf>
  printf ("        should be:   (implementation-dependent)\n");
     2e4:	6511                	c.lui	x10,0x4
     2e6:	03850513          	addi	x10,x10,56 # 4038 <_isatty_r+0x350>
     2ea:	607000ef          	jal	x1,10f0 <puts>
  printf ("  Discr:             %d\n", Ptr_Glob->Discr);
     2ee:	8441a783          	lw	x15,-1980(x3) # 499c <Ptr_Glob>
     2f2:	068d0513          	addi	x10,x26,104 # 4068 <_isatty_r+0x380>
  printf ("  Int_Comp:          %d\n", Ptr_Glob->variant.var_1.Int_Comp);
     2f6:	6c11                	c.lui	x24,0x4
  printf ("  Discr:             %d\n", Ptr_Glob->Discr);
     2f8:	43cc                	c.lw	x11,4(x15)
  printf ("  Str_Comp:          %s\n", Ptr_Glob->variant.var_1.Str_Comp);
     2fa:	6991                	c.lui	x19,0x4
  printf ("  Discr:             %d\n", Ptr_Glob->Discr);
     2fc:	2ce5                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 0);
     2fe:	4581                	c.li	x11,0
     300:	f20a8513          	addi	x10,x21,-224
     304:	2cc5                	c.jal	5f4 <printf>
  printf ("  Enum_Comp:         %d\n", Ptr_Glob->variant.var_1.Enum_Comp);
     306:	8441a783          	lw	x15,-1980(x3) # 499c <Ptr_Glob>
     30a:	084c8513          	addi	x10,x25,132 # 4084 <_isatty_r+0x39c>
     30e:	478c                	c.lw	x11,8(x15)
     310:	24d5                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 2);
     312:	4589                	c.li	x11,2
     314:	f20a8513          	addi	x10,x21,-224
     318:	2cf1                	c.jal	5f4 <printf>
  printf ("  Int_Comp:          %d\n", Ptr_Glob->variant.var_1.Int_Comp);
     31a:	8441a783          	lw	x15,-1980(x3) # 499c <Ptr_Glob>
     31e:	0a0c0513          	addi	x10,x24,160 # 40a0 <_isatty_r+0x3b8>
     322:	47cc                	c.lw	x11,12(x15)
     324:	2cc1                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 17);
     326:	45c5                	c.li	x11,17
     328:	f20a8513          	addi	x10,x21,-224
     32c:	24e1                	c.jal	5f4 <printf>
  printf ("  Str_Comp:          %s\n", Ptr_Glob->variant.var_1.Str_Comp);
     32e:	8441a583          	lw	x11,-1980(x3) # 499c <Ptr_Glob>
     332:	0bc98513          	addi	x10,x19,188 # 40bc <_isatty_r+0x3d4>
  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
     336:	6911                	c.lui	x18,0x4
  printf ("  Str_Comp:          %s\n", Ptr_Glob->variant.var_1.Str_Comp);
     338:	05c1                	c.addi	x11,16
     33a:	2c6d                	c.jal	5f4 <printf>
  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
     33c:	0d890513          	addi	x10,x18,216 # 40d8 <_isatty_r+0x3f0>
     340:	5b1000ef          	jal	x1,10f0 <puts>
  printf ("Next_Ptr_Glob->\n");
     344:	6511                	c.lui	x10,0x4
     346:	10c50513          	addi	x10,x10,268 # 410c <_isatty_r+0x424>
     34a:	5a7000ef          	jal	x1,10f0 <puts>
  printf ("  Ptr_Comp:          %d\n", (int) Next_Ptr_Glob->Ptr_Comp);
     34e:	8401a783          	lw	x15,-1984(x3) # 4998 <Next_Ptr_Glob>
     352:	01cd8513          	addi	x10,x27,28
     356:	438c                	c.lw	x11,0(x15)
     358:	2c71                	c.jal	5f4 <printf>
  printf ("        should be:   (implementation-dependent), same as above\n");
     35a:	6511                	c.lui	x10,0x4
     35c:	11c50513          	addi	x10,x10,284 # 411c <_isatty_r+0x434>
     360:	591000ef          	jal	x1,10f0 <puts>
  printf ("  Discr:             %d\n", Next_Ptr_Glob->Discr);
     364:	8401a783          	lw	x15,-1984(x3) # 4998 <Next_Ptr_Glob>
     368:	068d0513          	addi	x10,x26,104
     36c:	43cc                	c.lw	x11,4(x15)
     36e:	2459                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 0);
     370:	4581                	c.li	x11,0
     372:	f20a8513          	addi	x10,x21,-224
     376:	2cbd                	c.jal	5f4 <printf>
  printf ("  Enum_Comp:         %d\n", Next_Ptr_Glob->variant.var_1.Enum_Comp);
     378:	8401a783          	lw	x15,-1984(x3) # 4998 <Next_Ptr_Glob>
     37c:	084c8513          	addi	x10,x25,132
     380:	478c                	c.lw	x11,8(x15)
     382:	2c8d                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 1);
     384:	4585                	c.li	x11,1
     386:	f20a8513          	addi	x10,x21,-224
     38a:	24ad                	c.jal	5f4 <printf>
  printf ("  Int_Comp:          %d\n", Next_Ptr_Glob->variant.var_1.Int_Comp);
     38c:	8401a783          	lw	x15,-1984(x3) # 4998 <Next_Ptr_Glob>
     390:	0a0c0513          	addi	x10,x24,160
     394:	47cc                	c.lw	x11,12(x15)
     396:	2cb9                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 18);
     398:	45c9                	c.li	x11,18
     39a:	f20a8513          	addi	x10,x21,-224
     39e:	2c99                	c.jal	5f4 <printf>
  printf ("  Str_Comp:          %s\n",
     3a0:	8401a583          	lw	x11,-1984(x3) # 4998 <Next_Ptr_Glob>
     3a4:	0bc98513          	addi	x10,x19,188
     3a8:	05c1                	c.addi	x11,16
     3aa:	24a9                	c.jal	5f4 <printf>
  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
     3ac:	0d890513          	addi	x10,x18,216
     3b0:	541000ef          	jal	x1,10f0 <puts>
  printf ("Int_1_Loc:           %d\n", Int_1_Loc);
     3b4:	45b2                	c.lwsp	x11,12(x2)
     3b6:	6511                	c.lui	x10,0x4
     3b8:	15c50513          	addi	x10,x10,348 # 415c <_isatty_r+0x474>
     3bc:	2c25                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 5);
     3be:	4595                	c.li	x11,5
     3c0:	f20a8513          	addi	x10,x21,-224
     3c4:	2c05                	c.jal	5f4 <printf>
    Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;
     3c6:	ff940593          	addi	x11,x8,-7
     3ca:	037585b3          	mul	x11,x11,x23
  printf ("Int_2_Loc:           %d\n", Int_2_Loc);
     3ce:	6511                	c.lui	x10,0x4
     3d0:	17850513          	addi	x10,x10,376 # 4178 <_isatty_r+0x490>
     3d4:	416585b3          	sub	x11,x11,x22
     3d8:	2c31                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 13);
     3da:	45b5                	c.li	x11,13
     3dc:	f20a8513          	addi	x10,x21,-224
     3e0:	2c11                	c.jal	5f4 <printf>
  printf ("Int_3_Loc:           %d\n", Int_3_Loc);
     3e2:	6511                	c.lui	x10,0x4
     3e4:	459d                	c.li	x11,7
     3e6:	19450513          	addi	x10,x10,404 # 4194 <_isatty_r+0x4ac>
     3ea:	2429                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 7);
     3ec:	459d                	c.li	x11,7
     3ee:	f20a8513          	addi	x10,x21,-224
     3f2:	2409                	c.jal	5f4 <printf>
  printf ("Enum_Loc:            %d\n", Enum_Loc);
     3f4:	6511                	c.lui	x10,0x4
     3f6:	85d2                	c.mv	x11,x20
     3f8:	1b050513          	addi	x10,x10,432 # 41b0 <_isatty_r+0x4c8>
     3fc:	2ae5                	c.jal	5f4 <printf>
  printf ("        should be:   %d\n", 1);
     3fe:	4585                	c.li	x11,1
     400:	f20a8513          	addi	x10,x21,-224
     404:	2ac5                	c.jal	5f4 <printf>
  printf ("Str_1_Loc:           %s\n", Str_1_Loc);
     406:	6511                	c.lui	x10,0x4
     408:	080c                	c.addi4spn	x11,x2,16
     40a:	1cc50513          	addi	x10,x10,460 # 41cc <_isatty_r+0x4e4>
     40e:	22dd                	c.jal	5f4 <printf>
  printf ("        should be:   DHRYSTONE PROGRAM, 1'ST STRING\n");
     410:	6511                	c.lui	x10,0x4
     412:	1e850513          	addi	x10,x10,488 # 41e8 <_isatty_r+0x500>
     416:	4db000ef          	jal	x1,10f0 <puts>
  printf ("Str_2_Loc:           %s\n", Str_2_Loc);
     41a:	6511                	c.lui	x10,0x4
     41c:	180c                	c.addi4spn	x11,x2,48
     41e:	21c50513          	addi	x10,x10,540 # 421c <_isatty_r+0x534>
     422:	2ac9                	c.jal	5f4 <printf>
  printf ("        should be:   DHRYSTONE PROGRAM, 2'ND STRING\n");
     424:	6511                	c.lui	x10,0x4
     426:	23850513          	addi	x10,x10,568 # 4238 <_isatty_r+0x550>
     42a:	4c7000ef          	jal	x1,10f0 <puts>
  printf ("\n");
     42e:	4529                	c.li	x10,10
     430:	3d1000ef          	jal	x1,1000 <putchar>
}
     434:	40ba                	c.lwsp	x1,140(x2)
     436:	442a                	c.lwsp	x8,136(x2)
     438:	449a                	c.lwsp	x9,132(x2)
     43a:	490a                	c.lwsp	x18,128(x2)
     43c:	59f6                	c.lwsp	x19,124(x2)
     43e:	5a66                	c.lwsp	x20,120(x2)
     440:	5ad6                	c.lwsp	x21,116(x2)
     442:	5b46                	c.lwsp	x22,112(x2)
     444:	5bb6                	c.lwsp	x23,108(x2)
     446:	5c26                	c.lwsp	x24,104(x2)
     448:	5c96                	c.lwsp	x25,100(x2)
     44a:	5d06                	c.lwsp	x26,96(x2)
     44c:	4df6                	c.lwsp	x27,92(x2)
     44e:	4501                	c.li	x10,0
     450:	6149                	c.addi16sp	x2,144
     452:	8082                	c.jr	x1
    printf ("Program compiled without 'register' attribute\n");
     454:	6511                	c.lui	x10,0x4
     456:	de450513          	addi	x10,x10,-540 # 3de4 <_isatty_r+0xfc>
     45a:	b32d                	c.j	184 <main+0x88>
    /* then, executed */
    return (Ident_1);
     45c:	4701                	c.li	x14,0
  if (Ch_2_Loc != Ch_2_Par_Val)
     45e:	017b1563          	bne	x22,x23,468 <main+0x36c>
  else  /* not executed */
  {
    Ch_1_Glob = Ch_1_Loc;
     462:	83618aa3          	sb	x22,-1995(x3) # 498d <Ch_1_Glob>
    return (Ident_2);
     466:	4705                	c.li	x14,1
      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
     468:	01471b63          	bne	x14,x20,47e <main+0x382>
        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
     46c:	6791                	c.lui	x15,0x4
     46e:	e9c78593          	addi	x11,x15,-356 # 3e9c <_isatty_r+0x1b4>
     472:	1808                	c.addi4spn	x10,x2,48
     474:	20a9                	c.jal	4be <strcpy>
        Int_2_Loc = Run_Index;
     476:	846a                	c.mv	x8,x26
        Int_Glob = Run_Index;
     478:	83a1ae23          	sw	x26,-1988(x3) # 4994 <Int_Glob>
      *Enum_Ref_Par = Ident_1;
     47c:	4a01                	c.li	x20,0
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     47e:	0b05                	c.addi	x22,1
     480:	0ffb7b13          	andi	x22,x22,255
     484:	bb85                	c.j	1f4 <main+0xf8>
	...

00000488 <register_fini>:
     488:	00000793          	addi	x15,x0,0
     48c:	00078863          	beq	x15,x0,49c <register_fini+0x14>
     490:	00001537          	lui	x10,0x1
     494:	58450513          	addi	x10,x10,1412 # 1584 <__libc_fini_array>
     498:	70c0006f          	jal	x0,ba4 <atexit>
     49c:	00008067          	jalr	x0,0(x1)

000004a0 <malloc>:
	char *p = heap_memory + heap_memory_used;
     4a0:	8481a703          	lw	x14,-1976(x3) # 49a0 <heap_memory_used>
     4a4:	86418793          	addi	x15,x3,-1948 # 49bc <heap_memory>
     4a8:	97ba                	c.add	x15,x14
	heap_memory_used += size;
     4aa:	972a                	c.add	x14,x10
     4ac:	84e1a423          	sw	x14,-1976(x3) # 49a0 <heap_memory_used>
	if (heap_memory_used > 1024)
     4b0:	40000693          	addi	x13,x0,1024
     4b4:	00e6d363          	bge	x13,x14,4ba <malloc+0x1a>
		asm volatile ("ebreak");
     4b8:	9002                	c.ebreak
}
     4ba:	853e                	c.mv	x10,x15
     4bc:	8082                	c.jr	x1

000004be <strcpy>:
	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
     4be:	87aa                	c.mv	x15,x10
     4c0:	00f5e733          	or	x14,x11,x15
     4c4:	8b0d                	c.andi	x14,3
     4c6:	eb31                	c.bnez	x14,51a <strcpy+0x5c>
		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
     4c8:	feff0637          	lui	x12,0xfeff0
     4cc:	80808837          	lui	x16,0x80808
     4d0:	eff60613          	addi	x12,x12,-257 # fefefeff <__heap_end+0xfebefeff>
     4d4:	08080813          	addi	x16,x16,128 # 80808080 <__heap_end+0x80408080>
		uint32_t v = *(uint32_t*)src;
     4d8:	4198                	c.lw	x14,0(x11)
		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
     4da:	00c706b3          	add	x13,x14,x12
     4de:	fff74893          	xori	x17,x14,-1
     4e2:	0116f6b3          	and	x13,x13,x17
     4e6:	0106f6b3          	and	x13,x13,x16
     4ea:	c2a1                	c.beqz	x13,52a <strcpy+0x6c>
			dst[0] = v & 0xff;
     4ec:	00e78023          	sb	x14,0(x15)
			if ((v & 0xff) == 0)
     4f0:	0ff77693          	andi	x13,x14,255
     4f4:	ca95                	c.beqz	x13,528 <strcpy+0x6a>
			v = v >> 8;
     4f6:	00875693          	srli	x13,x14,0x8
			dst[1] = v & 0xff;
     4fa:	00d780a3          	sb	x13,1(x15)
			if ((v & 0xff) == 0)
     4fe:	0ff6f693          	andi	x13,x13,255
     502:	c29d                	c.beqz	x13,528 <strcpy+0x6a>
			v = v >> 8;
     504:	01075693          	srli	x13,x14,0x10
			dst[2] = v & 0xff;
     508:	00d78123          	sb	x13,2(x15)
			if ((v & 0xff) == 0)
     50c:	0ff6f693          	andi	x13,x13,255
     510:	ce81                	c.beqz	x13,528 <strcpy+0x6a>
			v = v >> 8;
     512:	8361                	c.srli	x14,0x18
			dst[3] = v & 0xff;
     514:	00e781a3          	sb	x14,3(x15)
			return r;
     518:	8082                	c.jr	x1
		char c = *(src++);
     51a:	0005c703          	lbu	x14,0(x11)
     51e:	0585                	c.addi	x11,1
		*(dst++) = c;
     520:	0785                	c.addi	x15,1
     522:	fee78fa3          	sb	x14,-1(x15)
		if (!c) return r;
     526:	ff49                	c.bnez	x14,4c0 <strcpy+0x2>
}
     528:	8082                	c.jr	x1
		*(uint32_t*)dst = v;
     52a:	c398                	c.sw	x14,0(x15)
		src += 4;
     52c:	0591                	c.addi	x11,4
		dst += 4;
     52e:	0791                	c.addi	x15,4
	{
     530:	b765                	c.j	4d8 <strcpy+0x1a>

00000532 <memcpy>:
	while (n--) *(a++) = *(b++);
     532:	4781                	c.li	x15,0
     534:	00c79363          	bne	x15,x12,53a <memcpy+0x8>
}
     538:	8082                	c.jr	x1
	while (n--) *(a++) = *(b++);
     53a:	00f58733          	add	x14,x11,x15
     53e:	00074683          	lbu	x13,0(x14)
     542:	00f50733          	add	x14,x10,x15
     546:	0785                	c.addi	x15,1
     548:	00d70023          	sb	x13,0(x14)
     54c:	b7e5                	c.j	534 <memcpy+0x2>

0000054e <strcmp>:
	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
     54e:	00a5e7b3          	or	x15,x11,x10
     552:	8b8d                	c.andi	x15,3
     554:	eb85                	c.bnez	x15,584 <strcmp+0x36>
		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
     556:	feff06b7          	lui	x13,0xfeff0
     55a:	80808637          	lui	x12,0x80808
     55e:	eff68693          	addi	x13,x13,-257 # fefefeff <__heap_end+0xfebefeff>
     562:	08060613          	addi	x12,x12,128 # 80808080 <__heap_end+0x80408080>
		uint32_t v1 = *(uint32_t*)s1;
     566:	411c                	c.lw	x15,0(x10)
		uint32_t v2 = *(uint32_t*)s2;
     568:	4198                	c.lw	x14,0(x11)
		if (__builtin_expect(v1 != v2, 0))
     56a:	06e78b63          	beq	x15,x14,5e0 <strcmp+0x92>
			c1 = v1 & 0xff, c2 = v2 & 0xff;
     56e:	0ff7f693          	andi	x13,x15,255
     572:	0ff77613          	andi	x12,x14,255
			if (c1 != c2) return c1 < c2 ? -1 : +1;
     576:	02c68663          	beq	x13,x12,5a2 <strcmp+0x54>
			return c1 < c2 ? -1 : +1;
     57a:	557d                	c.li	x10,-1
			if (c1 != c2) return c1 < c2 ? -1 : +1;
     57c:	06c6e163          	bltu	x13,x12,5de <strcmp+0x90>
			return c1 < c2 ? -1 : +1;
     580:	4505                	c.li	x10,1
     582:	8082                	c.jr	x1
		char c1 = *(s1++);
     584:	00054783          	lbu	x15,0(x10)
		char c2 = *(s2++);
     588:	0005c703          	lbu	x14,0(x11)
		char c1 = *(s1++);
     58c:	0505                	c.addi	x10,1
		char c2 = *(s2++);
     58e:	0585                	c.addi	x11,1
		if (c1 != c2)
     590:	00e78663          	beq	x15,x14,59c <strcmp+0x4e>
			return c1 < c2 ? -1 : +1;
     594:	557d                	c.li	x10,-1
			if (c1 != c2) return c1 < c2 ? -1 : +1;
     596:	04e7e463          	bltu	x15,x14,5de <strcmp+0x90>
     59a:	b7dd                	c.j	580 <strcmp+0x32>
		else if (!c1)
     59c:	fbcd                	c.bnez	x15,54e <strcmp>
			return 0;
     59e:	4501                	c.li	x10,0
     5a0:	8082                	c.jr	x1
     5a2:	4501                	c.li	x10,0
			if (!c1) return 0;
     5a4:	ce8d                	c.beqz	x13,5de <strcmp+0x90>
			v1 = v1 >> 8, v2 = v2 >> 8;
     5a6:	0087d693          	srli	x13,x15,0x8
     5aa:	00875613          	srli	x12,x14,0x8
			c1 = v1 & 0xff, c2 = v2 & 0xff;
     5ae:	0ff6f693          	andi	x13,x13,255
     5b2:	0ff67613          	andi	x12,x12,255
			if (c1 != c2) return c1 < c2 ? -1 : +1;
     5b6:	fcc692e3          	bne	x13,x12,57a <strcmp+0x2c>
			return 0;
     5ba:	4501                	c.li	x10,0
			if (!c1) return 0;
     5bc:	c28d                	c.beqz	x13,5de <strcmp+0x90>
			v1 = v1 >> 8, v2 = v2 >> 8;
     5be:	0107d693          	srli	x13,x15,0x10
     5c2:	01075613          	srli	x12,x14,0x10
			c1 = v1 & 0xff, c2 = v2 & 0xff;
     5c6:	0ff6f693          	andi	x13,x13,255
     5ca:	0ff67613          	andi	x12,x12,255
			if (c1 != c2) return c1 < c2 ? -1 : +1;
     5ce:	fac696e3          	bne	x13,x12,57a <strcmp+0x2c>
			return 0;
     5d2:	4501                	c.li	x10,0
			if (!c1) return 0;
     5d4:	c689                	c.beqz	x13,5de <strcmp+0x90>
			c1 = v1 & 0xff, c2 = v2 & 0xff;
     5d6:	83e1                	c.srli	x15,0x18
     5d8:	8361                	c.srli	x14,0x18
			if (c1 != c2) return c1 < c2 ? -1 : +1;
     5da:	fae79de3          	bne	x15,x14,594 <strcmp+0x46>
}
     5de:	8082                	c.jr	x1
		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
     5e0:	00d78733          	add	x14,x15,x13
     5e4:	fff7c793          	xori	x15,x15,-1
     5e8:	8ff9                	c.and	x15,x14
     5ea:	8ff1                	c.and	x15,x12
     5ec:	fbcd                	c.bnez	x15,59e <strcmp+0x50>
		s1 += 4;
     5ee:	0511                	c.addi	x10,4
		s2 += 4;
     5f0:	0591                	c.addi	x11,4
	{
     5f2:	bf95                	c.j	566 <strcmp+0x18>

000005f4 <printf>:
{
     5f4:	715d                	c.addi16sp	x2,-80
     5f6:	c2be                	c.swsp	x15,68(x2)
	va_start(ap, format);
     5f8:	185c                	c.addi4spn	x15,x2,52
{
     5fa:	de36                	c.swsp	x13,60(x2)
     5fc:	c6c6                	c.swsp	x17,76(x2)
     5fe:	da2e                	c.swsp	x11,52(x2)
     600:	dc32                	c.swsp	x12,56(x2)
     602:	c0ba                	c.swsp	x14,64(x2)
     604:	c4c2                	c.swsp	x16,72(x2)
	va_start(ap, format);
     606:	c63e                	c.swsp	x15,12(x2)
	for (i = 0; format[i]; i++)
     608:	4681                	c.li	x13,0
		if (format[i] == '%') {
     60a:	02500893          	addi	x17,x0,37
				if (format[i] == 'c') {
     60e:	06300313          	addi	x6,x0,99
				if (format[i] == 's') {
     612:	07300e13          	addi	x28,x0,115
				if (format[i] == 'd') {
     616:	06400e93          	addi	x29,x0,100
	*((volatile int*)0x10000000) = c;
     61a:	10000f37          	lui	x30,0x10000
	for (i = 0; format[i]; i++)
     61e:	00d507b3          	add	x15,x10,x13
     622:	0007c783          	lbu	x15,0(x15)
     626:	e399                	c.bnez	x15,62c <printf+0x38>
}
     628:	6161                	c.addi16sp	x2,80
     62a:	8082                	c.jr	x1
		if (format[i] == '%') {
     62c:	09179c63          	bne	x15,x17,6c4 <printf+0xd0>
			while (format[++i]) {
     630:	0685                	c.addi	x13,1
     632:	00d507b3          	add	x15,x10,x13
     636:	0007c783          	lbu	x15,0(x15)
     63a:	cb99                	c.beqz	x15,650 <printf+0x5c>
				if (format[i] == 'c') {
     63c:	00679c63          	bne	x15,x6,654 <printf+0x60>
					printf_c(va_arg(ap,int));
     640:	47b2                	c.lwsp	x15,12(x2)
     642:	00478713          	addi	x14,x15,4
     646:	c63a                	c.swsp	x14,12(x2)
     648:	4398                	c.lw	x14,0(x15)
	*((volatile int*)0x10000000) = c;
     64a:	100007b7          	lui	x15,0x10000
     64e:	c398                	c.sw	x14,0(x15)
	for (i = 0; format[i]; i++)
     650:	0685                	c.addi	x13,1
     652:	b7f1                	c.j	61e <printf+0x2a>
				if (format[i] == 's') {
     654:	01c79f63          	bne	x15,x28,672 <printf+0x7e>
					printf_s(va_arg(ap,char*));
     658:	47b2                	c.lwsp	x15,12(x2)
		*((volatile int*)0x10000000) = *(p++);
     65a:	10000637          	lui	x12,0x10000
					printf_s(va_arg(ap,char*));
     65e:	00478713          	addi	x14,x15,4 # 10000004 <__heap_end+0xfc00004>
     662:	439c                	c.lw	x15,0(x15)
     664:	c63a                	c.swsp	x14,12(x2)
	while (*p)
     666:	0007c703          	lbu	x14,0(x15)
     66a:	d37d                	c.beqz	x14,650 <printf+0x5c>
		*((volatile int*)0x10000000) = *(p++);
     66c:	0785                	c.addi	x15,1
     66e:	c218                	c.sw	x14,0(x12)
     670:	bfdd                	c.j	666 <printf+0x72>
				if (format[i] == 'd') {
     672:	fbd79fe3          	bne	x15,x29,630 <printf+0x3c>
					printf_d(va_arg(ap,int));
     676:	47b2                	c.lwsp	x15,12(x2)
     678:	00478713          	addi	x14,x15,4
     67c:	c63a                	c.swsp	x14,12(x2)
     67e:	4398                	c.lw	x14,0(x15)
	if (val < 0) {
     680:	00075963          	bge	x14,x0,692 <printf+0x9e>
	*((volatile int*)0x10000000) = c;
     684:	100007b7          	lui	x15,0x10000
     688:	02d00613          	addi	x12,x0,45
     68c:	c390                	c.sw	x12,0(x15)
		val = -val;
     68e:	40e00733          	sub	x14,x0,x14
{
     692:	081c                	c.addi4spn	x15,x2,16
     694:	85be                	c.mv	x11,x15
		*(p++) = '0' + val % 10;
     696:	4829                	c.li	x16,10
	while (val || p == buffer) {
     698:	ef01                	c.bnez	x14,6b0 <printf+0xbc>
     69a:	00b78b63          	beq	x15,x11,6b0 <printf+0xbc>
	*((volatile int*)0x10000000) = c;
     69e:	10000737          	lui	x14,0x10000
		printf_c(*(--p));
     6a2:	fff7c603          	lbu	x12,-1(x15) # fffffff <__heap_end+0xfbfffff>
     6a6:	17fd                	c.addi	x15,-1
	*((volatile int*)0x10000000) = c;
     6a8:	c310                	c.sw	x12,0(x14)
	while (p != buffer)
     6aa:	feb79ce3          	bne	x15,x11,6a2 <printf+0xae>
     6ae:	b74d                	c.j	650 <printf+0x5c>
		*(p++) = '0' + val % 10;
     6b0:	03076633          	rem	x12,x14,x16
     6b4:	0785                	c.addi	x15,1
     6b6:	03060613          	addi	x12,x12,48 # 10000030 <__heap_end+0xfc00030>
		val = val / 10;
     6ba:	03074733          	div	x14,x14,x16
		*(p++) = '0' + val % 10;
     6be:	fec78fa3          	sb	x12,-1(x15)
		val = val / 10;
     6c2:	bfd9                	c.j	698 <printf+0xa4>
	*((volatile int*)0x10000000) = c;
     6c4:	00ff2023          	sw	x15,0(x30) # 10000000 <__heap_end+0xfc00000>
}
     6c8:	b761                	c.j	650 <printf+0x5c>

000006ca <Proc_2>:
    if (Ch_1_Glob == 'A')
     6ca:	8351c703          	lbu	x14,-1995(x3) # 498d <Ch_1_Glob>
     6ce:	04100793          	addi	x15,x0,65
     6d2:	00f71863          	bne	x14,x15,6e2 <Proc_2+0x18>
      Int_Loc -= 1;
     6d6:	411c                	c.lw	x15,0(x10)
      *Int_Par_Ref = Int_Loc - Int_Glob;
     6d8:	83c1a703          	lw	x14,-1988(x3) # 4994 <Int_Glob>
      Int_Loc -= 1;
     6dc:	07a5                	c.addi	x15,9
      *Int_Par_Ref = Int_Loc - Int_Glob;
     6de:	8f99                	c.sub	x15,x14
     6e0:	c11c                	c.sw	x15,0(x10)
} /* Proc_2 */
     6e2:	8082                	c.jr	x1

000006e4 <Proc_3>:
  if (Ptr_Glob != Null)
     6e4:	8441a703          	lw	x14,-1980(x3) # 499c <Ptr_Glob>
     6e8:	c319                	c.beqz	x14,6ee <Proc_3+0xa>
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
     6ea:	4318                	c.lw	x14,0(x14)
     6ec:	c118                	c.sw	x14,0(x10)
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     6ee:	8441a703          	lw	x14,-1980(x3) # 499c <Ptr_Glob>
     6f2:	83c1a783          	lw	x15,-1988(x3) # 4994 <Int_Glob>
     6f6:	07b1                	c.addi	x15,12
     6f8:	c75c                	c.sw	x15,12(x14)
} /* Proc_3 */
     6fa:	8082                	c.jr	x1

000006fc <Proc_4>:
  Bool_Loc = Ch_1_Glob == 'A';
     6fc:	8351c783          	lbu	x15,-1995(x3) # 498d <Ch_1_Glob>
  Bool_Glob = Bool_Loc | Bool_Glob;
     700:	8381a683          	lw	x13,-1992(x3) # 4990 <Bool_Glob>
  Bool_Loc = Ch_1_Glob == 'A';
     704:	fbf78793          	addi	x15,x15,-65
     708:	0017b793          	sltiu	x15,x15,1
  Bool_Glob = Bool_Loc | Bool_Glob;
     70c:	8fd5                	c.or	x15,x13
     70e:	82f1ac23          	sw	x15,-1992(x3) # 4990 <Bool_Glob>
  Ch_2_Glob = 'B';
     712:	04200713          	addi	x14,x0,66
     716:	82e18a23          	sb	x14,-1996(x3) # 498c <Ch_2_Glob>
} /* Proc_4 */
     71a:	8082                	c.jr	x1

0000071c <Proc_5>:
  Ch_1_Glob = 'A';
     71c:	04100713          	addi	x14,x0,65
     720:	82e18aa3          	sb	x14,-1995(x3) # 498d <Ch_1_Glob>
  Bool_Glob = false;
     724:	8201ac23          	sw	x0,-1992(x3) # 4990 <Bool_Glob>
} /* Proc_5 */
     728:	8082                	c.jr	x1

0000072a <Proc_6>:
Enumeration Enum_Par_Val;
{
  Enumeration Enum_Loc;

  Enum_Loc = Enum_Par_Val;
  if (Enum_Loc == Ident_3)
     72a:	4789                	c.li	x15,2
     72c:	00f51563          	bne	x10,x15,736 <Proc_6+0xc>
      *Enum_Ref_Par = Ident_2;
     730:	4785                	c.li	x15,1
     732:	c19c                	c.sw	x15,0(x11)
      break;
     734:	8082                	c.jr	x1
    *Enum_Ref_Par = Ident_4;
     736:	470d                	c.li	x14,3
     738:	c198                	c.sw	x14,0(x11)
  switch (Enum_Val_Par)
     73a:	4705                	c.li	x14,1
     73c:	00e50963          	beq	x10,x14,74e <Proc_6+0x24>
     740:	4711                	c.li	x14,4
     742:	00e50d63          	beq	x10,x14,75c <Proc_6+0x32>
     746:	e911                	c.bnez	x10,75a <Proc_6+0x30>
      *Enum_Ref_Par = Ident_1;
     748:	0005a023          	sw	x0,0(x11)
     74c:	8082                	c.jr	x1
      if (Int_Glob > 100)
     74e:	83c1a703          	lw	x14,-1988(x3) # 4994 <Int_Glob>
     752:	06400793          	addi	x15,x0,100
     756:	fee7c9e3          	blt	x15,x14,748 <Proc_6+0x1e>
} /* Proc_6 */
     75a:	8082                	c.jr	x1
      *Enum_Ref_Par = Ident_3;
     75c:	c19c                	c.sw	x15,0(x11)
      break;
     75e:	8082                	c.jr	x1

00000760 <Proc_1>:
{
     760:	1141                	c.addi	x2,-16
     762:	c422                	c.swsp	x8,8(x2)
     764:	c04a                	c.swsp	x18,0(x2)
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
     766:	4100                	c.lw	x8,0(x10)
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     768:	8441a903          	lw	x18,-1980(x3) # 499c <Ptr_Glob>
{
     76c:	c226                	c.swsp	x9,4(x2)
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     76e:	03000613          	addi	x12,x0,48
{
     772:	84aa                	c.mv	x9,x10
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     774:	85ca                	c.mv	x11,x18
     776:	8522                	c.mv	x10,x8
{
     778:	c606                	c.swsp	x1,12(x2)
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     77a:	3b65                	c.jal	532 <memcpy>
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
     77c:	4795                	c.li	x15,5
     77e:	c4dc                	c.sw	x15,12(x9)
        = Ptr_Val_Par->variant.var_1.Int_Comp;
     780:	c45c                	c.sw	x15,12(x8)
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
     782:	409c                	c.lw	x15,0(x9)
  Proc_3 (&Next_Record->Ptr_Comp);
     784:	8522                	c.mv	x10,x8
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
     786:	c01c                	c.sw	x15,0(x8)
  Proc_3 (&Next_Record->Ptr_Comp);
     788:	3fb1                	c.jal	6e4 <Proc_3>
  if (Next_Record->Discr == Ident_1)
     78a:	405c                	c.lw	x15,4(x8)
     78c:	e395                	c.bnez	x15,7b0 <Proc_1+0x50>
    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp,
     78e:	4488                	c.lw	x10,8(x9)
    Next_Record->variant.var_1.Int_Comp = 6;
     790:	4799                	c.li	x15,6
     792:	c45c                	c.sw	x15,12(x8)
    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp,
     794:	00840593          	addi	x11,x8,8
     798:	3f49                	c.jal	72a <Proc_6>
    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
     79a:	00092783          	lw	x15,0(x18)
     79e:	c01c                	c.sw	x15,0(x8)
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     7a0:	47c9                	c.li	x15,18
     7a2:	c45c                	c.sw	x15,12(x8)
} /* Proc_1 */
     7a4:	40b2                	c.lwsp	x1,12(x2)
     7a6:	4422                	c.lwsp	x8,8(x2)
     7a8:	4492                	c.lwsp	x9,4(x2)
     7aa:	4902                	c.lwsp	x18,0(x2)
     7ac:	0141                	c.addi	x2,16
     7ae:	8082                	c.jr	x1
    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
     7b0:	408c                	c.lw	x11,0(x9)
     7b2:	03000613          	addi	x12,x0,48
     7b6:	8526                	c.mv	x10,x9
     7b8:	3bad                	c.jal	532 <memcpy>
     7ba:	b7ed                	c.j	7a4 <Proc_1+0x44>

000007bc <Proc_7>:
  Int_Loc = Int_1_Par_Val + 2;
     7bc:	0509                	c.addi	x10,2
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     7be:	952e                	c.add	x10,x11
     7c0:	c208                	c.sw	x10,0(x12)
} /* Proc_7 */
     7c2:	8082                	c.jr	x1

000007c4 <Proc_8>:
  Int_Loc = Int_1_Par_Val + 5;
     7c4:	00560713          	addi	x14,x12,5
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
     7c8:	00271793          	slli	x15,x14,0x2
     7cc:	953e                	c.add	x10,x15
     7ce:	c114                	c.sw	x13,0(x10)
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
     7d0:	c154                	c.sw	x13,4(x10)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
     7d2:	0c800693          	addi	x13,x0,200
     7d6:	02d706b3          	mul	x13,x14,x13
     7da:	060a                	c.slli	x12,0x2
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
     7dc:	dd38                	c.sw	x14,120(x10)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
     7de:	00c687b3          	add	x15,x13,x12
     7e2:	97ae                	c.add	x15,x11
     7e4:	cbd8                	c.sw	x14,20(x15)
     7e6:	cf98                	c.sw	x14,24(x15)
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
     7e8:	4b98                	c.lw	x14,16(x15)
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
     7ea:	95b6                	c.add	x11,x13
     7ec:	95b2                	c.add	x11,x12
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
     7ee:	0705                	c.addi	x14,1 # 10000001 <__heap_end+0xfc00001>
     7f0:	cb98                	c.sw	x14,16(x15)
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
     7f2:	4118                	c.lw	x14,0(x10)
     7f4:	6785                	c.lui	x15,0x1
     7f6:	97ae                	c.add	x15,x11
     7f8:	fae7aa23          	sw	x14,-76(x15) # fb4 <_fwalk_sglue+0x70>
  Int_Glob = 5;
     7fc:	4715                	c.li	x14,5
     7fe:	82e1ae23          	sw	x14,-1988(x3) # 4994 <Int_Glob>
} /* Proc_8 */
     802:	8082                	c.jr	x1

00000804 <Func_1>:
{
     804:	0ff57513          	andi	x10,x10,255
     808:	0ff5f593          	andi	x11,x11,255
  if (Ch_2_Loc != Ch_2_Par_Val)
     80c:	00b51663          	bne	x10,x11,818 <Func_1+0x14>
    Ch_1_Glob = Ch_1_Loc;
     810:	82a18aa3          	sb	x10,-1995(x3) # 498d <Ch_1_Glob>
    return (Ident_2);
     814:	4505                	c.li	x10,1
     816:	8082                	c.jr	x1
    return (Ident_1);
     818:	4501                	c.li	x10,0
} /* Func_1 */
     81a:	8082                	c.jr	x1

0000081c <Func_2>:
{
     81c:	1141                	c.addi	x2,-16
     81e:	c606                	c.swsp	x1,12(x2)
    if (Func_1 (Str_1_Par_Ref[Int_Loc],
     820:	00254683          	lbu	x13,2(x10)
  if (Ch_2_Loc != Ch_2_Par_Val)
     824:	0035c783          	lbu	x15,3(x11)
     828:	00d79563          	bne	x15,x13,832 <Func_2+0x16>
    Ch_1_Glob = Ch_1_Loc;
     82c:	82f18aa3          	sb	x15,-1995(x3) # 498d <Ch_1_Glob>
  while (Int_Loc <= 2) /* loop body executed once */
     830:	bfc5                	c.j	820 <Func_2+0x4>
    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
     832:	3b31                	c.jal	54e <strcmp>
      return (false);
     834:	4781                	c.li	x15,0
    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
     836:	00a05663          	bge	x0,x10,842 <Func_2+0x26>
      Int_Glob = Int_Loc;
     83a:	4729                	c.li	x14,10
     83c:	82e1ae23          	sw	x14,-1988(x3) # 4994 <Int_Glob>
      return (true);
     840:	4785                	c.li	x15,1
} /* Func_2 */
     842:	40b2                	c.lwsp	x1,12(x2)
     844:	853e                	c.mv	x10,x15
     846:	0141                	c.addi	x2,16
     848:	8082                	c.jr	x1

0000084a <Func_3>:
  if (Enum_Loc == Ident_3)
     84a:	1579                	c.addi	x10,-2
    /* then, executed */
    return (true);
  else /* not executed */
    return (false);
} /* Func_3 */
     84c:	00153513          	sltiu	x10,x10,1
     850:	8082                	c.jr	x1

00000852 <__no_irq_handler>:
.weak m_fast15_irq_handler


/* exception handling */
__no_irq_handler:
	la a0, no_exception_handler_msg
     852:	00004517          	auipc	x10,0x4
     856:	b1150513          	addi	x10,x10,-1263 # 4363 <no_exception_handler_msg>
	jal ra, puts
     85a:	097000ef          	jal	x1,10f0 <puts>
	j __no_irq_handler
     85e:	bfd5                	c.j	852 <__no_irq_handler>

00000860 <m_software_irq_handler>:

m_software_irq_handler:
	j __no_irq_handler
     860:	bfcd                	c.j	852 <__no_irq_handler>

00000862 <m_timer_irq_handler>:

m_timer_irq_handler:
	j __no_irq_handler
     862:	bfc5                	c.j	852 <__no_irq_handler>

00000864 <m_external_irq_handler>:

m_external_irq_handler:
	j __no_irq_handler
     864:	b7fd                	c.j	852 <__no_irq_handler>

00000866 <m_fast0_irq_handler>:

m_fast0_irq_handler:
	j __no_irq_handler
     866:	b7f5                	c.j	852 <__no_irq_handler>

00000868 <m_fast1_irq_handler>:

m_fast1_irq_handler:
	j __no_irq_handler
     868:	b7ed                	c.j	852 <__no_irq_handler>

0000086a <m_fast2_irq_handler>:

m_fast2_irq_handler:
	j __no_irq_handler
     86a:	b7e5                	c.j	852 <__no_irq_handler>

0000086c <m_fast3_irq_handler>:

m_fast3_irq_handler:
	j __no_irq_handler
     86c:	b7dd                	c.j	852 <__no_irq_handler>

0000086e <m_fast4_irq_handler>:

m_fast4_irq_handler:
	j __no_irq_handler
     86e:	b7d5                	c.j	852 <__no_irq_handler>

00000870 <m_fast5_irq_handler>:

m_fast5_irq_handler:
	j __no_irq_handler
     870:	b7cd                	c.j	852 <__no_irq_handler>

00000872 <m_fast6_irq_handler>:

m_fast6_irq_handler:
	j __no_irq_handler
     872:	b7c5                	c.j	852 <__no_irq_handler>

00000874 <m_fast7_irq_handler>:

m_fast7_irq_handler:
	j __no_irq_handler
     874:	bff9                	c.j	852 <__no_irq_handler>

00000876 <m_fast8_irq_handler>:

m_fast8_irq_handler:
	j __no_irq_handler
     876:	bff1                	c.j	852 <__no_irq_handler>

00000878 <m_fast9_irq_handler>:

m_fast9_irq_handler:
	j __no_irq_handler
     878:	bfe9                	c.j	852 <__no_irq_handler>

0000087a <m_fast10_irq_handler>:

m_fast10_irq_handler:
	j __no_irq_handler
     87a:	bfe1                	c.j	852 <__no_irq_handler>

0000087c <m_fast11_irq_handler>:

m_fast11_irq_handler:
	j __no_irq_handler
     87c:	bfd9                	c.j	852 <__no_irq_handler>

0000087e <m_fast12_irq_handler>:

m_fast12_irq_handler:
	j __no_irq_handler
     87e:	bfd1                	c.j	852 <__no_irq_handler>

00000880 <m_fast13_irq_handler>:

m_fast13_irq_handler:
	j __no_irq_handler
     880:	bfc9                	c.j	852 <__no_irq_handler>

00000882 <m_fast14_irq_handler>:

m_fast14_irq_handler:
	j __no_irq_handler
     882:	bfc1                	c.j	852 <__no_irq_handler>

00000884 <m_fast15_irq_handler>:

m_fast15_irq_handler:
	j __no_irq_handler
     884:	b7f9                	c.j	852 <__no_irq_handler>

00000886 <u_sw_irq_handler>:

u_sw_irq_handler:
	/* While we are still using puts in handlers, save all caller saved
	   regs.  Eventually, some of these saves could be deferred.  */
	addi sp,sp,-64
     886:	7139                	c.addi16sp	x2,-64
	sw ra, 0(sp)
     888:	c006                	c.swsp	x1,0(x2)
	sw a0, 4(sp)
     88a:	c22a                	c.swsp	x10,4(x2)
	sw a1, 8(sp)
     88c:	c42e                	c.swsp	x11,8(x2)
	sw a2, 12(sp)
     88e:	c632                	c.swsp	x12,12(x2)
	sw a3, 16(sp)
     890:	c836                	c.swsp	x13,16(x2)
	sw a4, 20(sp)
     892:	ca3a                	c.swsp	x14,20(x2)
	sw a5, 24(sp)
     894:	cc3e                	c.swsp	x15,24(x2)
	sw a6, 28(sp)
     896:	ce42                	c.swsp	x16,28(x2)
	sw a7, 32(sp)
     898:	d046                	c.swsp	x17,32(x2)
	sw t0, 36(sp)
     89a:	d216                	c.swsp	x5,36(x2)
	sw t1, 40(sp)
     89c:	d41a                	c.swsp	x6,40(x2)
	sw t2, 44(sp)
     89e:	d61e                	c.swsp	x7,44(x2)
	sw t3, 48(sp)
     8a0:	d872                	c.swsp	x28,48(x2)
	sw t4, 52(sp)
     8a2:	da76                	c.swsp	x29,52(x2)
	sw t5, 56(sp)
     8a4:	dc7a                	c.swsp	x30,56(x2)
	sw t6, 60(sp)
     8a6:	de7e                	c.swsp	x31,60(x2)
	csrr t0, mcause
     8a8:	342022f3          	csrrs	x5,mcause,x0
	li t1, EXCEPTION_ILLEGAL_INSN
     8ac:	4309                	c.li	x6,2
	beq t0, t1, handle_illegal_insn
     8ae:	02628363          	beq	x5,x6,8d4 <handle_illegal_insn>
	li t1, EXCEPTION_ECALL_M
     8b2:	432d                	c.li	x6,11
	beq t0, t1, handle_ecall
     8b4:	00628663          	beq	x5,x6,8c0 <handle_ecall>
	li t1, EXCEPTION_BREAKPOINT
     8b8:	430d                	c.li	x6,3
	beq t0, t1, handle_ebreak
     8ba:	00628663          	beq	x5,x6,8c6 <handle_ebreak>
	j handle_unknown
     8be:	a015                	c.j	8e2 <handle_unknown>

000008c0 <handle_ecall>:

handle_ecall:
	jal ra, handle_syscall
     8c0:	208000ef          	jal	x1,ac8 <handle_syscall>
	j end_handler_incr_mepc
     8c4:	a035                	c.j	8f0 <end_handler_incr_mepc>

000008c6 <handle_ebreak>:

handle_ebreak:
	/* TODO support debug handling requirements.  */
	la a0, ebreak_msg
     8c6:	00004517          	auipc	x10,0x4
     8ca:	a3c50513          	addi	x10,x10,-1476 # 4302 <ebreak_msg>
	jal ra, puts
     8ce:	023000ef          	jal	x1,10f0 <puts>
	j end_handler_incr_mepc
     8d2:	a839                	c.j	8f0 <end_handler_incr_mepc>

000008d4 <handle_illegal_insn>:

handle_illegal_insn:
	la a0, illegal_insn_msg
     8d4:	00004517          	auipc	x10,0x4
     8d8:	9c250513          	addi	x10,x10,-1598 # 4296 <illegal_insn_msg>
	jal ra, puts
     8dc:	015000ef          	jal	x1,10f0 <puts>
	j end_handler_incr_mepc
     8e0:	a801                	c.j	8f0 <end_handler_incr_mepc>

000008e2 <handle_unknown>:

handle_unknown:
	la a0, unknown_msg
     8e2:	00004517          	auipc	x10,0x4
     8e6:	a5050513          	addi	x10,x10,-1456 # 4332 <unknown_msg>
	jal ra, puts
     8ea:	007000ef          	jal	x1,10f0 <puts>
	/* We don't know what interrupt/exception is being handled, so don't
	   increment mepc.  */
	j end_handler_ret
     8ee:	a831                	c.j	90a <end_handler_ret>

000008f0 <end_handler_incr_mepc>:

end_handler_incr_mepc:
	csrr t0, mepc
     8f0:	341022f3          	csrrs	x5,mepc,x0
	lb t1, 0(t0)
     8f4:	00028303          	lb	x6,0(x5)
	li a0, 0x3
     8f8:	450d                	c.li	x10,3
	and t1, t1, a0
     8fa:	00a37333          	and	x6,x6,x10
	/* Increment mepc by 2 or 4 depending on whether the instruction at mepc
	   is compressed or not.  */
	bne t1, a0, end_handler_incr_mepc2
     8fe:	00a31363          	bne	x6,x10,904 <end_handler_incr_mepc2>
	addi t0, t0, 2
     902:	0289                	c.addi	x5,2

00000904 <end_handler_incr_mepc2>:
end_handler_incr_mepc2:
	addi t0, t0, 2
     904:	0289                	c.addi	x5,2
	csrw mepc, t0
     906:	34129073          	csrrw	x0,mepc,x5

0000090a <end_handler_ret>:
end_handler_ret:
	lw ra, 0(sp)
     90a:	4082                	c.lwsp	x1,0(x2)
	lw a0, 4(sp)
     90c:	4512                	c.lwsp	x10,4(x2)
	lw a1, 8(sp)
     90e:	45a2                	c.lwsp	x11,8(x2)
	lw a2, 12(sp)
     910:	4632                	c.lwsp	x12,12(x2)
	lw a3, 16(sp)
     912:	46c2                	c.lwsp	x13,16(x2)
	lw a4, 20(sp)
     914:	4752                	c.lwsp	x14,20(x2)
	lw a5, 24(sp)
     916:	47e2                	c.lwsp	x15,24(x2)
	lw a6, 28(sp)
     918:	4872                	c.lwsp	x16,28(x2)
	lw a7, 32(sp)
     91a:	5882                	c.lwsp	x17,32(x2)
	lw t0, 36(sp)
     91c:	5292                	c.lwsp	x5,36(x2)
	lw t1, 40(sp)
     91e:	5322                	c.lwsp	x6,40(x2)
	lw t2, 44(sp)
     920:	53b2                	c.lwsp	x7,44(x2)
	lw t3, 48(sp)
     922:	5e42                	c.lwsp	x28,48(x2)
	lw t4, 52(sp)
     924:	5ed2                	c.lwsp	x29,52(x2)
	lw t5, 56(sp)
     926:	5f62                	c.lwsp	x30,56(x2)
	lw t6, 60(sp)
     928:	5ff2                	c.lwsp	x31,60(x2)
	addi sp,sp,64
     92a:	6121                	c.addi16sp	x2,64
	mret
     92c:	30200073          	mret

00000930 <__syscall_error>:
#endif
/* Upstream newlib now defines this in libgloss/riscv/internal_syscall.h.  */
long
__syscall_error(long a0)
{
  errno = -a0;
     930:	40a00533          	sub	x10,x0,x10
     934:	84a1a823          	sw	x10,-1968(x3) # 49a8 <errno>
  return -1;
}
     938:	557d                	c.li	x10,-1
     93a:	8082                	c.jr	x1

0000093c <unimplemented_syscall>:

void unimplemented_syscall()
{
  const char *p = "BSP: Unimplemented system call called!\n";
     93c:	6791                	c.lui	x15,0x4
     93e:	26c78793          	addi	x15,x15,620 # 426c <_isatty_r+0x584>
  while (*p)
    *(volatile int *)STDOUT_REG = *(p++);
     942:	100006b7          	lui	x13,0x10000
  while (*p)
     946:	0007c703          	lbu	x14,0(x15)
     94a:	e311                	c.bnez	x14,94e <unimplemented_syscall+0x12>
}
     94c:	8082                	c.jr	x1
    *(volatile int *)STDOUT_REG = *(p++);
     94e:	0785                	c.addi	x15,1
     950:	c298                	c.sw	x14,0(x13)
     952:	bfd5                	c.j	946 <unimplemented_syscall+0xa>

00000954 <nanosleep>:

int nanosleep(const struct timespec *rqtp, struct timespec *rmtp)
{
  errno = ENOSYS;
     954:	05800713          	addi	x14,x0,88
     958:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     95c:	557d                	c.li	x10,-1
     95e:	8082                	c.jr	x1

00000960 <_access>:

int _access(const char *file, int mode)
{
  errno = ENOSYS;
     960:	05800713          	addi	x14,x0,88
     964:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     968:	557d                	c.li	x10,-1
     96a:	8082                	c.jr	x1

0000096c <_chdir>:

int _chdir(const char *path)
{
  errno = ENOSYS;
     96c:	05800713          	addi	x14,x0,88
     970:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     974:	557d                	c.li	x10,-1
     976:	8082                	c.jr	x1

00000978 <_chmod>:

int _chmod(const char *path, mode_t mode)
{
  errno = ENOSYS;
     978:	05800713          	addi	x14,x0,88
     97c:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     980:	557d                	c.li	x10,-1
     982:	8082                	c.jr	x1

00000984 <_chown>:

int _chown(const char *path, uid_t owner, gid_t group)
{
  errno = ENOSYS;
     984:	05800713          	addi	x14,x0,88
     988:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     98c:	557d                	c.li	x10,-1
     98e:	8082                	c.jr	x1

00000990 <_close>:

int _close(int file)
{
  return -1;
}
     990:	557d                	c.li	x10,-1
     992:	8082                	c.jr	x1

00000994 <_execve>:

int _execve(const char *name, char *const argv[], char *const env[])
{
  errno = ENOMEM;
     994:	4731                	c.li	x14,12
     996:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     99a:	557d                	c.li	x10,-1
     99c:	8082                	c.jr	x1

0000099e <_exit>:

void _exit(int exit_status)
{
  *(volatile int *)EXIT_REG = exit_status;
     99e:	200007b7          	lui	x15,0x20000
     9a2:	c3c8                	c.sw	x10,4(x15)
  asm volatile("wfi");
     9a4:	10500073          	wfi
  /* _exit should not return */
  while (1) {};
     9a8:	a001                	c.j	9a8 <_exit+0xa>

000009aa <_faccessat>:
}

int _faccessat(int dirfd, const char *file, int mode, int flags)
{
  errno = ENOSYS;
     9aa:	05800713          	addi	x14,x0,88
     9ae:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     9b2:	557d                	c.li	x10,-1
     9b4:	8082                	c.jr	x1

000009b6 <_fork>:

int _fork(void)
{
  errno = EAGAIN;
     9b6:	472d                	c.li	x14,11
     9b8:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     9bc:	557d                	c.li	x10,-1
     9be:	8082                	c.jr	x1

000009c0 <_fstat>:

int _fstat(int file, struct stat *st)
{
  st->st_mode = S_IFCHR;
     9c0:	6789                	c.lui	x15,0x2
     9c2:	c1dc                	c.sw	x15,4(x11)
  return 0;
  // errno = -ENOSYS;
  // return -1;
}
     9c4:	4501                	c.li	x10,0
     9c6:	8082                	c.jr	x1

000009c8 <_fstatat>:

int _fstatat(int dirfd, const char *file, struct stat *st, int flags)
{
  errno = ENOSYS;
     9c8:	05800713          	addi	x14,x0,88
     9cc:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     9d0:	557d                	c.li	x10,-1
     9d2:	8082                	c.jr	x1

000009d4 <_ftime>:

int _ftime(struct timeb *tp)
     9d4:	05800713          	addi	x14,x0,88
     9d8:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
     9dc:	557d                	c.li	x10,-1
     9de:	8082                	c.jr	x1

000009e0 <_getcwd>:
  return -1;
}

char *_getcwd(char *buf, size_t size)
{
  errno = -ENOSYS;
     9e0:	fa800713          	addi	x14,x0,-88
     9e4:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return NULL;
}
     9e8:	4501                	c.li	x10,0
     9ea:	8082                	c.jr	x1

000009ec <_getpid>:

int _getpid()
{
  return 1;
}
     9ec:	4505                	c.li	x10,1
     9ee:	8082                	c.jr	x1

000009f0 <_gettimeofday>:

int _gettimeofday(struct timeval *tp, void *tzp)
{
  errno = -ENOSYS;
     9f0:	fa800713          	addi	x14,x0,-88
     9f4:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     9f8:	557d                	c.li	x10,-1
     9fa:	8082                	c.jr	x1

000009fc <_isatty>:

int _isatty(int file)
{
  return (file == STDOUT_FILENO);
     9fc:	157d                	c.addi	x10,-1
}
     9fe:	00153513          	sltiu	x10,x10,1
     a02:	8082                	c.jr	x1

00000a04 <_kill>:

int _kill(int pid, int sig)
{
  errno = EINVAL;
     a04:	4759                	c.li	x14,22
     a06:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     a0a:	557d                	c.li	x10,-1
     a0c:	8082                	c.jr	x1

00000a0e <_link>:

int _link(const char *old_name, const char *new_name)
{
  errno = EMLINK;
     a0e:	477d                	c.li	x14,31
     a10:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     a14:	557d                	c.li	x10,-1
     a16:	8082                	c.jr	x1

00000a18 <_lseek>:

off_t _lseek(int file, off_t ptr, int dir)
{
  return 0;
}
     a18:	4501                	c.li	x10,0
     a1a:	8082                	c.jr	x1

00000a1c <_lstat>:

int _lstat(const char *file, struct stat *st)
     a1c:	05800713          	addi	x14,x0,88
     a20:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
     a24:	557d                	c.li	x10,-1
     a26:	8082                	c.jr	x1

00000a28 <_open>:
}

int _open(const char *name, int flags, int mode)
{
  return -1;
}
     a28:	557d                	c.li	x10,-1
     a2a:	8082                	c.jr	x1

00000a2c <_openat>:

int _openat(int dirfd, const char *name, int flags, int mode)
     a2c:	05800713          	addi	x14,x0,88
     a30:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
     a34:	557d                	c.li	x10,-1
     a36:	8082                	c.jr	x1

00000a38 <_read>:
}

ssize_t _read(int file, void *ptr, size_t len)
{
  return 0;
}
     a38:	4501                	c.li	x10,0
     a3a:	8082                	c.jr	x1

00000a3c <_stat>:

int _stat(const char *file, struct stat *st)
{
  st->st_mode = S_IFCHR;
     a3c:	6789                	c.lui	x15,0x2
     a3e:	c1dc                	c.sw	x15,4(x11)
  return 0;
  // errno = ENOSYS;
  // return -1;
}
     a40:	4501                	c.li	x10,0
     a42:	8082                	c.jr	x1

00000a44 <_sysconf>:

long _sysconf(int name)
     a44:	557d                	c.li	x10,-1
     a46:	8082                	c.jr	x1

00000a48 <_times>:
}

clock_t _times(struct tms *buf)
{
  return -1;
}
     a48:	557d                	c.li	x10,-1
     a4a:	8082                	c.jr	x1

00000a4c <_unlink>:

int _unlink(const char *name)
{
  errno = ENOENT;
     a4c:	4709                	c.li	x14,2
     a4e:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     a52:	557d                	c.li	x10,-1
     a54:	8082                	c.jr	x1

00000a56 <_utime>:

int _utime(const char *path, const struct utimbuf *times)
     a56:	05800713          	addi	x14,x0,88
     a5a:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
     a5e:	557d                	c.li	x10,-1
     a60:	8082                	c.jr	x1

00000a62 <_wait>:
  return -1;
}

int _wait(int *status)
{
  errno = ECHILD;
     a62:	4729                	c.li	x14,10
     a64:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
}
     a68:	557d                	c.li	x10,-1
     a6a:	8082                	c.jr	x1

00000a6c <_write>:

ssize_t _write(int file, const void *ptr, size_t len)
{
  const char *cptr = (char *)ptr;
  if (file != STDOUT_FILENO)
     a6c:	4685                	c.li	x13,1
    {
      errno = ENOSYS;
      return -1;
    }

  const void *eptr = cptr + len;
     a6e:	00c587b3          	add	x15,x11,x12
  while (cptr != eptr)
    *(volatile int *)STDOUT_REG = *cptr++;
     a72:	10000737          	lui	x14,0x10000
  if (file != STDOUT_FILENO)
     a76:	00d50c63          	beq	x10,x13,a8e <_write+0x22>
      errno = ENOSYS;
     a7a:	05800713          	addi	x14,x0,88
     a7e:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
      return -1;
     a82:	557d                	c.li	x10,-1
     a84:	8082                	c.jr	x1
    *(volatile int *)STDOUT_REG = *cptr++;
     a86:	0005c683          	lbu	x13,0(x11)
     a8a:	0585                	c.addi	x11,1
     a8c:	c314                	c.sw	x13,0(x14)
  while (cptr != eptr)
     a8e:	fef59ce3          	bne	x11,x15,a86 <_write+0x1a>
  return len;
     a92:	8532                	c.mv	x10,x12
}
     a94:	8082                	c.jr	x1

00000a96 <_brk>:
extern char __heap_end[];
static char *brk = __heap_start;

int _brk(void *addr)
{
  brk = addr;
     a96:	6795                	c.lui	x15,0x5
     a98:	94a7ac23          	sw	x10,-1704(x15) # 4958 <brk>
  return 0;
}
     a9c:	4501                	c.li	x10,0
     a9e:	8082                	c.jr	x1

00000aa0 <_sbrk>:

void *_sbrk(ptrdiff_t incr)
{
  char *old_brk = brk;
     aa0:	6715                	c.lui	x14,0x5
{
     aa2:	87aa                	c.mv	x15,x10
  char *old_brk = brk;
     aa4:	95872503          	lw	x10,-1704(x14) # 4958 <brk>
  register long sp asm("sp");

  char *new_brk = brk += incr;
     aa8:	97aa                	c.add	x15,x10
     aaa:	94f72c23          	sw	x15,-1704(x14)
  if (new_brk < (char *) sp && new_brk < __heap_end)
     aae:	0027f863          	bgeu	x15,x2,abe <_sbrk+0x1e>
     ab2:	00400737          	lui	x14,0x400
     ab6:	00070713          	addi	x14,x14,0 # 400000 <__heap_end>
     aba:	00e7e663          	bltu	x15,x14,ac6 <_sbrk+0x26>

      return old_brk;
    }
  else
    {
      errno = ENOMEM;
     abe:	4731                	c.li	x14,12
     ac0:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
      return (void *) -1;
     ac4:	557d                	c.li	x10,-1
    }
}
     ac6:	8082                	c.jr	x1

00000ac8 <handle_syscall>:
    register long syscall_id asm("t0");
  #else
    long syscall_id = a7;
  #endif

  switch (syscall_id) {
     ac8:	08100793          	addi	x15,x0,129
     acc:	0af88d63          	beq	x17,x15,b86 <handle_syscall+0xbe>
     ad0:	0717c763          	blt	x15,x17,b3e <handle_syscall+0x76>
     ad4:	04000793          	addi	x15,x0,64
     ad8:	0517c663          	blt	x15,x17,b24 <handle_syscall+0x5c>
     adc:	02f00793          	addi	x15,x0,47
     ae0:	0317c563          	blt	x15,x17,b0a <handle_syscall+0x42>
     ae4:	47c5                	c.li	x15,17
     ae6:	04f89b63          	bne	x17,x15,b3c <handle_syscall+0x74>
  errno = -ENOSYS;
     aea:	fa800713          	addi	x14,x0,-88
     aee:	a869                	c.j	b88 <handle_syscall+0xc0>
  switch (syscall_id) {
     af0:	c0088893          	addi	x17,x17,-1024
     af4:	47bd                	c.li	x15,15
     af6:	0517e363          	bltu	x15,x17,b3c <handle_syscall+0x74>
     afa:	6791                	c.lui	x15,0x4
     afc:	39478793          	addi	x15,x15,916 # 4394 <no_exception_handler_msg+0x31>
     b00:	088a                	c.slli	x17,0x2
     b02:	98be                	c.add	x17,x15
     b04:	0008a783          	lw	x15,0(x17)
     b08:	8782                	c.jr	x15
     b0a:	fd088893          	addi	x17,x17,-48
     b0e:	47c1                	c.li	x15,16
     b10:	0317e663          	bltu	x15,x17,b3c <handle_syscall+0x74>
     b14:	6791                	c.lui	x15,0x4
     b16:	3d478793          	addi	x15,x15,980 # 43d4 <no_exception_handler_msg+0x71>
     b1a:	088a                	c.slli	x17,0x2
     b1c:	98be                	c.add	x17,x15
     b1e:	0008a783          	lw	x15,0(x17)
     b22:	8782                	c.jr	x15
     b24:	05000793          	addi	x15,x0,80
     b28:	06f88a63          	beq	x17,x15,b9c <handle_syscall+0xd4>
     b2c:	05d00793          	addi	x15,x0,93
     b30:	04f88463          	beq	x17,x15,b78 <handle_syscall+0xb0>
     b34:	04f00793          	addi	x15,x0,79
     b38:	04f88b63          	beq	x17,x15,b8e <handle_syscall+0xc6>
      break;
    case SYS_times:
      _times ((struct tms *) a0);
      break;
    default:
      unimplemented_syscall ();
     b3c:	b501                	c.j	93c <unimplemented_syscall>
  switch (syscall_id) {
     b3e:	40f00793          	addi	x15,x0,1039
     b42:	ff17cde3          	blt	x15,x17,b3c <handle_syscall+0x74>
     b46:	3ff00793          	addi	x15,x0,1023
     b4a:	fb17c3e3          	blt	x15,x17,af0 <handle_syscall+0x28>
     b4e:	0ac00793          	addi	x15,x0,172
     b52:	04f88863          	beq	x17,x15,ba2 <handle_syscall+0xda>
     b56:	0117c963          	blt	x15,x17,b68 <handle_syscall+0xa0>
     b5a:	09900793          	addi	x15,x0,153
     b5e:	04f88263          	beq	x17,x15,ba2 <handle_syscall+0xda>
     b62:	0a900793          	addi	x15,x0,169
     b66:	b741                	c.j	ae6 <handle_syscall+0x1e>
     b68:	0d600793          	addi	x15,x0,214
     b6c:	fcf898e3          	bne	x17,x15,b3c <handle_syscall+0x74>
  brk = addr;
     b70:	6795                	c.lui	x15,0x5
     b72:	94a7ac23          	sw	x10,-1704(x15) # 4958 <brk>
  return 0;
     b76:	8082                	c.jr	x1
  *(volatile int *)EXIT_REG = exit_status;
     b78:	200007b7          	lui	x15,0x20000
     b7c:	c3c8                	c.sw	x10,4(x15)
  asm volatile("wfi");
     b7e:	10500073          	wfi
  while (1) {};
     b82:	a001                	c.j	b82 <handle_syscall+0xba>
      _write (a0, (const void *) a1, a2);
     b84:	b5e5                	c.j	a6c <_write>
  errno = EINVAL;
     b86:	4759                	c.li	x14,22
  errno = ENOSYS;
     b88:	84e1a823          	sw	x14,-1968(x3) # 49a8 <errno>
  return -1;
     b8c:	8082                	c.jr	x1
  errno = ENOSYS;
     b8e:	05800713          	addi	x14,x0,88
     b92:	bfdd                	c.j	b88 <handle_syscall+0xc0>
  errno = EMLINK;
     b94:	477d                	c.li	x14,31
     b96:	bfcd                	c.j	b88 <handle_syscall+0xc0>
  errno = ENOENT;
     b98:	4709                	c.li	x14,2
     b9a:	b7fd                	c.j	b88 <handle_syscall+0xc0>
  st->st_mode = S_IFCHR;
     b9c:	6789                	c.lui	x15,0x2
     b9e:	c1dc                	c.sw	x15,4(x11)
  return 0;
     ba0:	8082                	c.jr	x1
      break;
  }
}
     ba2:	8082                	c.jr	x1

00000ba4 <atexit>:
     ba4:	00050593          	addi	x11,x10,0
     ba8:	00000693          	addi	x13,x0,0
     bac:	00000613          	addi	x12,x0,0
     bb0:	00000513          	addi	x10,x0,0
     bb4:	3950006f          	jal	x0,1748 <__register_exitproc>

00000bb8 <__fp_lock>:
     bb8:	00000513          	addi	x10,x0,0
     bbc:	00008067          	jalr	x0,0(x1)

00000bc0 <stdio_exit_handler>:
     bc0:	00004637          	lui	x12,0x4
     bc4:	000025b7          	lui	x11,0x2
     bc8:	00004537          	lui	x10,0x4
     bcc:	42060613          	addi	x12,x12,1056 # 4420 <__sglue>
     bd0:	52858593          	addi	x11,x11,1320 # 2528 <_fclose_r>
     bd4:	43050513          	addi	x10,x10,1072 # 4430 <_impure_data>
     bd8:	36c0006f          	jal	x0,f44 <_fwalk_sglue>

00000bdc <cleanup_stdio>:
     bdc:	00452583          	lw	x11,4(x10)
     be0:	ff010113          	addi	x2,x2,-16
     be4:	000077b7          	lui	x15,0x7
     be8:	00812423          	sw	x8,8(x2)
     bec:	00112623          	sw	x1,12(x2)
     bf0:	59478793          	addi	x15,x15,1428 # 7594 <__sf>
     bf4:	00050413          	addi	x8,x10,0
     bf8:	00f58463          	beq	x11,x15,c00 <cleanup_stdio+0x24>
     bfc:	12d010ef          	jal	x1,2528 <_fclose_r>
     c00:	00842583          	lw	x11,8(x8)
     c04:	000077b7          	lui	x15,0x7
     c08:	5fc78793          	addi	x15,x15,1532 # 75fc <__sf+0x68>
     c0c:	00f58663          	beq	x11,x15,c18 <cleanup_stdio+0x3c>
     c10:	00040513          	addi	x10,x8,0
     c14:	115010ef          	jal	x1,2528 <_fclose_r>
     c18:	00c42583          	lw	x11,12(x8)
     c1c:	000077b7          	lui	x15,0x7
     c20:	66478793          	addi	x15,x15,1636 # 7664 <__sf+0xd0>
     c24:	00f58c63          	beq	x11,x15,c3c <cleanup_stdio+0x60>
     c28:	00040513          	addi	x10,x8,0
     c2c:	00812403          	lw	x8,8(x2)
     c30:	00c12083          	lw	x1,12(x2)
     c34:	01010113          	addi	x2,x2,16
     c38:	0f10106f          	jal	x0,2528 <_fclose_r>
     c3c:	00c12083          	lw	x1,12(x2)
     c40:	00812403          	lw	x8,8(x2)
     c44:	01010113          	addi	x2,x2,16
     c48:	00008067          	jalr	x0,0(x1)

00000c4c <__fp_unlock>:
     c4c:	00000513          	addi	x10,x0,0
     c50:	00008067          	jalr	x0,0(x1)

00000c54 <global_stdio_init.part.0>:
     c54:	fe010113          	addi	x2,x2,-32
     c58:	000017b7          	lui	x15,0x1
     c5c:	00812c23          	sw	x8,24(x2)
     c60:	bc078793          	addi	x15,x15,-1088 # bc0 <stdio_exit_handler>
     c64:	00007437          	lui	x8,0x7
     c68:	00007537          	lui	x10,0x7
     c6c:	59440413          	addi	x8,x8,1428 # 7594 <__sf>
     c70:	00112e23          	sw	x1,28(x2)
     c74:	00912a23          	sw	x9,20(x2)
     c78:	01212823          	sw	x18,16(x2)
     c7c:	01312623          	sw	x19,12(x2)
     c80:	01412423          	sw	x20,8(x2)
     c84:	84f1a623          	sw	x15,-1972(x3) # 49a4 <__stdio_exit_handler>
     c88:	00800613          	addi	x12,x0,8
     c8c:	00400793          	addi	x15,x0,4
     c90:	00000593          	addi	x11,x0,0
     c94:	5f050513          	addi	x10,x10,1520 # 75f0 <__sf+0x5c>
     c98:	00f42623          	sw	x15,12(x8)
     c9c:	00042023          	sw	x0,0(x8)
     ca0:	00042223          	sw	x0,4(x8)
     ca4:	00042423          	sw	x0,8(x8)
     ca8:	06042223          	sw	x0,100(x8)
     cac:	00042823          	sw	x0,16(x8)
     cb0:	00042a23          	sw	x0,20(x8)
     cb4:	00042c23          	sw	x0,24(x8)
     cb8:	129000ef          	jal	x1,15e0 <memset>
     cbc:	000107b7          	lui	x15,0x10
     cc0:	00001a37          	lui	x20,0x1
     cc4:	000019b7          	lui	x19,0x1
     cc8:	00001937          	lui	x18,0x1
     ccc:	000014b7          	lui	x9,0x1
     cd0:	00007537          	lui	x10,0x7
     cd4:	100a0a13          	addi	x20,x20,256 # 1100 <__sread>
     cd8:	16498993          	addi	x19,x19,356 # 1164 <__swrite>
     cdc:	1ec90913          	addi	x18,x18,492 # 11ec <__sseek>
     ce0:	26448493          	addi	x9,x9,612 # 1264 <__sclose>
     ce4:	00978793          	addi	x15,x15,9 # 10009 <__heap_start+0x8779>
     ce8:	00800613          	addi	x12,x0,8
     cec:	00000593          	addi	x11,x0,0
     cf0:	65850513          	addi	x10,x10,1624 # 7658 <__sf+0xc4>
     cf4:	03442023          	sw	x20,32(x8)
     cf8:	03342223          	sw	x19,36(x8)
     cfc:	03242423          	sw	x18,40(x8)
     d00:	02942623          	sw	x9,44(x8)
     d04:	06f42a23          	sw	x15,116(x8)
     d08:	00842e23          	sw	x8,28(x8)
     d0c:	06042423          	sw	x0,104(x8)
     d10:	06042623          	sw	x0,108(x8)
     d14:	06042823          	sw	x0,112(x8)
     d18:	0c042623          	sw	x0,204(x8)
     d1c:	06042c23          	sw	x0,120(x8)
     d20:	06042e23          	sw	x0,124(x8)
     d24:	08042023          	sw	x0,128(x8)
     d28:	0b9000ef          	jal	x1,15e0 <memset>
     d2c:	000207b7          	lui	x15,0x20
     d30:	00007537          	lui	x10,0x7
     d34:	00007737          	lui	x14,0x7
     d38:	01278793          	addi	x15,x15,18 # 20012 <__heap_start+0x18782>
     d3c:	5fc70713          	addi	x14,x14,1532 # 75fc <__sf+0x68>
     d40:	00800613          	addi	x12,x0,8
     d44:	00000593          	addi	x11,x0,0
     d48:	6c050513          	addi	x10,x10,1728 # 76c0 <__sf+0x12c>
     d4c:	09442423          	sw	x20,136(x8)
     d50:	09342623          	sw	x19,140(x8)
     d54:	09242823          	sw	x18,144(x8)
     d58:	08942a23          	sw	x9,148(x8)
     d5c:	0cf42e23          	sw	x15,220(x8)
     d60:	08e42223          	sw	x14,132(x8)
     d64:	0c042823          	sw	x0,208(x8)
     d68:	0c042a23          	sw	x0,212(x8)
     d6c:	0c042c23          	sw	x0,216(x8)
     d70:	12042a23          	sw	x0,308(x8)
     d74:	0e042023          	sw	x0,224(x8)
     d78:	0e042223          	sw	x0,228(x8)
     d7c:	0e042423          	sw	x0,232(x8)
     d80:	061000ef          	jal	x1,15e0 <memset>
     d84:	000077b7          	lui	x15,0x7
     d88:	66478793          	addi	x15,x15,1636 # 7664 <__sf+0xd0>
     d8c:	0f442823          	sw	x20,240(x8)
     d90:	0f342a23          	sw	x19,244(x8)
     d94:	0f242c23          	sw	x18,248(x8)
     d98:	0e942e23          	sw	x9,252(x8)
     d9c:	01c12083          	lw	x1,28(x2)
     da0:	0ef42623          	sw	x15,236(x8)
     da4:	01812403          	lw	x8,24(x2)
     da8:	01412483          	lw	x9,20(x2)
     dac:	01012903          	lw	x18,16(x2)
     db0:	00c12983          	lw	x19,12(x2)
     db4:	00812a03          	lw	x20,8(x2)
     db8:	02010113          	addi	x2,x2,32
     dbc:	00008067          	jalr	x0,0(x1)

00000dc0 <__sfp>:
     dc0:	84c1a783          	lw	x15,-1972(x3) # 49a4 <__stdio_exit_handler>
     dc4:	fe010113          	addi	x2,x2,-32
     dc8:	01312623          	sw	x19,12(x2)
     dcc:	00112e23          	sw	x1,28(x2)
     dd0:	00812c23          	sw	x8,24(x2)
     dd4:	00912a23          	sw	x9,20(x2)
     dd8:	01212823          	sw	x18,16(x2)
     ddc:	00050993          	addi	x19,x10,0
     de0:	0e078863          	beq	x15,x0,ed0 <__sfp+0x110>
     de4:	00004937          	lui	x18,0x4
     de8:	42090913          	addi	x18,x18,1056 # 4420 <__sglue>
     dec:	fff00493          	addi	x9,x0,-1
     df0:	00492783          	lw	x15,4(x18)
     df4:	00892403          	lw	x8,8(x18)
     df8:	fff78793          	addi	x15,x15,-1
     dfc:	0007d863          	bge	x15,x0,e0c <__sfp+0x4c>
     e00:	0800006f          	jal	x0,e80 <__sfp+0xc0>
     e04:	06840413          	addi	x8,x8,104
     e08:	06978c63          	beq	x15,x9,e80 <__sfp+0xc0>
     e0c:	00c41703          	lh	x14,12(x8)
     e10:	fff78793          	addi	x15,x15,-1
     e14:	fe0718e3          	bne	x14,x0,e04 <__sfp+0x44>
     e18:	ffff07b7          	lui	x15,0xffff0
     e1c:	00178793          	addi	x15,x15,1 # ffff0001 <__heap_end+0xffbf0001>
     e20:	00f42623          	sw	x15,12(x8)
     e24:	06042223          	sw	x0,100(x8)
     e28:	00042023          	sw	x0,0(x8)
     e2c:	00042423          	sw	x0,8(x8)
     e30:	00042223          	sw	x0,4(x8)
     e34:	00042823          	sw	x0,16(x8)
     e38:	00042a23          	sw	x0,20(x8)
     e3c:	00042c23          	sw	x0,24(x8)
     e40:	00800613          	addi	x12,x0,8
     e44:	00000593          	addi	x11,x0,0
     e48:	05c40513          	addi	x10,x8,92
     e4c:	794000ef          	jal	x1,15e0 <memset>
     e50:	02042823          	sw	x0,48(x8)
     e54:	02042a23          	sw	x0,52(x8)
     e58:	04042223          	sw	x0,68(x8)
     e5c:	04042423          	sw	x0,72(x8)
     e60:	01c12083          	lw	x1,28(x2)
     e64:	00040513          	addi	x10,x8,0
     e68:	01812403          	lw	x8,24(x2)
     e6c:	01412483          	lw	x9,20(x2)
     e70:	01012903          	lw	x18,16(x2)
     e74:	00c12983          	lw	x19,12(x2)
     e78:	02010113          	addi	x2,x2,32
     e7c:	00008067          	jalr	x0,0(x1)
     e80:	00092403          	lw	x8,0(x18)
     e84:	00040663          	beq	x8,x0,e90 <__sfp+0xd0>
     e88:	00040913          	addi	x18,x8,0
     e8c:	f65ff06f          	jal	x0,df0 <__sfp+0x30>
     e90:	1ac00593          	addi	x11,x0,428
     e94:	00098513          	addi	x10,x19,0
     e98:	6c5000ef          	jal	x1,1d5c <_malloc_r>
     e9c:	00050413          	addi	x8,x10,0
     ea0:	02050c63          	beq	x10,x0,ed8 <__sfp+0x118>
     ea4:	00c50513          	addi	x10,x10,12
     ea8:	00400793          	addi	x15,x0,4
     eac:	00042023          	sw	x0,0(x8)
     eb0:	00f42223          	sw	x15,4(x8)
     eb4:	00a42423          	sw	x10,8(x8)
     eb8:	1a000613          	addi	x12,x0,416
     ebc:	00000593          	addi	x11,x0,0
     ec0:	720000ef          	jal	x1,15e0 <memset>
     ec4:	00892023          	sw	x8,0(x18)
     ec8:	00040913          	addi	x18,x8,0
     ecc:	f25ff06f          	jal	x0,df0 <__sfp+0x30>
     ed0:	d85ff0ef          	jal	x1,c54 <global_stdio_init.part.0>
     ed4:	f11ff06f          	jal	x0,de4 <__sfp+0x24>
     ed8:	00092023          	sw	x0,0(x18)
     edc:	00c00793          	addi	x15,x0,12
     ee0:	00f9a023          	sw	x15,0(x19)
     ee4:	f7dff06f          	jal	x0,e60 <__sfp+0xa0>

00000ee8 <__sinit>:
     ee8:	03452783          	lw	x15,52(x10)
     eec:	00078463          	beq	x15,x0,ef4 <__sinit+0xc>
     ef0:	00008067          	jalr	x0,0(x1)
     ef4:	84c1a703          	lw	x14,-1972(x3) # 49a4 <__stdio_exit_handler>
     ef8:	000017b7          	lui	x15,0x1
     efc:	bdc78793          	addi	x15,x15,-1060 # bdc <cleanup_stdio>
     f00:	02f52a23          	sw	x15,52(x10)
     f04:	fe0716e3          	bne	x14,x0,ef0 <__sinit+0x8>
     f08:	d4dff06f          	jal	x0,c54 <global_stdio_init.part.0>

00000f0c <__sfp_lock_acquire>:
     f0c:	00008067          	jalr	x0,0(x1)

00000f10 <__sfp_lock_release>:
     f10:	00008067          	jalr	x0,0(x1)

00000f14 <__fp_lock_all>:
     f14:	00004637          	lui	x12,0x4
     f18:	000015b7          	lui	x11,0x1
     f1c:	42060613          	addi	x12,x12,1056 # 4420 <__sglue>
     f20:	bb858593          	addi	x11,x11,-1096 # bb8 <__fp_lock>
     f24:	00000513          	addi	x10,x0,0
     f28:	01c0006f          	jal	x0,f44 <_fwalk_sglue>

00000f2c <__fp_unlock_all>:
     f2c:	00004637          	lui	x12,0x4
     f30:	000015b7          	lui	x11,0x1
     f34:	42060613          	addi	x12,x12,1056 # 4420 <__sglue>
     f38:	c4c58593          	addi	x11,x11,-948 # c4c <__fp_unlock>
     f3c:	00000513          	addi	x10,x0,0
     f40:	0040006f          	jal	x0,f44 <_fwalk_sglue>

00000f44 <_fwalk_sglue>:
     f44:	fd010113          	addi	x2,x2,-48
     f48:	03212023          	sw	x18,32(x2)
     f4c:	01312e23          	sw	x19,28(x2)
     f50:	01412c23          	sw	x20,24(x2)
     f54:	01512a23          	sw	x21,20(x2)
     f58:	01612823          	sw	x22,16(x2)
     f5c:	01712623          	sw	x23,12(x2)
     f60:	02112623          	sw	x1,44(x2)
     f64:	02812423          	sw	x8,40(x2)
     f68:	02912223          	sw	x9,36(x2)
     f6c:	00050b13          	addi	x22,x10,0
     f70:	00058b93          	addi	x23,x11,0
     f74:	00060a93          	addi	x21,x12,0
     f78:	00000a13          	addi	x20,x0,0
     f7c:	00100993          	addi	x19,x0,1
     f80:	fff00913          	addi	x18,x0,-1
     f84:	004aa483          	lw	x9,4(x21)
     f88:	008aa403          	lw	x8,8(x21)
     f8c:	fff48493          	addi	x9,x9,-1
     f90:	0204c863          	blt	x9,x0,fc0 <_fwalk_sglue+0x7c>
     f94:	00c45783          	lhu	x15,12(x8)
     f98:	00f9fe63          	bgeu	x19,x15,fb4 <_fwalk_sglue+0x70>
     f9c:	00e41783          	lh	x15,14(x8)
     fa0:	00040593          	addi	x11,x8,0
     fa4:	000b0513          	addi	x10,x22,0
     fa8:	01278663          	beq	x15,x18,fb4 <_fwalk_sglue+0x70>
     fac:	000b80e7          	jalr	x1,0(x23)
     fb0:	00aa6a33          	or	x20,x20,x10
     fb4:	fff48493          	addi	x9,x9,-1
     fb8:	06840413          	addi	x8,x8,104
     fbc:	fd249ce3          	bne	x9,x18,f94 <_fwalk_sglue+0x50>
     fc0:	000aaa83          	lw	x21,0(x21)
     fc4:	fc0a90e3          	bne	x21,x0,f84 <_fwalk_sglue+0x40>
     fc8:	02c12083          	lw	x1,44(x2)
     fcc:	02812403          	lw	x8,40(x2)
     fd0:	02412483          	lw	x9,36(x2)
     fd4:	02012903          	lw	x18,32(x2)
     fd8:	01c12983          	lw	x19,28(x2)
     fdc:	01412a83          	lw	x21,20(x2)
     fe0:	01012b03          	lw	x22,16(x2)
     fe4:	00c12b83          	lw	x23,12(x2)
     fe8:	000a0513          	addi	x10,x20,0
     fec:	01812a03          	lw	x20,24(x2)
     ff0:	03010113          	addi	x2,x2,48
     ff4:	00008067          	jalr	x0,0(x1)

00000ff8 <_putchar_r>:
     ff8:	00852603          	lw	x12,8(x10)
     ffc:	6890106f          	jal	x0,2e84 <_putc_r>

00001000 <putchar>:
    1000:	000057b7          	lui	x15,0x5
    1004:	95c7a783          	lw	x15,-1700(x15) # 495c <_impure_ptr>
    1008:	00050593          	addi	x11,x10,0
    100c:	0087a603          	lw	x12,8(x15)
    1010:	00078513          	addi	x10,x15,0
    1014:	6710106f          	jal	x0,2e84 <_putc_r>

00001018 <_puts_r>:
    1018:	fc010113          	addi	x2,x2,-64
    101c:	02812c23          	sw	x8,56(x2)
    1020:	00050413          	addi	x8,x10,0
    1024:	00058513          	addi	x10,x11,0
    1028:	02912a23          	sw	x9,52(x2)
    102c:	02112e23          	sw	x1,60(x2)
    1030:	00058493          	addi	x9,x11,0
    1034:	688000ef          	jal	x1,16bc <strlen>
    1038:	000047b7          	lui	x15,0x4
    103c:	29478793          	addi	x15,x15,660 # 4294 <_isatty_r+0x5ac>
    1040:	02f12423          	sw	x15,40(x2)
    1044:	00100793          	addi	x15,x0,1
    1048:	02f12623          	sw	x15,44(x2)
    104c:	03442703          	lw	x14,52(x8)
    1050:	02010793          	addi	x15,x2,32
    1054:	00150693          	addi	x13,x10,1
    1058:	00f12a23          	sw	x15,20(x2)
    105c:	00200793          	addi	x15,x0,2
    1060:	02912023          	sw	x9,32(x2)
    1064:	02a12223          	sw	x10,36(x2)
    1068:	00d12e23          	sw	x13,28(x2)
    106c:	00f12c23          	sw	x15,24(x2)
    1070:	00842583          	lw	x11,8(x8)
    1074:	06070063          	beq	x14,x0,10d4 <_puts_r+0xbc>
    1078:	00c59703          	lh	x14,12(x11)
    107c:	0645a783          	lw	x15,100(x11)
    1080:	01271693          	slli	x13,x14,0x12
    1084:	0206c063          	blt	x13,x0,10a4 <_puts_r+0x8c>
    1088:	ffffe6b7          	lui	x13,0xffffe
    108c:	fff68693          	addi	x13,x13,-1 # ffffdfff <__heap_end+0xffbfdfff>
    1090:	00002637          	lui	x12,0x2
    1094:	00c76733          	or	x14,x14,x12
    1098:	00d7f7b3          	and	x15,x15,x13
    109c:	00e59623          	sh	x14,12(x11)
    10a0:	06f5a223          	sw	x15,100(x11)
    10a4:	01279713          	slli	x14,x15,0x12
    10a8:	04074063          	blt	x14,x0,10e8 <_puts_r+0xd0>
    10ac:	01410613          	addi	x12,x2,20
    10b0:	00040513          	addi	x10,x8,0
    10b4:	0c1010ef          	jal	x1,2974 <__sfvwrite_r>
    10b8:	02051863          	bne	x10,x0,10e8 <_puts_r+0xd0>
    10bc:	00a00513          	addi	x10,x0,10
    10c0:	03c12083          	lw	x1,60(x2)
    10c4:	03812403          	lw	x8,56(x2)
    10c8:	03412483          	lw	x9,52(x2)
    10cc:	04010113          	addi	x2,x2,64
    10d0:	00008067          	jalr	x0,0(x1)
    10d4:	00040513          	addi	x10,x8,0
    10d8:	00b12623          	sw	x11,12(x2)
    10dc:	e0dff0ef          	jal	x1,ee8 <__sinit>
    10e0:	00c12583          	lw	x11,12(x2)
    10e4:	f95ff06f          	jal	x0,1078 <_puts_r+0x60>
    10e8:	fff00513          	addi	x10,x0,-1
    10ec:	fd5ff06f          	jal	x0,10c0 <_puts_r+0xa8>

000010f0 <puts>:
    10f0:	000057b7          	lui	x15,0x5
    10f4:	00050593          	addi	x11,x10,0
    10f8:	95c7a503          	lw	x10,-1700(x15) # 495c <_impure_ptr>
    10fc:	f1dff06f          	jal	x0,1018 <_puts_r>

00001100 <__sread>:
    1100:	ff010113          	addi	x2,x2,-16
    1104:	00812423          	sw	x8,8(x2)
    1108:	00058413          	addi	x8,x11,0
    110c:	00e59583          	lh	x11,14(x11)
    1110:	00112623          	sw	x1,12(x2)
    1114:	304000ef          	jal	x1,1418 <_read_r>
    1118:	02054063          	blt	x10,x0,1138 <__sread+0x38>
    111c:	05042783          	lw	x15,80(x8)
    1120:	00c12083          	lw	x1,12(x2)
    1124:	00a787b3          	add	x15,x15,x10
    1128:	04f42823          	sw	x15,80(x8)
    112c:	00812403          	lw	x8,8(x2)
    1130:	01010113          	addi	x2,x2,16
    1134:	00008067          	jalr	x0,0(x1)
    1138:	00c45783          	lhu	x15,12(x8)
    113c:	fffff737          	lui	x14,0xfffff
    1140:	fff70713          	addi	x14,x14,-1 # ffffefff <__heap_end+0xffbfefff>
    1144:	00e7f7b3          	and	x15,x15,x14
    1148:	00c12083          	lw	x1,12(x2)
    114c:	00f41623          	sh	x15,12(x8)
    1150:	00812403          	lw	x8,8(x2)
    1154:	01010113          	addi	x2,x2,16
    1158:	00008067          	jalr	x0,0(x1)

0000115c <__seofread>:
    115c:	00000513          	addi	x10,x0,0
    1160:	00008067          	jalr	x0,0(x1)

00001164 <__swrite>:
    1164:	00c59783          	lh	x15,12(x11)
    1168:	fe010113          	addi	x2,x2,-32
    116c:	00812c23          	sw	x8,24(x2)
    1170:	00912a23          	sw	x9,20(x2)
    1174:	01212823          	sw	x18,16(x2)
    1178:	01312623          	sw	x19,12(x2)
    117c:	00112e23          	sw	x1,28(x2)
    1180:	1007f713          	andi	x14,x15,256
    1184:	00058413          	addi	x8,x11,0
    1188:	00050493          	addi	x9,x10,0
    118c:	00060913          	addi	x18,x12,0 # 2000 <_malloc_r+0x2a4>
    1190:	00068993          	addi	x19,x13,0
    1194:	04071063          	bne	x14,x0,11d4 <__swrite+0x70>
    1198:	fffff737          	lui	x14,0xfffff
    119c:	fff70713          	addi	x14,x14,-1 # ffffefff <__heap_end+0xffbfefff>
    11a0:	00e7f7b3          	and	x15,x15,x14
    11a4:	00e41583          	lh	x11,14(x8)
    11a8:	00f41623          	sh	x15,12(x8)
    11ac:	01812403          	lw	x8,24(x2)
    11b0:	01c12083          	lw	x1,28(x2)
    11b4:	00098693          	addi	x13,x19,0
    11b8:	00090613          	addi	x12,x18,0
    11bc:	00c12983          	lw	x19,12(x2)
    11c0:	01012903          	lw	x18,16(x2)
    11c4:	00048513          	addi	x10,x9,0
    11c8:	01412483          	lw	x9,20(x2)
    11cc:	02010113          	addi	x2,x2,32
    11d0:	2b00006f          	jal	x0,1480 <_write_r>
    11d4:	00e59583          	lh	x11,14(x11)
    11d8:	00200693          	addi	x13,x0,2
    11dc:	00000613          	addi	x12,x0,0
    11e0:	1d0000ef          	jal	x1,13b0 <_lseek_r>
    11e4:	00c41783          	lh	x15,12(x8)
    11e8:	fb1ff06f          	jal	x0,1198 <__swrite+0x34>

000011ec <__sseek>:
    11ec:	ff010113          	addi	x2,x2,-16
    11f0:	00812423          	sw	x8,8(x2)
    11f4:	00058413          	addi	x8,x11,0
    11f8:	00e59583          	lh	x11,14(x11)
    11fc:	00112623          	sw	x1,12(x2)
    1200:	1b0000ef          	jal	x1,13b0 <_lseek_r>
    1204:	fff00793          	addi	x15,x0,-1
    1208:	02f50863          	beq	x10,x15,1238 <__sseek+0x4c>
    120c:	00c45783          	lhu	x15,12(x8)
    1210:	00001737          	lui	x14,0x1
    1214:	00c12083          	lw	x1,12(x2)
    1218:	00e7e7b3          	or	x15,x15,x14
    121c:	01079793          	slli	x15,x15,0x10
    1220:	4107d793          	srai	x15,x15,0x10
    1224:	04a42823          	sw	x10,80(x8)
    1228:	00f41623          	sh	x15,12(x8)
    122c:	00812403          	lw	x8,8(x2)
    1230:	01010113          	addi	x2,x2,16
    1234:	00008067          	jalr	x0,0(x1)
    1238:	00c45783          	lhu	x15,12(x8)
    123c:	fffff737          	lui	x14,0xfffff
    1240:	fff70713          	addi	x14,x14,-1 # ffffefff <__heap_end+0xffbfefff>
    1244:	00e7f7b3          	and	x15,x15,x14
    1248:	01079793          	slli	x15,x15,0x10
    124c:	4107d793          	srai	x15,x15,0x10
    1250:	00c12083          	lw	x1,12(x2)
    1254:	00f41623          	sh	x15,12(x8)
    1258:	00812403          	lw	x8,8(x2)
    125c:	01010113          	addi	x2,x2,16
    1260:	00008067          	jalr	x0,0(x1)

00001264 <__sclose>:
    1264:	00e59583          	lh	x11,14(x11)
    1268:	0040006f          	jal	x0,126c <_close_r>

0000126c <_close_r>:
    126c:	ff010113          	addi	x2,x2,-16
    1270:	00812423          	sw	x8,8(x2)
    1274:	00912223          	sw	x9,4(x2)
    1278:	00050413          	addi	x8,x10,0
    127c:	00058513          	addi	x10,x11,0
    1280:	00112623          	sw	x1,12(x2)
    1284:	8401a823          	sw	x0,-1968(x3) # 49a8 <errno>
    1288:	f08ff0ef          	jal	x1,990 <_close>
    128c:	fff00793          	addi	x15,x0,-1
    1290:	00f50c63          	beq	x10,x15,12a8 <_close_r+0x3c>
    1294:	00c12083          	lw	x1,12(x2)
    1298:	00812403          	lw	x8,8(x2)
    129c:	00412483          	lw	x9,4(x2)
    12a0:	01010113          	addi	x2,x2,16
    12a4:	00008067          	jalr	x0,0(x1)
    12a8:	8501a783          	lw	x15,-1968(x3) # 49a8 <errno>
    12ac:	fe0784e3          	beq	x15,x0,1294 <_close_r+0x28>
    12b0:	00c12083          	lw	x1,12(x2)
    12b4:	00f42023          	sw	x15,0(x8)
    12b8:	00812403          	lw	x8,8(x2)
    12bc:	00412483          	lw	x9,4(x2)
    12c0:	01010113          	addi	x2,x2,16
    12c4:	00008067          	jalr	x0,0(x1)

000012c8 <_reclaim_reent>:
    12c8:	000057b7          	lui	x15,0x5
    12cc:	95c7a783          	lw	x15,-1700(x15) # 495c <_impure_ptr>
    12d0:	0ca78e63          	beq	x15,x10,13ac <_reclaim_reent+0xe4>
    12d4:	04452583          	lw	x11,68(x10)
    12d8:	fe010113          	addi	x2,x2,-32
    12dc:	00912a23          	sw	x9,20(x2)
    12e0:	00112e23          	sw	x1,28(x2)
    12e4:	00812c23          	sw	x8,24(x2)
    12e8:	00050493          	addi	x9,x10,0
    12ec:	04058863          	beq	x11,x0,133c <_reclaim_reent+0x74>
    12f0:	01212823          	sw	x18,16(x2)
    12f4:	01312623          	sw	x19,12(x2)
    12f8:	00000913          	addi	x18,x0,0
    12fc:	08000993          	addi	x19,x0,128
    1300:	012587b3          	add	x15,x11,x18
    1304:	0007a403          	lw	x8,0(x15)
    1308:	00040e63          	beq	x8,x0,1324 <_reclaim_reent+0x5c>
    130c:	00040593          	addi	x11,x8,0
    1310:	00042403          	lw	x8,0(x8)
    1314:	00048513          	addi	x10,x9,0
    1318:	740000ef          	jal	x1,1a58 <_free_r>
    131c:	fe0418e3          	bne	x8,x0,130c <_reclaim_reent+0x44>
    1320:	0444a583          	lw	x11,68(x9)
    1324:	00490913          	addi	x18,x18,4
    1328:	fd391ce3          	bne	x18,x19,1300 <_reclaim_reent+0x38>
    132c:	00048513          	addi	x10,x9,0
    1330:	728000ef          	jal	x1,1a58 <_free_r>
    1334:	01012903          	lw	x18,16(x2)
    1338:	00c12983          	lw	x19,12(x2)
    133c:	0384a583          	lw	x11,56(x9)
    1340:	00058663          	beq	x11,x0,134c <_reclaim_reent+0x84>
    1344:	00048513          	addi	x10,x9,0
    1348:	710000ef          	jal	x1,1a58 <_free_r>
    134c:	0404a403          	lw	x8,64(x9)
    1350:	00040c63          	beq	x8,x0,1368 <_reclaim_reent+0xa0>
    1354:	00040593          	addi	x11,x8,0
    1358:	00042403          	lw	x8,0(x8)
    135c:	00048513          	addi	x10,x9,0
    1360:	6f8000ef          	jal	x1,1a58 <_free_r>
    1364:	fe0418e3          	bne	x8,x0,1354 <_reclaim_reent+0x8c>
    1368:	04c4a583          	lw	x11,76(x9)
    136c:	00058663          	beq	x11,x0,1378 <_reclaim_reent+0xb0>
    1370:	00048513          	addi	x10,x9,0
    1374:	6e4000ef          	jal	x1,1a58 <_free_r>
    1378:	0344a783          	lw	x15,52(x9)
    137c:	00078e63          	beq	x15,x0,1398 <_reclaim_reent+0xd0>
    1380:	01812403          	lw	x8,24(x2)
    1384:	01c12083          	lw	x1,28(x2)
    1388:	00048513          	addi	x10,x9,0
    138c:	01412483          	lw	x9,20(x2)
    1390:	02010113          	addi	x2,x2,32
    1394:	00078067          	jalr	x0,0(x15)
    1398:	01c12083          	lw	x1,28(x2)
    139c:	01812403          	lw	x8,24(x2)
    13a0:	01412483          	lw	x9,20(x2)
    13a4:	02010113          	addi	x2,x2,32
    13a8:	00008067          	jalr	x0,0(x1)
    13ac:	00008067          	jalr	x0,0(x1)

000013b0 <_lseek_r>:
    13b0:	ff010113          	addi	x2,x2,-16
    13b4:	00058713          	addi	x14,x11,0
    13b8:	00812423          	sw	x8,8(x2)
    13bc:	00912223          	sw	x9,4(x2)
    13c0:	00060593          	addi	x11,x12,0
    13c4:	00050413          	addi	x8,x10,0
    13c8:	00068613          	addi	x12,x13,0
    13cc:	00070513          	addi	x10,x14,0
    13d0:	00112623          	sw	x1,12(x2)
    13d4:	8401a823          	sw	x0,-1968(x3) # 49a8 <errno>
    13d8:	e40ff0ef          	jal	x1,a18 <_lseek>
    13dc:	fff00793          	addi	x15,x0,-1
    13e0:	00f50c63          	beq	x10,x15,13f8 <_lseek_r+0x48>
    13e4:	00c12083          	lw	x1,12(x2)
    13e8:	00812403          	lw	x8,8(x2)
    13ec:	00412483          	lw	x9,4(x2)
    13f0:	01010113          	addi	x2,x2,16
    13f4:	00008067          	jalr	x0,0(x1)
    13f8:	8501a783          	lw	x15,-1968(x3) # 49a8 <errno>
    13fc:	fe0784e3          	beq	x15,x0,13e4 <_lseek_r+0x34>
    1400:	00c12083          	lw	x1,12(x2)
    1404:	00f42023          	sw	x15,0(x8)
    1408:	00812403          	lw	x8,8(x2)
    140c:	00412483          	lw	x9,4(x2)
    1410:	01010113          	addi	x2,x2,16
    1414:	00008067          	jalr	x0,0(x1)

00001418 <_read_r>:
    1418:	ff010113          	addi	x2,x2,-16
    141c:	00058713          	addi	x14,x11,0
    1420:	00812423          	sw	x8,8(x2)
    1424:	00912223          	sw	x9,4(x2)
    1428:	00060593          	addi	x11,x12,0
    142c:	00050413          	addi	x8,x10,0
    1430:	00068613          	addi	x12,x13,0
    1434:	00070513          	addi	x10,x14,0
    1438:	00112623          	sw	x1,12(x2)
    143c:	8401a823          	sw	x0,-1968(x3) # 49a8 <errno>
    1440:	df8ff0ef          	jal	x1,a38 <_read>
    1444:	fff00793          	addi	x15,x0,-1
    1448:	00f50c63          	beq	x10,x15,1460 <_read_r+0x48>
    144c:	00c12083          	lw	x1,12(x2)
    1450:	00812403          	lw	x8,8(x2)
    1454:	00412483          	lw	x9,4(x2)
    1458:	01010113          	addi	x2,x2,16
    145c:	00008067          	jalr	x0,0(x1)
    1460:	8501a783          	lw	x15,-1968(x3) # 49a8 <errno>
    1464:	fe0784e3          	beq	x15,x0,144c <_read_r+0x34>
    1468:	00c12083          	lw	x1,12(x2)
    146c:	00f42023          	sw	x15,0(x8)
    1470:	00812403          	lw	x8,8(x2)
    1474:	00412483          	lw	x9,4(x2)
    1478:	01010113          	addi	x2,x2,16
    147c:	00008067          	jalr	x0,0(x1)

00001480 <_write_r>:
    1480:	ff010113          	addi	x2,x2,-16
    1484:	00058713          	addi	x14,x11,0
    1488:	00812423          	sw	x8,8(x2)
    148c:	00912223          	sw	x9,4(x2)
    1490:	00060593          	addi	x11,x12,0
    1494:	00050413          	addi	x8,x10,0
    1498:	00068613          	addi	x12,x13,0
    149c:	00070513          	addi	x10,x14,0
    14a0:	00112623          	sw	x1,12(x2)
    14a4:	8401a823          	sw	x0,-1968(x3) # 49a8 <errno>
    14a8:	dc4ff0ef          	jal	x1,a6c <_write>
    14ac:	fff00793          	addi	x15,x0,-1
    14b0:	00f50c63          	beq	x10,x15,14c8 <_write_r+0x48>
    14b4:	00c12083          	lw	x1,12(x2)
    14b8:	00812403          	lw	x8,8(x2)
    14bc:	00412483          	lw	x9,4(x2)
    14c0:	01010113          	addi	x2,x2,16
    14c4:	00008067          	jalr	x0,0(x1)
    14c8:	8501a783          	lw	x15,-1968(x3) # 49a8 <errno>
    14cc:	fe0784e3          	beq	x15,x0,14b4 <_write_r+0x34>
    14d0:	00c12083          	lw	x1,12(x2)
    14d4:	00f42023          	sw	x15,0(x8)
    14d8:	00812403          	lw	x8,8(x2)
    14dc:	00412483          	lw	x9,4(x2)
    14e0:	01010113          	addi	x2,x2,16
    14e4:	00008067          	jalr	x0,0(x1)

000014e8 <__libc_init_array>:
    14e8:	ff010113          	addi	x2,x2,-16
    14ec:	00812423          	sw	x8,8(x2)
    14f0:	000047b7          	lui	x15,0x4
    14f4:	00004437          	lui	x8,0x4
    14f8:	01212023          	sw	x18,0(x2)
    14fc:	41878793          	addi	x15,x15,1048 # 4418 <__init_array_start>
    1500:	41840713          	addi	x14,x8,1048 # 4418 <__init_array_start>
    1504:	00112623          	sw	x1,12(x2)
    1508:	00912223          	sw	x9,4(x2)
    150c:	40e78933          	sub	x18,x15,x14
    1510:	02e78263          	beq	x15,x14,1534 <__libc_init_array+0x4c>
    1514:	40295913          	srai	x18,x18,0x2
    1518:	41840413          	addi	x8,x8,1048
    151c:	00000493          	addi	x9,x0,0
    1520:	00042783          	lw	x15,0(x8)
    1524:	00148493          	addi	x9,x9,1
    1528:	00440413          	addi	x8,x8,4
    152c:	000780e7          	jalr	x1,0(x15)
    1530:	ff24e8e3          	bltu	x9,x18,1520 <__libc_init_array+0x38>
    1534:	00004437          	lui	x8,0x4
    1538:	000047b7          	lui	x15,0x4
    153c:	41c78793          	addi	x15,x15,1052 # 441c <__fini_array_end>
    1540:	41840713          	addi	x14,x8,1048 # 4418 <__init_array_start>
    1544:	40e78933          	sub	x18,x15,x14
    1548:	40295913          	srai	x18,x18,0x2
    154c:	02e78063          	beq	x15,x14,156c <__libc_init_array+0x84>
    1550:	41840413          	addi	x8,x8,1048
    1554:	00000493          	addi	x9,x0,0
    1558:	00042783          	lw	x15,0(x8)
    155c:	00148493          	addi	x9,x9,1
    1560:	00440413          	addi	x8,x8,4
    1564:	000780e7          	jalr	x1,0(x15)
    1568:	ff24e8e3          	bltu	x9,x18,1558 <__libc_init_array+0x70>
    156c:	00c12083          	lw	x1,12(x2)
    1570:	00812403          	lw	x8,8(x2)
    1574:	00412483          	lw	x9,4(x2)
    1578:	00012903          	lw	x18,0(x2)
    157c:	01010113          	addi	x2,x2,16
    1580:	00008067          	jalr	x0,0(x1)

00001584 <__libc_fini_array>:
    1584:	ff010113          	addi	x2,x2,-16
    1588:	00812423          	sw	x8,8(x2)
    158c:	000047b7          	lui	x15,0x4
    1590:	00004437          	lui	x8,0x4
    1594:	41c78793          	addi	x15,x15,1052 # 441c <__fini_array_end>
    1598:	41c40413          	addi	x8,x8,1052 # 441c <__fini_array_end>
    159c:	40f40433          	sub	x8,x8,x15
    15a0:	00912223          	sw	x9,4(x2)
    15a4:	00112623          	sw	x1,12(x2)
    15a8:	40245493          	srai	x9,x8,0x2
    15ac:	02048063          	beq	x9,x0,15cc <__libc_fini_array+0x48>
    15b0:	ffc40413          	addi	x8,x8,-4
    15b4:	00f40433          	add	x8,x8,x15
    15b8:	00042783          	lw	x15,0(x8)
    15bc:	fff48493          	addi	x9,x9,-1
    15c0:	ffc40413          	addi	x8,x8,-4
    15c4:	000780e7          	jalr	x1,0(x15)
    15c8:	fe0498e3          	bne	x9,x0,15b8 <__libc_fini_array+0x34>
    15cc:	00c12083          	lw	x1,12(x2)
    15d0:	00812403          	lw	x8,8(x2)
    15d4:	00412483          	lw	x9,4(x2)
    15d8:	01010113          	addi	x2,x2,16
    15dc:	00008067          	jalr	x0,0(x1)

000015e0 <memset>:
    15e0:	00f00313          	addi	x6,x0,15
    15e4:	00050713          	addi	x14,x10,0
    15e8:	02c37e63          	bgeu	x6,x12,1624 <memset+0x44>
    15ec:	00f77793          	andi	x15,x14,15
    15f0:	0a079063          	bne	x15,x0,1690 <memset+0xb0>
    15f4:	08059263          	bne	x11,x0,1678 <memset+0x98>
    15f8:	ff067693          	andi	x13,x12,-16
    15fc:	00f67613          	andi	x12,x12,15
    1600:	00e686b3          	add	x13,x13,x14
    1604:	00b72023          	sw	x11,0(x14)
    1608:	00b72223          	sw	x11,4(x14)
    160c:	00b72423          	sw	x11,8(x14)
    1610:	00b72623          	sw	x11,12(x14)
    1614:	01070713          	addi	x14,x14,16
    1618:	fed766e3          	bltu	x14,x13,1604 <memset+0x24>
    161c:	00061463          	bne	x12,x0,1624 <memset+0x44>
    1620:	00008067          	jalr	x0,0(x1)
    1624:	40c306b3          	sub	x13,x6,x12
    1628:	00269693          	slli	x13,x13,0x2
    162c:	00000297          	auipc	x5,0x0
    1630:	005686b3          	add	x13,x13,x5
    1634:	00c68067          	jalr	x0,12(x13)
    1638:	00b70723          	sb	x11,14(x14)
    163c:	00b706a3          	sb	x11,13(x14)
    1640:	00b70623          	sb	x11,12(x14)
    1644:	00b705a3          	sb	x11,11(x14)
    1648:	00b70523          	sb	x11,10(x14)
    164c:	00b704a3          	sb	x11,9(x14)
    1650:	00b70423          	sb	x11,8(x14)
    1654:	00b703a3          	sb	x11,7(x14)
    1658:	00b70323          	sb	x11,6(x14)
    165c:	00b702a3          	sb	x11,5(x14)
    1660:	00b70223          	sb	x11,4(x14)
    1664:	00b701a3          	sb	x11,3(x14)
    1668:	00b70123          	sb	x11,2(x14)
    166c:	00b700a3          	sb	x11,1(x14)
    1670:	00b70023          	sb	x11,0(x14)
    1674:	00008067          	jalr	x0,0(x1)
    1678:	0ff5f593          	andi	x11,x11,255
    167c:	00859693          	slli	x13,x11,0x8
    1680:	00d5e5b3          	or	x11,x11,x13
    1684:	01059693          	slli	x13,x11,0x10
    1688:	00d5e5b3          	or	x11,x11,x13
    168c:	f6dff06f          	jal	x0,15f8 <memset+0x18>
    1690:	00279693          	slli	x13,x15,0x2
    1694:	00000297          	auipc	x5,0x0
    1698:	005686b3          	add	x13,x13,x5
    169c:	00008293          	addi	x5,x1,0
    16a0:	fa0680e7          	jalr	x1,-96(x13)
    16a4:	00028093          	addi	x1,x5,0 # 1694 <memset+0xb4>
    16a8:	ff078793          	addi	x15,x15,-16
    16ac:	40f70733          	sub	x14,x14,x15
    16b0:	00f60633          	add	x12,x12,x15
    16b4:	f6c378e3          	bgeu	x6,x12,1624 <memset+0x44>
    16b8:	f3dff06f          	jal	x0,15f4 <memset+0x14>

000016bc <strlen>:
    16bc:	00357793          	andi	x15,x10,3
    16c0:	00050713          	addi	x14,x10,0
    16c4:	04079c63          	bne	x15,x0,171c <strlen+0x60>
    16c8:	7f7f86b7          	lui	x13,0x7f7f8
    16cc:	f7f68693          	addi	x13,x13,-129 # 7f7f7f7f <__heap_end+0x7f3f7f7f>
    16d0:	fff00593          	addi	x11,x0,-1
    16d4:	00072603          	lw	x12,0(x14)
    16d8:	00470713          	addi	x14,x14,4
    16dc:	00d677b3          	and	x15,x12,x13
    16e0:	00d787b3          	add	x15,x15,x13
    16e4:	00c7e7b3          	or	x15,x15,x12
    16e8:	00d7e7b3          	or	x15,x15,x13
    16ec:	feb784e3          	beq	x15,x11,16d4 <strlen+0x18>
    16f0:	ffc74683          	lbu	x13,-4(x14)
    16f4:	40a707b3          	sub	x15,x14,x10
    16f8:	04068463          	beq	x13,x0,1740 <strlen+0x84>
    16fc:	ffd74683          	lbu	x13,-3(x14)
    1700:	02068c63          	beq	x13,x0,1738 <strlen+0x7c>
    1704:	ffe74503          	lbu	x10,-2(x14)
    1708:	00a03533          	sltu	x10,x0,x10
    170c:	00f50533          	add	x10,x10,x15
    1710:	ffe50513          	addi	x10,x10,-2
    1714:	00008067          	jalr	x0,0(x1)
    1718:	fa0688e3          	beq	x13,x0,16c8 <strlen+0xc>
    171c:	00074783          	lbu	x15,0(x14)
    1720:	00170713          	addi	x14,x14,1
    1724:	00377693          	andi	x13,x14,3
    1728:	fe0798e3          	bne	x15,x0,1718 <strlen+0x5c>
    172c:	40a70733          	sub	x14,x14,x10
    1730:	fff70513          	addi	x10,x14,-1
    1734:	00008067          	jalr	x0,0(x1)
    1738:	ffd78513          	addi	x10,x15,-3
    173c:	00008067          	jalr	x0,0(x1)
    1740:	ffc78513          	addi	x10,x15,-4
    1744:	00008067          	jalr	x0,0(x1)

00001748 <__register_exitproc>:
    1748:	8541a783          	lw	x15,-1964(x3) # 49ac <__atexit>
    174c:	04078c63          	beq	x15,x0,17a4 <__register_exitproc+0x5c>
    1750:	0047a703          	lw	x14,4(x15)
    1754:	01f00813          	addi	x16,x0,31
    1758:	08e84263          	blt	x16,x14,17dc <__register_exitproc+0x94>
    175c:	00271813          	slli	x16,x14,0x2
    1760:	02050663          	beq	x10,x0,178c <__register_exitproc+0x44>
    1764:	01078333          	add	x6,x15,x16
    1768:	08c32423          	sw	x12,136(x6)
    176c:	1887a883          	lw	x17,392(x15)
    1770:	00100613          	addi	x12,x0,1
    1774:	00e61633          	sll	x12,x12,x14
    1778:	00c8e8b3          	or	x17,x17,x12
    177c:	1917a423          	sw	x17,392(x15)
    1780:	10d32423          	sw	x13,264(x6)
    1784:	00200693          	addi	x13,x0,2
    1788:	02d50863          	beq	x10,x13,17b8 <__register_exitproc+0x70>
    178c:	00170713          	addi	x14,x14,1
    1790:	00e7a223          	sw	x14,4(x15)
    1794:	010787b3          	add	x15,x15,x16
    1798:	00b7a423          	sw	x11,8(x15)
    179c:	00000513          	addi	x10,x0,0
    17a0:	00008067          	jalr	x0,0(x1)
    17a4:	000077b7          	lui	x15,0x7
    17a8:	6cc78813          	addi	x16,x15,1740 # 76cc <__atexit0>
    17ac:	8501aa23          	sw	x16,-1964(x3) # 49ac <__atexit>
    17b0:	6cc78793          	addi	x15,x15,1740
    17b4:	f9dff06f          	jal	x0,1750 <__register_exitproc+0x8>
    17b8:	18c7a683          	lw	x13,396(x15)
    17bc:	00170713          	addi	x14,x14,1
    17c0:	00e7a223          	sw	x14,4(x15)
    17c4:	00c6e6b3          	or	x13,x13,x12
    17c8:	18d7a623          	sw	x13,396(x15)
    17cc:	010787b3          	add	x15,x15,x16
    17d0:	00b7a423          	sw	x11,8(x15)
    17d4:	00000513          	addi	x10,x0,0
    17d8:	00008067          	jalr	x0,0(x1)
    17dc:	fff00513          	addi	x10,x0,-1
    17e0:	00008067          	jalr	x0,0(x1)

000017e4 <__call_exitprocs>:
    17e4:	fd010113          	addi	x2,x2,-48
    17e8:	01412c23          	sw	x20,24(x2)
    17ec:	03212023          	sw	x18,32(x2)
    17f0:	8541a903          	lw	x18,-1964(x3) # 49ac <__atexit>
    17f4:	02112623          	sw	x1,44(x2)
    17f8:	0a090863          	beq	x18,x0,18a8 <__call_exitprocs+0xc4>
    17fc:	01312e23          	sw	x19,28(x2)
    1800:	01512a23          	sw	x21,20(x2)
    1804:	01612823          	sw	x22,16(x2)
    1808:	01712623          	sw	x23,12(x2)
    180c:	02812423          	sw	x8,40(x2)
    1810:	02912223          	sw	x9,36(x2)
    1814:	01812423          	sw	x24,8(x2)
    1818:	00050b13          	addi	x22,x10,0
    181c:	00058b93          	addi	x23,x11,0
    1820:	fff00993          	addi	x19,x0,-1
    1824:	00100a93          	addi	x21,x0,1
    1828:	00492483          	lw	x9,4(x18)
    182c:	fff48413          	addi	x8,x9,-1
    1830:	04044e63          	blt	x8,x0,188c <__call_exitprocs+0xa8>
    1834:	00249493          	slli	x9,x9,0x2
    1838:	009904b3          	add	x9,x18,x9
    183c:	080b9063          	bne	x23,x0,18bc <__call_exitprocs+0xd8>
    1840:	00492783          	lw	x15,4(x18)
    1844:	0044a683          	lw	x13,4(x9)
    1848:	fff78793          	addi	x15,x15,-1
    184c:	0a878c63          	beq	x15,x8,1904 <__call_exitprocs+0x120>
    1850:	0004a223          	sw	x0,4(x9)
    1854:	02068663          	beq	x13,x0,1880 <__call_exitprocs+0x9c>
    1858:	18892783          	lw	x15,392(x18)
    185c:	008a9733          	sll	x14,x21,x8
    1860:	00492c03          	lw	x24,4(x18)
    1864:	00f777b3          	and	x15,x14,x15
    1868:	06079663          	bne	x15,x0,18d4 <__call_exitprocs+0xf0>
    186c:	000680e7          	jalr	x1,0(x13)
    1870:	00492703          	lw	x14,4(x18)
    1874:	8541a783          	lw	x15,-1964(x3) # 49ac <__atexit>
    1878:	09871063          	bne	x14,x24,18f8 <__call_exitprocs+0x114>
    187c:	07279e63          	bne	x15,x18,18f8 <__call_exitprocs+0x114>
    1880:	fff40413          	addi	x8,x8,-1
    1884:	ffc48493          	addi	x9,x9,-4
    1888:	fb341ae3          	bne	x8,x19,183c <__call_exitprocs+0x58>
    188c:	02812403          	lw	x8,40(x2)
    1890:	02412483          	lw	x9,36(x2)
    1894:	01c12983          	lw	x19,28(x2)
    1898:	01412a83          	lw	x21,20(x2)
    189c:	01012b03          	lw	x22,16(x2)
    18a0:	00c12b83          	lw	x23,12(x2)
    18a4:	00812c03          	lw	x24,8(x2)
    18a8:	02c12083          	lw	x1,44(x2)
    18ac:	02012903          	lw	x18,32(x2)
    18b0:	01812a03          	lw	x20,24(x2)
    18b4:	03010113          	addi	x2,x2,48
    18b8:	00008067          	jalr	x0,0(x1)
    18bc:	1044a783          	lw	x15,260(x9)
    18c0:	f97780e3          	beq	x15,x23,1840 <__call_exitprocs+0x5c>
    18c4:	fff40413          	addi	x8,x8,-1
    18c8:	ffc48493          	addi	x9,x9,-4
    18cc:	ff3418e3          	bne	x8,x19,18bc <__call_exitprocs+0xd8>
    18d0:	fbdff06f          	jal	x0,188c <__call_exitprocs+0xa8>
    18d4:	18c92783          	lw	x15,396(x18)
    18d8:	0844a583          	lw	x11,132(x9)
    18dc:	00f77733          	and	x14,x14,x15
    18e0:	02071663          	bne	x14,x0,190c <__call_exitprocs+0x128>
    18e4:	000b0513          	addi	x10,x22,0
    18e8:	000680e7          	jalr	x1,0(x13)
    18ec:	00492703          	lw	x14,4(x18)
    18f0:	8541a783          	lw	x15,-1964(x3) # 49ac <__atexit>
    18f4:	f98704e3          	beq	x14,x24,187c <__call_exitprocs+0x98>
    18f8:	f8078ae3          	beq	x15,x0,188c <__call_exitprocs+0xa8>
    18fc:	00078913          	addi	x18,x15,0
    1900:	f29ff06f          	jal	x0,1828 <__call_exitprocs+0x44>
    1904:	00892223          	sw	x8,4(x18)
    1908:	f4dff06f          	jal	x0,1854 <__call_exitprocs+0x70>
    190c:	00058513          	addi	x10,x11,0
    1910:	000680e7          	jalr	x1,0(x13)
    1914:	f5dff06f          	jal	x0,1870 <__call_exitprocs+0x8c>

00001918 <_malloc_trim_r>:
    1918:	fe010113          	addi	x2,x2,-32
    191c:	01312623          	sw	x19,12(x2)
    1920:	000049b7          	lui	x19,0x4
    1924:	00812c23          	sw	x8,24(x2)
    1928:	00912a23          	sw	x9,20(x2)
    192c:	01212823          	sw	x18,16(x2)
    1930:	01412423          	sw	x20,8(x2)
    1934:	00112e23          	sw	x1,28(x2)
    1938:	00058a13          	addi	x20,x11,0
    193c:	00050913          	addi	x18,x10,0
    1940:	55098993          	addi	x19,x19,1360 # 4550 <__malloc_av_>
    1944:	3dd000ef          	jal	x1,2520 <__malloc_lock>
    1948:	0089a703          	lw	x14,8(x19)
    194c:	000017b7          	lui	x15,0x1
    1950:	fef78793          	addi	x15,x15,-17 # fef <_fwalk_sglue+0xab>
    1954:	00472483          	lw	x9,4(x14)
    1958:	00001737          	lui	x14,0x1
    195c:	ffc4f493          	andi	x9,x9,-4
    1960:	00f48433          	add	x8,x9,x15
    1964:	41440433          	sub	x8,x8,x20
    1968:	00c45413          	srli	x8,x8,0xc
    196c:	fff40413          	addi	x8,x8,-1
    1970:	00c41413          	slli	x8,x8,0xc
    1974:	00e44e63          	blt	x8,x14,1990 <_malloc_trim_r+0x78>
    1978:	00000593          	addi	x11,x0,0
    197c:	00090513          	addi	x10,x18,0
    1980:	1bd010ef          	jal	x1,333c <_sbrk_r>
    1984:	0089a783          	lw	x15,8(x19)
    1988:	009787b3          	add	x15,x15,x9
    198c:	02f50863          	beq	x10,x15,19bc <_malloc_trim_r+0xa4>
    1990:	00090513          	addi	x10,x18,0
    1994:	391000ef          	jal	x1,2524 <__malloc_unlock>
    1998:	01c12083          	lw	x1,28(x2)
    199c:	01812403          	lw	x8,24(x2)
    19a0:	01412483          	lw	x9,20(x2)
    19a4:	01012903          	lw	x18,16(x2)
    19a8:	00c12983          	lw	x19,12(x2)
    19ac:	00812a03          	lw	x20,8(x2)
    19b0:	00000513          	addi	x10,x0,0
    19b4:	02010113          	addi	x2,x2,32
    19b8:	00008067          	jalr	x0,0(x1)
    19bc:	408005b3          	sub	x11,x0,x8
    19c0:	00090513          	addi	x10,x18,0
    19c4:	179010ef          	jal	x1,333c <_sbrk_r>
    19c8:	fff00793          	addi	x15,x0,-1
    19cc:	04f50a63          	beq	x10,x15,1a20 <_malloc_trim_r+0x108>
    19d0:	000087b7          	lui	x15,0x8
    19d4:	85c78793          	addi	x15,x15,-1956 # 785c <__malloc_current_mallinfo>
    19d8:	0007a703          	lw	x14,0(x15)
    19dc:	0089a683          	lw	x13,8(x19)
    19e0:	408484b3          	sub	x9,x9,x8
    19e4:	0014e493          	ori	x9,x9,1
    19e8:	40870733          	sub	x14,x14,x8
    19ec:	00090513          	addi	x10,x18,0
    19f0:	0096a223          	sw	x9,4(x13)
    19f4:	00e7a023          	sw	x14,0(x15)
    19f8:	32d000ef          	jal	x1,2524 <__malloc_unlock>
    19fc:	01c12083          	lw	x1,28(x2)
    1a00:	01812403          	lw	x8,24(x2)
    1a04:	01412483          	lw	x9,20(x2)
    1a08:	01012903          	lw	x18,16(x2)
    1a0c:	00c12983          	lw	x19,12(x2)
    1a10:	00812a03          	lw	x20,8(x2)
    1a14:	00100513          	addi	x10,x0,1
    1a18:	02010113          	addi	x2,x2,32
    1a1c:	00008067          	jalr	x0,0(x1)
    1a20:	00000593          	addi	x11,x0,0
    1a24:	00090513          	addi	x10,x18,0
    1a28:	115010ef          	jal	x1,333c <_sbrk_r>
    1a2c:	0089a703          	lw	x14,8(x19)
    1a30:	00f00693          	addi	x13,x0,15
    1a34:	40e507b3          	sub	x15,x10,x14
    1a38:	f4f6dce3          	bge	x13,x15,1990 <_malloc_trim_r+0x78>
    1a3c:	8081a683          	lw	x13,-2040(x3) # 4960 <__malloc_sbrk_base>
    1a40:	0017e793          	ori	x15,x15,1
    1a44:	00f72223          	sw	x15,4(x14) # 1004 <putchar+0x4>
    1a48:	40d50533          	sub	x10,x10,x13
    1a4c:	000086b7          	lui	x13,0x8
    1a50:	84a6ae23          	sw	x10,-1956(x13) # 785c <__malloc_current_mallinfo>
    1a54:	f3dff06f          	jal	x0,1990 <_malloc_trim_r+0x78>

00001a58 <_free_r>:
    1a58:	18058263          	beq	x11,x0,1bdc <_free_r+0x184>
    1a5c:	ff010113          	addi	x2,x2,-16
    1a60:	00812423          	sw	x8,8(x2)
    1a64:	00912223          	sw	x9,4(x2)
    1a68:	00058413          	addi	x8,x11,0
    1a6c:	00050493          	addi	x9,x10,0
    1a70:	00112623          	sw	x1,12(x2)
    1a74:	2ad000ef          	jal	x1,2520 <__malloc_lock>
    1a78:	ffc42503          	lw	x10,-4(x8)
    1a7c:	ff840713          	addi	x14,x8,-8
    1a80:	000045b7          	lui	x11,0x4
    1a84:	ffe57793          	andi	x15,x10,-2
    1a88:	00f70633          	add	x12,x14,x15
    1a8c:	55058593          	addi	x11,x11,1360 # 4550 <__malloc_av_>
    1a90:	00462683          	lw	x13,4(x12)
    1a94:	0085a803          	lw	x16,8(x11)
    1a98:	ffc6f693          	andi	x13,x13,-4
    1a9c:	1ac80263          	beq	x16,x12,1c40 <_free_r+0x1e8>
    1aa0:	00d62223          	sw	x13,4(x12)
    1aa4:	00157513          	andi	x10,x10,1
    1aa8:	00d60833          	add	x16,x12,x13
    1aac:	0a051063          	bne	x10,x0,1b4c <_free_r+0xf4>
    1ab0:	ff842303          	lw	x6,-8(x8)
    1ab4:	00482803          	lw	x16,4(x16)
    1ab8:	00004537          	lui	x10,0x4
    1abc:	40670733          	sub	x14,x14,x6
    1ac0:	00872883          	lw	x17,8(x14)
    1ac4:	55850513          	addi	x10,x10,1368 # 4558 <__malloc_av_+0x8>
    1ac8:	006787b3          	add	x15,x15,x6
    1acc:	00187813          	andi	x16,x16,1
    1ad0:	14a88263          	beq	x17,x10,1c14 <_free_r+0x1bc>
    1ad4:	00c72303          	lw	x6,12(x14)
    1ad8:	0068a623          	sw	x6,12(x17)
    1adc:	01132423          	sw	x17,8(x6)
    1ae0:	1a080663          	beq	x16,x0,1c8c <_free_r+0x234>
    1ae4:	0017e693          	ori	x13,x15,1
    1ae8:	00d72223          	sw	x13,4(x14)
    1aec:	00f62023          	sw	x15,0(x12)
    1af0:	1ff00693          	addi	x13,x0,511
    1af4:	06f6ec63          	bltu	x13,x15,1b6c <_free_r+0x114>
    1af8:	ff87f693          	andi	x13,x15,-8
    1afc:	00868693          	addi	x13,x13,8
    1b00:	0045a503          	lw	x10,4(x11)
    1b04:	00d586b3          	add	x13,x11,x13
    1b08:	0006a603          	lw	x12,0(x13)
    1b0c:	0057d813          	srli	x16,x15,0x5
    1b10:	00100793          	addi	x15,x0,1
    1b14:	010797b3          	sll	x15,x15,x16
    1b18:	00a7e7b3          	or	x15,x15,x10
    1b1c:	ff868513          	addi	x10,x13,-8
    1b20:	00a72623          	sw	x10,12(x14)
    1b24:	00c72423          	sw	x12,8(x14)
    1b28:	00f5a223          	sw	x15,4(x11)
    1b2c:	00e6a023          	sw	x14,0(x13)
    1b30:	00e62623          	sw	x14,12(x12)
    1b34:	00812403          	lw	x8,8(x2)
    1b38:	00c12083          	lw	x1,12(x2)
    1b3c:	00048513          	addi	x10,x9,0
    1b40:	00412483          	lw	x9,4(x2)
    1b44:	01010113          	addi	x2,x2,16
    1b48:	1dd0006f          	jal	x0,2524 <__malloc_unlock>
    1b4c:	00482503          	lw	x10,4(x16)
    1b50:	00157513          	andi	x10,x10,1
    1b54:	08050663          	beq	x10,x0,1be0 <_free_r+0x188>
    1b58:	0017e693          	ori	x13,x15,1
    1b5c:	fed42e23          	sw	x13,-4(x8)
    1b60:	00f62023          	sw	x15,0(x12)
    1b64:	1ff00693          	addi	x13,x0,511
    1b68:	f8f6f8e3          	bgeu	x13,x15,1af8 <_free_r+0xa0>
    1b6c:	0097d693          	srli	x13,x15,0x9
    1b70:	00400613          	addi	x12,x0,4
    1b74:	12d66063          	bltu	x12,x13,1c94 <_free_r+0x23c>
    1b78:	0067d693          	srli	x13,x15,0x6
    1b7c:	03968513          	addi	x10,x13,57
    1b80:	03868613          	addi	x12,x13,56
    1b84:	00351513          	slli	x10,x10,0x3
    1b88:	00a58533          	add	x10,x11,x10
    1b8c:	00052683          	lw	x13,0(x10)
    1b90:	ff850513          	addi	x10,x10,-8
    1b94:	00d51863          	bne	x10,x13,1ba4 <_free_r+0x14c>
    1b98:	1540006f          	jal	x0,1cec <_free_r+0x294>
    1b9c:	0086a683          	lw	x13,8(x13)
    1ba0:	00d50863          	beq	x10,x13,1bb0 <_free_r+0x158>
    1ba4:	0046a603          	lw	x12,4(x13)
    1ba8:	ffc67613          	andi	x12,x12,-4
    1bac:	fec7e8e3          	bltu	x15,x12,1b9c <_free_r+0x144>
    1bb0:	00c6a503          	lw	x10,12(x13)
    1bb4:	00a72623          	sw	x10,12(x14)
    1bb8:	00d72423          	sw	x13,8(x14)
    1bbc:	00812403          	lw	x8,8(x2)
    1bc0:	00e52423          	sw	x14,8(x10)
    1bc4:	00c12083          	lw	x1,12(x2)
    1bc8:	00048513          	addi	x10,x9,0
    1bcc:	00412483          	lw	x9,4(x2)
    1bd0:	00e6a623          	sw	x14,12(x13)
    1bd4:	01010113          	addi	x2,x2,16
    1bd8:	14d0006f          	jal	x0,2524 <__malloc_unlock>
    1bdc:	00008067          	jalr	x0,0(x1)
    1be0:	00004537          	lui	x10,0x4
    1be4:	00d787b3          	add	x15,x15,x13
    1be8:	55850513          	addi	x10,x10,1368 # 4558 <__malloc_av_+0x8>
    1bec:	00862683          	lw	x13,8(x12)
    1bf0:	0ca68c63          	beq	x13,x10,1cc8 <_free_r+0x270>
    1bf4:	00c62803          	lw	x16,12(x12)
    1bf8:	0017e513          	ori	x10,x15,1
    1bfc:	00f70633          	add	x12,x14,x15
    1c00:	0106a623          	sw	x16,12(x13)
    1c04:	00d82423          	sw	x13,8(x16)
    1c08:	00a72223          	sw	x10,4(x14)
    1c0c:	00f62023          	sw	x15,0(x12)
    1c10:	ee1ff06f          	jal	x0,1af0 <_free_r+0x98>
    1c14:	12081c63          	bne	x16,x0,1d4c <_free_r+0x2f4>
    1c18:	00862583          	lw	x11,8(x12)
    1c1c:	00c62603          	lw	x12,12(x12)
    1c20:	00f686b3          	add	x13,x13,x15
    1c24:	0016e793          	ori	x15,x13,1
    1c28:	00c5a623          	sw	x12,12(x11)
    1c2c:	00b62423          	sw	x11,8(x12)
    1c30:	00f72223          	sw	x15,4(x14)
    1c34:	00d70733          	add	x14,x14,x13
    1c38:	00d72023          	sw	x13,0(x14)
    1c3c:	ef9ff06f          	jal	x0,1b34 <_free_r+0xdc>
    1c40:	00157513          	andi	x10,x10,1
    1c44:	00d786b3          	add	x13,x15,x13
    1c48:	02051063          	bne	x10,x0,1c68 <_free_r+0x210>
    1c4c:	ff842503          	lw	x10,-8(x8)
    1c50:	40a70733          	sub	x14,x14,x10
    1c54:	00c72783          	lw	x15,12(x14)
    1c58:	00872603          	lw	x12,8(x14)
    1c5c:	00a686b3          	add	x13,x13,x10
    1c60:	00f62623          	sw	x15,12(x12)
    1c64:	00c7a423          	sw	x12,8(x15)
    1c68:	0016e613          	ori	x12,x13,1
    1c6c:	80c1a783          	lw	x15,-2036(x3) # 4964 <__malloc_trim_threshold>
    1c70:	00c72223          	sw	x12,4(x14)
    1c74:	00e5a423          	sw	x14,8(x11)
    1c78:	eaf6eee3          	bltu	x13,x15,1b34 <_free_r+0xdc>
    1c7c:	8601a583          	lw	x11,-1952(x3) # 49b8 <__malloc_top_pad>
    1c80:	00048513          	addi	x10,x9,0
    1c84:	c95ff0ef          	jal	x1,1918 <_malloc_trim_r>
    1c88:	eadff06f          	jal	x0,1b34 <_free_r+0xdc>
    1c8c:	00d787b3          	add	x15,x15,x13
    1c90:	f5dff06f          	jal	x0,1bec <_free_r+0x194>
    1c94:	01400613          	addi	x12,x0,20
    1c98:	02d67063          	bgeu	x12,x13,1cb8 <_free_r+0x260>
    1c9c:	05400613          	addi	x12,x0,84
    1ca0:	06d66463          	bltu	x12,x13,1d08 <_free_r+0x2b0>
    1ca4:	00c7d693          	srli	x13,x15,0xc
    1ca8:	06f68513          	addi	x10,x13,111
    1cac:	06e68613          	addi	x12,x13,110
    1cb0:	00351513          	slli	x10,x10,0x3
    1cb4:	ed5ff06f          	jal	x0,1b88 <_free_r+0x130>
    1cb8:	05c68513          	addi	x10,x13,92
    1cbc:	05b68613          	addi	x12,x13,91
    1cc0:	00351513          	slli	x10,x10,0x3
    1cc4:	ec5ff06f          	jal	x0,1b88 <_free_r+0x130>
    1cc8:	00e5aa23          	sw	x14,20(x11)
    1ccc:	00e5a823          	sw	x14,16(x11)
    1cd0:	0017e693          	ori	x13,x15,1
    1cd4:	00a72623          	sw	x10,12(x14)
    1cd8:	00a72423          	sw	x10,8(x14)
    1cdc:	00d72223          	sw	x13,4(x14)
    1ce0:	00f70733          	add	x14,x14,x15
    1ce4:	00f72023          	sw	x15,0(x14)
    1ce8:	e4dff06f          	jal	x0,1b34 <_free_r+0xdc>
    1cec:	0045a803          	lw	x16,4(x11)
    1cf0:	40265613          	srai	x12,x12,0x2
    1cf4:	00100793          	addi	x15,x0,1
    1cf8:	00c797b3          	sll	x15,x15,x12
    1cfc:	0107e7b3          	or	x15,x15,x16
    1d00:	00f5a223          	sw	x15,4(x11)
    1d04:	eb1ff06f          	jal	x0,1bb4 <_free_r+0x15c>
    1d08:	15400613          	addi	x12,x0,340
    1d0c:	00d66c63          	bltu	x12,x13,1d24 <_free_r+0x2cc>
    1d10:	00f7d693          	srli	x13,x15,0xf
    1d14:	07868513          	addi	x10,x13,120
    1d18:	07768613          	addi	x12,x13,119
    1d1c:	00351513          	slli	x10,x10,0x3
    1d20:	e69ff06f          	jal	x0,1b88 <_free_r+0x130>
    1d24:	55400613          	addi	x12,x0,1364
    1d28:	00d66c63          	bltu	x12,x13,1d40 <_free_r+0x2e8>
    1d2c:	0127d693          	srli	x13,x15,0x12
    1d30:	07d68513          	addi	x10,x13,125
    1d34:	07c68613          	addi	x12,x13,124
    1d38:	00351513          	slli	x10,x10,0x3
    1d3c:	e4dff06f          	jal	x0,1b88 <_free_r+0x130>
    1d40:	3f800513          	addi	x10,x0,1016
    1d44:	07e00613          	addi	x12,x0,126
    1d48:	e41ff06f          	jal	x0,1b88 <_free_r+0x130>
    1d4c:	0017e693          	ori	x13,x15,1
    1d50:	00d72223          	sw	x13,4(x14)
    1d54:	00f62023          	sw	x15,0(x12)
    1d58:	dddff06f          	jal	x0,1b34 <_free_r+0xdc>

00001d5c <_malloc_r>:
    1d5c:	fd010113          	addi	x2,x2,-48
    1d60:	01312e23          	sw	x19,28(x2)
    1d64:	02112623          	sw	x1,44(x2)
    1d68:	02812423          	sw	x8,40(x2)
    1d6c:	02912223          	sw	x9,36(x2)
    1d70:	03212023          	sw	x18,32(x2)
    1d74:	00b58793          	addi	x15,x11,11
    1d78:	01600713          	addi	x14,x0,22
    1d7c:	00050993          	addi	x19,x10,0
    1d80:	08f76263          	bltu	x14,x15,1e04 <_malloc_r+0xa8>
    1d84:	01000793          	addi	x15,x0,16
    1d88:	20b7e663          	bltu	x15,x11,1f94 <_malloc_r+0x238>
    1d8c:	794000ef          	jal	x1,2520 <__malloc_lock>
    1d90:	01800793          	addi	x15,x0,24
    1d94:	00200593          	addi	x11,x0,2
    1d98:	01000493          	addi	x9,x0,16
    1d9c:	00004937          	lui	x18,0x4
    1da0:	55090913          	addi	x18,x18,1360 # 4550 <__malloc_av_>
    1da4:	00f907b3          	add	x15,x18,x15
    1da8:	0047a403          	lw	x8,4(x15)
    1dac:	ff878713          	addi	x14,x15,-8
    1db0:	34e40663          	beq	x8,x14,20fc <_malloc_r+0x3a0>
    1db4:	00442783          	lw	x15,4(x8)
    1db8:	00c42683          	lw	x13,12(x8)
    1dbc:	00842603          	lw	x12,8(x8)
    1dc0:	ffc7f793          	andi	x15,x15,-4
    1dc4:	00f407b3          	add	x15,x8,x15
    1dc8:	0047a703          	lw	x14,4(x15)
    1dcc:	00d62623          	sw	x13,12(x12)
    1dd0:	00c6a423          	sw	x12,8(x13)
    1dd4:	00176713          	ori	x14,x14,1
    1dd8:	00098513          	addi	x10,x19,0
    1ddc:	00e7a223          	sw	x14,4(x15)
    1de0:	744000ef          	jal	x1,2524 <__malloc_unlock>
    1de4:	00840513          	addi	x10,x8,8
    1de8:	02c12083          	lw	x1,44(x2)
    1dec:	02812403          	lw	x8,40(x2)
    1df0:	02412483          	lw	x9,36(x2)
    1df4:	02012903          	lw	x18,32(x2)
    1df8:	01c12983          	lw	x19,28(x2)
    1dfc:	03010113          	addi	x2,x2,48
    1e00:	00008067          	jalr	x0,0(x1)
    1e04:	ff87f493          	andi	x9,x15,-8
    1e08:	1807c663          	blt	x15,x0,1f94 <_malloc_r+0x238>
    1e0c:	18b4e463          	bltu	x9,x11,1f94 <_malloc_r+0x238>
    1e10:	710000ef          	jal	x1,2520 <__malloc_lock>
    1e14:	1f700793          	addi	x15,x0,503
    1e18:	3e97fc63          	bgeu	x15,x9,2210 <_malloc_r+0x4b4>
    1e1c:	0094d793          	srli	x15,x9,0x9
    1e20:	18078263          	beq	x15,x0,1fa4 <_malloc_r+0x248>
    1e24:	00400713          	addi	x14,x0,4
    1e28:	34f76263          	bltu	x14,x15,216c <_malloc_r+0x410>
    1e2c:	0064d793          	srli	x15,x9,0x6
    1e30:	03978593          	addi	x11,x15,57
    1e34:	03878813          	addi	x16,x15,56
    1e38:	00359613          	slli	x12,x11,0x3
    1e3c:	00004937          	lui	x18,0x4
    1e40:	55090913          	addi	x18,x18,1360 # 4550 <__malloc_av_>
    1e44:	00c90633          	add	x12,x18,x12
    1e48:	00462403          	lw	x8,4(x12)
    1e4c:	ff860613          	addi	x12,x12,-8
    1e50:	02860863          	beq	x12,x8,1e80 <_malloc_r+0x124>
    1e54:	00f00513          	addi	x10,x0,15
    1e58:	0140006f          	jal	x0,1e6c <_malloc_r+0x110>
    1e5c:	00c42683          	lw	x13,12(x8)
    1e60:	28075a63          	bge	x14,x0,20f4 <_malloc_r+0x398>
    1e64:	00d60e63          	beq	x12,x13,1e80 <_malloc_r+0x124>
    1e68:	00068413          	addi	x8,x13,0
    1e6c:	00442783          	lw	x15,4(x8)
    1e70:	ffc7f793          	andi	x15,x15,-4
    1e74:	40978733          	sub	x14,x15,x9
    1e78:	fee552e3          	bge	x10,x14,1e5c <_malloc_r+0x100>
    1e7c:	00080593          	addi	x11,x16,0
    1e80:	01092403          	lw	x8,16(x18)
    1e84:	00004837          	lui	x16,0x4
    1e88:	55880813          	addi	x16,x16,1368 # 4558 <__malloc_av_+0x8>
    1e8c:	27040063          	beq	x8,x16,20ec <_malloc_r+0x390>
    1e90:	00442783          	lw	x15,4(x8)
    1e94:	00f00693          	addi	x13,x0,15
    1e98:	ffc7f793          	andi	x15,x15,-4
    1e9c:	40978733          	sub	x14,x15,x9
    1ea0:	36e6ce63          	blt	x13,x14,221c <_malloc_r+0x4c0>
    1ea4:	01092a23          	sw	x16,20(x18)
    1ea8:	01092823          	sw	x16,16(x18)
    1eac:	34075263          	bge	x14,x0,21f0 <_malloc_r+0x494>
    1eb0:	1ff00713          	addi	x14,x0,511
    1eb4:	00492503          	lw	x10,4(x18)
    1eb8:	24f76a63          	bltu	x14,x15,210c <_malloc_r+0x3b0>
    1ebc:	ff87f713          	andi	x14,x15,-8
    1ec0:	00870713          	addi	x14,x14,8
    1ec4:	00e90733          	add	x14,x18,x14
    1ec8:	00072683          	lw	x13,0(x14)
    1ecc:	0057d613          	srli	x12,x15,0x5
    1ed0:	00100793          	addi	x15,x0,1
    1ed4:	00c797b3          	sll	x15,x15,x12
    1ed8:	00f56533          	or	x10,x10,x15
    1edc:	ff870793          	addi	x15,x14,-8
    1ee0:	00f42623          	sw	x15,12(x8)
    1ee4:	00d42423          	sw	x13,8(x8)
    1ee8:	00a92223          	sw	x10,4(x18)
    1eec:	00872023          	sw	x8,0(x14)
    1ef0:	0086a623          	sw	x8,12(x13)
    1ef4:	4025d793          	srai	x15,x11,0x2
    1ef8:	00100613          	addi	x12,x0,1
    1efc:	00f61633          	sll	x12,x12,x15
    1f00:	0ac56a63          	bltu	x10,x12,1fb4 <_malloc_r+0x258>
    1f04:	00a677b3          	and	x15,x12,x10
    1f08:	02079463          	bne	x15,x0,1f30 <_malloc_r+0x1d4>
    1f0c:	00161613          	slli	x12,x12,0x1
    1f10:	ffc5f593          	andi	x11,x11,-4
    1f14:	00a677b3          	and	x15,x12,x10
    1f18:	00458593          	addi	x11,x11,4
    1f1c:	00079a63          	bne	x15,x0,1f30 <_malloc_r+0x1d4>
    1f20:	00161613          	slli	x12,x12,0x1
    1f24:	00a677b3          	and	x15,x12,x10
    1f28:	00458593          	addi	x11,x11,4
    1f2c:	fe078ae3          	beq	x15,x0,1f20 <_malloc_r+0x1c4>
    1f30:	00f00893          	addi	x17,x0,15
    1f34:	00359313          	slli	x6,x11,0x3
    1f38:	00690333          	add	x6,x18,x6
    1f3c:	00030513          	addi	x10,x6,0
    1f40:	00c52783          	lw	x15,12(x10)
    1f44:	00058e13          	addi	x28,x11,0
    1f48:	24f50463          	beq	x10,x15,2190 <_malloc_r+0x434>
    1f4c:	0047a703          	lw	x14,4(x15)
    1f50:	00078413          	addi	x8,x15,0
    1f54:	00c7a783          	lw	x15,12(x15)
    1f58:	ffc77713          	andi	x14,x14,-4
    1f5c:	409706b3          	sub	x13,x14,x9
    1f60:	24d8c463          	blt	x17,x13,21a8 <_malloc_r+0x44c>
    1f64:	fe06c2e3          	blt	x13,x0,1f48 <_malloc_r+0x1ec>
    1f68:	00e40733          	add	x14,x8,x14
    1f6c:	00472683          	lw	x13,4(x14)
    1f70:	00842603          	lw	x12,8(x8)
    1f74:	00098513          	addi	x10,x19,0
    1f78:	0016e693          	ori	x13,x13,1
    1f7c:	00d72223          	sw	x13,4(x14)
    1f80:	00f62623          	sw	x15,12(x12)
    1f84:	00c7a423          	sw	x12,8(x15)
    1f88:	59c000ef          	jal	x1,2524 <__malloc_unlock>
    1f8c:	00840513          	addi	x10,x8,8
    1f90:	e59ff06f          	jal	x0,1de8 <_malloc_r+0x8c>
    1f94:	00c00793          	addi	x15,x0,12
    1f98:	00f9a023          	sw	x15,0(x19)
    1f9c:	00000513          	addi	x10,x0,0
    1fa0:	e49ff06f          	jal	x0,1de8 <_malloc_r+0x8c>
    1fa4:	20000613          	addi	x12,x0,512
    1fa8:	04000593          	addi	x11,x0,64
    1fac:	03f00813          	addi	x16,x0,63
    1fb0:	e8dff06f          	jal	x0,1e3c <_malloc_r+0xe0>
    1fb4:	00892403          	lw	x8,8(x18)
    1fb8:	01612823          	sw	x22,16(x2)
    1fbc:	00442783          	lw	x15,4(x8)
    1fc0:	ffc7fb13          	andi	x22,x15,-4
    1fc4:	009b6863          	bltu	x22,x9,1fd4 <_malloc_r+0x278>
    1fc8:	409b0733          	sub	x14,x22,x9
    1fcc:	00f00793          	addi	x15,x0,15
    1fd0:	0ce7cc63          	blt	x15,x14,20a8 <_malloc_r+0x34c>
    1fd4:	01912223          	sw	x25,4(x2)
    1fd8:	01512a23          	sw	x21,20(x2)
    1fdc:	8081a703          	lw	x14,-2040(x3) # 4960 <__malloc_sbrk_base>
    1fe0:	8601aa83          	lw	x21,-1952(x3) # 49b8 <__malloc_top_pad>
    1fe4:	01412c23          	sw	x20,24(x2)
    1fe8:	01712623          	sw	x23,12(x2)
    1fec:	fff00793          	addi	x15,x0,-1
    1ff0:	01640a33          	add	x20,x8,x22
    1ff4:	01548ab3          	add	x21,x9,x21
    1ff8:	3cf70a63          	beq	x14,x15,23cc <_malloc_r+0x670>
    1ffc:	000017b7          	lui	x15,0x1
    2000:	00f78793          	addi	x15,x15,15 # 100f <putchar+0xf>
    2004:	00fa8ab3          	add	x21,x21,x15
    2008:	fffff7b7          	lui	x15,0xfffff
    200c:	00fafab3          	and	x21,x21,x15
    2010:	000a8593          	addi	x11,x21,0
    2014:	00098513          	addi	x10,x19,0
    2018:	324010ef          	jal	x1,333c <_sbrk_r>
    201c:	fff00793          	addi	x15,x0,-1
    2020:	00050b93          	addi	x23,x10,0
    2024:	44f50e63          	beq	x10,x15,2480 <_malloc_r+0x724>
    2028:	01812423          	sw	x24,8(x2)
    202c:	25456063          	bltu	x10,x20,226c <_malloc_r+0x510>
    2030:	00008c37          	lui	x24,0x8
    2034:	85cc0c13          	addi	x24,x24,-1956 # 785c <__malloc_current_mallinfo>
    2038:	000c2583          	lw	x11,0(x24)
    203c:	00ba85b3          	add	x11,x21,x11
    2040:	00bc2023          	sw	x11,0(x24)
    2044:	00058713          	addi	x14,x11,0
    2048:	2aaa1863          	bne	x20,x10,22f8 <_malloc_r+0x59c>
    204c:	01451793          	slli	x15,x10,0x14
    2050:	2a079463          	bne	x15,x0,22f8 <_malloc_r+0x59c>
    2054:	00892b83          	lw	x23,8(x18)
    2058:	015b07b3          	add	x15,x22,x21
    205c:	0017e793          	ori	x15,x15,1
    2060:	00fba223          	sw	x15,4(x23)
    2064:	85c1a683          	lw	x13,-1956(x3) # 49b4 <__malloc_max_sbrked_mem>
    2068:	00b6f463          	bgeu	x13,x11,2070 <_malloc_r+0x314>
    206c:	84b1ae23          	sw	x11,-1956(x3) # 49b4 <__malloc_max_sbrked_mem>
    2070:	8581a683          	lw	x13,-1960(x3) # 49b0 <__malloc_max_total_mem>
    2074:	00b6f463          	bgeu	x13,x11,207c <_malloc_r+0x320>
    2078:	84b1ac23          	sw	x11,-1960(x3) # 49b0 <__malloc_max_total_mem>
    207c:	00812c03          	lw	x24,8(x2)
    2080:	000b8413          	addi	x8,x23,0
    2084:	ffc7f793          	andi	x15,x15,-4
    2088:	40978733          	sub	x14,x15,x9
    208c:	3897ec63          	bltu	x15,x9,2424 <_malloc_r+0x6c8>
    2090:	00f00793          	addi	x15,x0,15
    2094:	38e7d863          	bge	x15,x14,2424 <_malloc_r+0x6c8>
    2098:	01812a03          	lw	x20,24(x2)
    209c:	01412a83          	lw	x21,20(x2)
    20a0:	00c12b83          	lw	x23,12(x2)
    20a4:	00412c83          	lw	x25,4(x2)
    20a8:	0014e793          	ori	x15,x9,1
    20ac:	00f42223          	sw	x15,4(x8)
    20b0:	009404b3          	add	x9,x8,x9
    20b4:	00992423          	sw	x9,8(x18)
    20b8:	00176713          	ori	x14,x14,1
    20bc:	00098513          	addi	x10,x19,0
    20c0:	00e4a223          	sw	x14,4(x9)
    20c4:	460000ef          	jal	x1,2524 <__malloc_unlock>
    20c8:	02c12083          	lw	x1,44(x2)
    20cc:	00840513          	addi	x10,x8,8
    20d0:	02812403          	lw	x8,40(x2)
    20d4:	01012b03          	lw	x22,16(x2)
    20d8:	02412483          	lw	x9,36(x2)
    20dc:	02012903          	lw	x18,32(x2)
    20e0:	01c12983          	lw	x19,28(x2)
    20e4:	03010113          	addi	x2,x2,48
    20e8:	00008067          	jalr	x0,0(x1)
    20ec:	00492503          	lw	x10,4(x18)
    20f0:	e05ff06f          	jal	x0,1ef4 <_malloc_r+0x198>
    20f4:	00842603          	lw	x12,8(x8)
    20f8:	ccdff06f          	jal	x0,1dc4 <_malloc_r+0x68>
    20fc:	00c7a403          	lw	x8,12(x15) # fffff00c <__heap_end+0xffbff00c>
    2100:	00258593          	addi	x11,x11,2
    2104:	d6878ee3          	beq	x15,x8,1e80 <_malloc_r+0x124>
    2108:	cadff06f          	jal	x0,1db4 <_malloc_r+0x58>
    210c:	0097d713          	srli	x14,x15,0x9
    2110:	00400693          	addi	x13,x0,4
    2114:	14e6f263          	bgeu	x13,x14,2258 <_malloc_r+0x4fc>
    2118:	01400693          	addi	x13,x0,20
    211c:	32e6e663          	bltu	x13,x14,2448 <_malloc_r+0x6ec>
    2120:	05c70613          	addi	x12,x14,92
    2124:	05b70693          	addi	x13,x14,91
    2128:	00361613          	slli	x12,x12,0x3
    212c:	00c90633          	add	x12,x18,x12
    2130:	00062703          	lw	x14,0(x12)
    2134:	ff860613          	addi	x12,x12,-8
    2138:	00e61863          	bne	x12,x14,2148 <_malloc_r+0x3ec>
    213c:	2980006f          	jal	x0,23d4 <_malloc_r+0x678>
    2140:	00872703          	lw	x14,8(x14)
    2144:	00e60863          	beq	x12,x14,2154 <_malloc_r+0x3f8>
    2148:	00472683          	lw	x13,4(x14)
    214c:	ffc6f693          	andi	x13,x13,-4
    2150:	fed7e8e3          	bltu	x15,x13,2140 <_malloc_r+0x3e4>
    2154:	00c72603          	lw	x12,12(x14)
    2158:	00c42623          	sw	x12,12(x8)
    215c:	00e42423          	sw	x14,8(x8)
    2160:	00862423          	sw	x8,8(x12)
    2164:	00872623          	sw	x8,12(x14)
    2168:	d8dff06f          	jal	x0,1ef4 <_malloc_r+0x198>
    216c:	01400713          	addi	x14,x0,20
    2170:	10f77863          	bgeu	x14,x15,2280 <_malloc_r+0x524>
    2174:	05400713          	addi	x14,x0,84
    2178:	2ef76663          	bltu	x14,x15,2464 <_malloc_r+0x708>
    217c:	00c4d793          	srli	x15,x9,0xc
    2180:	06f78593          	addi	x11,x15,111
    2184:	06e78813          	addi	x16,x15,110
    2188:	00359613          	slli	x12,x11,0x3
    218c:	cb1ff06f          	jal	x0,1e3c <_malloc_r+0xe0>
    2190:	001e0e13          	addi	x28,x28,1
    2194:	003e7793          	andi	x15,x28,3
    2198:	00850513          	addi	x10,x10,8
    219c:	10078063          	beq	x15,x0,229c <_malloc_r+0x540>
    21a0:	00c52783          	lw	x15,12(x10)
    21a4:	da5ff06f          	jal	x0,1f48 <_malloc_r+0x1ec>
    21a8:	00842603          	lw	x12,8(x8)
    21ac:	0014e593          	ori	x11,x9,1
    21b0:	00b42223          	sw	x11,4(x8)
    21b4:	00f62623          	sw	x15,12(x12)
    21b8:	00c7a423          	sw	x12,8(x15)
    21bc:	009404b3          	add	x9,x8,x9
    21c0:	00992a23          	sw	x9,20(x18)
    21c4:	00992823          	sw	x9,16(x18)
    21c8:	0016e793          	ori	x15,x13,1
    21cc:	0104a623          	sw	x16,12(x9)
    21d0:	0104a423          	sw	x16,8(x9)
    21d4:	00f4a223          	sw	x15,4(x9)
    21d8:	00e40733          	add	x14,x8,x14
    21dc:	00098513          	addi	x10,x19,0
    21e0:	00d72023          	sw	x13,0(x14)
    21e4:	340000ef          	jal	x1,2524 <__malloc_unlock>
    21e8:	00840513          	addi	x10,x8,8
    21ec:	bfdff06f          	jal	x0,1de8 <_malloc_r+0x8c>
    21f0:	00f407b3          	add	x15,x8,x15
    21f4:	0047a703          	lw	x14,4(x15)
    21f8:	00098513          	addi	x10,x19,0
    21fc:	00176713          	ori	x14,x14,1
    2200:	00e7a223          	sw	x14,4(x15)
    2204:	320000ef          	jal	x1,2524 <__malloc_unlock>
    2208:	00840513          	addi	x10,x8,8
    220c:	bddff06f          	jal	x0,1de8 <_malloc_r+0x8c>
    2210:	0034d593          	srli	x11,x9,0x3
    2214:	00848793          	addi	x15,x9,8
    2218:	b85ff06f          	jal	x0,1d9c <_malloc_r+0x40>
    221c:	0014e693          	ori	x13,x9,1
    2220:	00d42223          	sw	x13,4(x8)
    2224:	009404b3          	add	x9,x8,x9
    2228:	00992a23          	sw	x9,20(x18)
    222c:	00992823          	sw	x9,16(x18)
    2230:	00176693          	ori	x13,x14,1
    2234:	0104a623          	sw	x16,12(x9)
    2238:	0104a423          	sw	x16,8(x9)
    223c:	00d4a223          	sw	x13,4(x9)
    2240:	00f407b3          	add	x15,x8,x15
    2244:	00098513          	addi	x10,x19,0
    2248:	00e7a023          	sw	x14,0(x15)
    224c:	2d8000ef          	jal	x1,2524 <__malloc_unlock>
    2250:	00840513          	addi	x10,x8,8
    2254:	b95ff06f          	jal	x0,1de8 <_malloc_r+0x8c>
    2258:	0067d713          	srli	x14,x15,0x6
    225c:	03970613          	addi	x12,x14,57
    2260:	03870693          	addi	x13,x14,56
    2264:	00361613          	slli	x12,x12,0x3
    2268:	ec5ff06f          	jal	x0,212c <_malloc_r+0x3d0>
    226c:	07240c63          	beq	x8,x18,22e4 <_malloc_r+0x588>
    2270:	00892403          	lw	x8,8(x18)
    2274:	00812c03          	lw	x24,8(x2)
    2278:	00442783          	lw	x15,4(x8)
    227c:	e09ff06f          	jal	x0,2084 <_malloc_r+0x328>
    2280:	05c78593          	addi	x11,x15,92
    2284:	05b78813          	addi	x16,x15,91
    2288:	00359613          	slli	x12,x11,0x3
    228c:	bb1ff06f          	jal	x0,1e3c <_malloc_r+0xe0>
    2290:	00832783          	lw	x15,8(x6)
    2294:	fff58593          	addi	x11,x11,-1
    2298:	28679063          	bne	x15,x6,2518 <_malloc_r+0x7bc>
    229c:	0035f793          	andi	x15,x11,3
    22a0:	ff830313          	addi	x6,x6,-8
    22a4:	fe0796e3          	bne	x15,x0,2290 <_malloc_r+0x534>
    22a8:	00492703          	lw	x14,4(x18)
    22ac:	fff64793          	xori	x15,x12,-1
    22b0:	00e7f7b3          	and	x15,x15,x14
    22b4:	00f92223          	sw	x15,4(x18)
    22b8:	00161613          	slli	x12,x12,0x1
    22bc:	cec7ece3          	bltu	x15,x12,1fb4 <_malloc_r+0x258>
    22c0:	ce060ae3          	beq	x12,x0,1fb4 <_malloc_r+0x258>
    22c4:	00f67733          	and	x14,x12,x15
    22c8:	00071a63          	bne	x14,x0,22dc <_malloc_r+0x580>
    22cc:	00161613          	slli	x12,x12,0x1
    22d0:	00f67733          	and	x14,x12,x15
    22d4:	004e0e13          	addi	x28,x28,4
    22d8:	fe070ae3          	beq	x14,x0,22cc <_malloc_r+0x570>
    22dc:	000e0593          	addi	x11,x28,0
    22e0:	c55ff06f          	jal	x0,1f34 <_malloc_r+0x1d8>
    22e4:	00008c37          	lui	x24,0x8
    22e8:	85cc0c13          	addi	x24,x24,-1956 # 785c <__malloc_current_mallinfo>
    22ec:	000c2703          	lw	x14,0(x24)
    22f0:	00ea8733          	add	x14,x21,x14
    22f4:	00ec2023          	sw	x14,0(x24)
    22f8:	8081a683          	lw	x13,-2040(x3) # 4960 <__malloc_sbrk_base>
    22fc:	fff00793          	addi	x15,x0,-1
    2300:	18f68663          	beq	x13,x15,248c <_malloc_r+0x730>
    2304:	414b87b3          	sub	x15,x23,x20
    2308:	00e787b3          	add	x15,x15,x14
    230c:	00fc2023          	sw	x15,0(x24)
    2310:	007bfc93          	andi	x25,x23,7
    2314:	0c0c8c63          	beq	x25,x0,23ec <_malloc_r+0x690>
    2318:	419b8bb3          	sub	x23,x23,x25
    231c:	000017b7          	lui	x15,0x1
    2320:	00878793          	addi	x15,x15,8 # 1008 <putchar+0x8>
    2324:	008b8b93          	addi	x23,x23,8
    2328:	419785b3          	sub	x11,x15,x25
    232c:	015b8ab3          	add	x21,x23,x21
    2330:	415585b3          	sub	x11,x11,x21
    2334:	01459593          	slli	x11,x11,0x14
    2338:	0145da13          	srli	x20,x11,0x14
    233c:	000a0593          	addi	x11,x20,0
    2340:	00098513          	addi	x10,x19,0
    2344:	7f9000ef          	jal	x1,333c <_sbrk_r>
    2348:	fff00793          	addi	x15,x0,-1
    234c:	18f50063          	beq	x10,x15,24cc <_malloc_r+0x770>
    2350:	41750533          	sub	x10,x10,x23
    2354:	01450ab3          	add	x21,x10,x20
    2358:	000c2703          	lw	x14,0(x24)
    235c:	01792423          	sw	x23,8(x18)
    2360:	001ae793          	ori	x15,x21,1
    2364:	00ea05b3          	add	x11,x20,x14
    2368:	00bc2023          	sw	x11,0(x24)
    236c:	00fba223          	sw	x15,4(x23)
    2370:	cf240ae3          	beq	x8,x18,2064 <_malloc_r+0x308>
    2374:	00f00693          	addi	x13,x0,15
    2378:	0b66f063          	bgeu	x13,x22,2418 <_malloc_r+0x6bc>
    237c:	00442703          	lw	x14,4(x8)
    2380:	ff4b0793          	addi	x15,x22,-12
    2384:	ff87f793          	andi	x15,x15,-8
    2388:	00177713          	andi	x14,x14,1
    238c:	00f76733          	or	x14,x14,x15
    2390:	00e42223          	sw	x14,4(x8)
    2394:	00500613          	addi	x12,x0,5
    2398:	00f40733          	add	x14,x8,x15
    239c:	00c72223          	sw	x12,4(x14)
    23a0:	00c72423          	sw	x12,8(x14)
    23a4:	00f6e663          	bltu	x13,x15,23b0 <_malloc_r+0x654>
    23a8:	004ba783          	lw	x15,4(x23)
    23ac:	cb9ff06f          	jal	x0,2064 <_malloc_r+0x308>
    23b0:	00840593          	addi	x11,x8,8
    23b4:	00098513          	addi	x10,x19,0
    23b8:	ea0ff0ef          	jal	x1,1a58 <_free_r>
    23bc:	00892b83          	lw	x23,8(x18)
    23c0:	000c2583          	lw	x11,0(x24)
    23c4:	004ba783          	lw	x15,4(x23)
    23c8:	c9dff06f          	jal	x0,2064 <_malloc_r+0x308>
    23cc:	010a8a93          	addi	x21,x21,16
    23d0:	c41ff06f          	jal	x0,2010 <_malloc_r+0x2b4>
    23d4:	4026d693          	srai	x13,x13,0x2
    23d8:	00100793          	addi	x15,x0,1
    23dc:	00d797b3          	sll	x15,x15,x13
    23e0:	00f56533          	or	x10,x10,x15
    23e4:	00a92223          	sw	x10,4(x18)
    23e8:	d71ff06f          	jal	x0,2158 <_malloc_r+0x3fc>
    23ec:	015b85b3          	add	x11,x23,x21
    23f0:	40b005b3          	sub	x11,x0,x11
    23f4:	01459593          	slli	x11,x11,0x14
    23f8:	0145da13          	srli	x20,x11,0x14
    23fc:	000a0593          	addi	x11,x20,0
    2400:	00098513          	addi	x10,x19,0
    2404:	739000ef          	jal	x1,333c <_sbrk_r>
    2408:	fff00793          	addi	x15,x0,-1
    240c:	f4f512e3          	bne	x10,x15,2350 <_malloc_r+0x5f4>
    2410:	00000a13          	addi	x20,x0,0
    2414:	f45ff06f          	jal	x0,2358 <_malloc_r+0x5fc>
    2418:	00812c03          	lw	x24,8(x2)
    241c:	00100793          	addi	x15,x0,1
    2420:	00fba223          	sw	x15,4(x23)
    2424:	00098513          	addi	x10,x19,0
    2428:	0fc000ef          	jal	x1,2524 <__malloc_unlock>
    242c:	00000513          	addi	x10,x0,0
    2430:	01812a03          	lw	x20,24(x2)
    2434:	01412a83          	lw	x21,20(x2)
    2438:	01012b03          	lw	x22,16(x2)
    243c:	00c12b83          	lw	x23,12(x2)
    2440:	00412c83          	lw	x25,4(x2)
    2444:	9a5ff06f          	jal	x0,1de8 <_malloc_r+0x8c>
    2448:	05400693          	addi	x13,x0,84
    244c:	04e6e463          	bltu	x13,x14,2494 <_malloc_r+0x738>
    2450:	00c7d713          	srli	x14,x15,0xc
    2454:	06f70613          	addi	x12,x14,111
    2458:	06e70693          	addi	x13,x14,110
    245c:	00361613          	slli	x12,x12,0x3
    2460:	ccdff06f          	jal	x0,212c <_malloc_r+0x3d0>
    2464:	15400713          	addi	x14,x0,340
    2468:	04f76463          	bltu	x14,x15,24b0 <_malloc_r+0x754>
    246c:	00f4d793          	srli	x15,x9,0xf
    2470:	07878593          	addi	x11,x15,120
    2474:	07778813          	addi	x16,x15,119
    2478:	00359613          	slli	x12,x11,0x3
    247c:	9c1ff06f          	jal	x0,1e3c <_malloc_r+0xe0>
    2480:	00892403          	lw	x8,8(x18)
    2484:	00442783          	lw	x15,4(x8)
    2488:	bfdff06f          	jal	x0,2084 <_malloc_r+0x328>
    248c:	8171a423          	sw	x23,-2040(x3) # 4960 <__malloc_sbrk_base>
    2490:	e81ff06f          	jal	x0,2310 <_malloc_r+0x5b4>
    2494:	15400693          	addi	x13,x0,340
    2498:	04e6e463          	bltu	x13,x14,24e0 <_malloc_r+0x784>
    249c:	00f7d713          	srli	x14,x15,0xf
    24a0:	07870613          	addi	x12,x14,120
    24a4:	07770693          	addi	x13,x14,119
    24a8:	00361613          	slli	x12,x12,0x3
    24ac:	c81ff06f          	jal	x0,212c <_malloc_r+0x3d0>
    24b0:	55400713          	addi	x14,x0,1364
    24b4:	04f76463          	bltu	x14,x15,24fc <_malloc_r+0x7a0>
    24b8:	0124d793          	srli	x15,x9,0x12
    24bc:	07d78593          	addi	x11,x15,125
    24c0:	07c78813          	addi	x16,x15,124
    24c4:	00359613          	slli	x12,x11,0x3
    24c8:	975ff06f          	jal	x0,1e3c <_malloc_r+0xe0>
    24cc:	ff8c8c93          	addi	x25,x25,-8
    24d0:	019a8ab3          	add	x21,x21,x25
    24d4:	417a8ab3          	sub	x21,x21,x23
    24d8:	00000a13          	addi	x20,x0,0
    24dc:	e7dff06f          	jal	x0,2358 <_malloc_r+0x5fc>
    24e0:	55400693          	addi	x13,x0,1364
    24e4:	02e6e463          	bltu	x13,x14,250c <_malloc_r+0x7b0>
    24e8:	0127d713          	srli	x14,x15,0x12
    24ec:	07d70613          	addi	x12,x14,125
    24f0:	07c70693          	addi	x13,x14,124
    24f4:	00361613          	slli	x12,x12,0x3
    24f8:	c35ff06f          	jal	x0,212c <_malloc_r+0x3d0>
    24fc:	3f800613          	addi	x12,x0,1016
    2500:	07f00593          	addi	x11,x0,127
    2504:	07e00813          	addi	x16,x0,126
    2508:	935ff06f          	jal	x0,1e3c <_malloc_r+0xe0>
    250c:	3f800613          	addi	x12,x0,1016
    2510:	07e00693          	addi	x13,x0,126
    2514:	c19ff06f          	jal	x0,212c <_malloc_r+0x3d0>
    2518:	00492783          	lw	x15,4(x18)
    251c:	d9dff06f          	jal	x0,22b8 <_malloc_r+0x55c>

00002520 <__malloc_lock>:
    2520:	00008067          	jalr	x0,0(x1)

00002524 <__malloc_unlock>:
    2524:	00008067          	jalr	x0,0(x1)

00002528 <_fclose_r>:
    2528:	ff010113          	addi	x2,x2,-16
    252c:	00112623          	sw	x1,12(x2)
    2530:	01212023          	sw	x18,0(x2)
    2534:	02058863          	beq	x11,x0,2564 <_fclose_r+0x3c>
    2538:	00812423          	sw	x8,8(x2)
    253c:	00912223          	sw	x9,4(x2)
    2540:	00058413          	addi	x8,x11,0
    2544:	00050493          	addi	x9,x10,0
    2548:	00050663          	beq	x10,x0,2554 <_fclose_r+0x2c>
    254c:	03452783          	lw	x15,52(x10)
    2550:	0c078c63          	beq	x15,x0,2628 <_fclose_r+0x100>
    2554:	00c41783          	lh	x15,12(x8)
    2558:	02079263          	bne	x15,x0,257c <_fclose_r+0x54>
    255c:	00812403          	lw	x8,8(x2)
    2560:	00412483          	lw	x9,4(x2)
    2564:	00c12083          	lw	x1,12(x2)
    2568:	00000913          	addi	x18,x0,0
    256c:	00090513          	addi	x10,x18,0
    2570:	00012903          	lw	x18,0(x2)
    2574:	01010113          	addi	x2,x2,16
    2578:	00008067          	jalr	x0,0(x1)
    257c:	00040593          	addi	x11,x8,0
    2580:	00048513          	addi	x10,x9,0
    2584:	0bc000ef          	jal	x1,2640 <__sflush_r>
    2588:	02c42783          	lw	x15,44(x8)
    258c:	00050913          	addi	x18,x10,0
    2590:	00078a63          	beq	x15,x0,25a4 <_fclose_r+0x7c>
    2594:	01c42583          	lw	x11,28(x8)
    2598:	00048513          	addi	x10,x9,0
    259c:	000780e7          	jalr	x1,0(x15)
    25a0:	06054463          	blt	x10,x0,2608 <_fclose_r+0xe0>
    25a4:	00c45783          	lhu	x15,12(x8)
    25a8:	0807f793          	andi	x15,x15,128
    25ac:	06079663          	bne	x15,x0,2618 <_fclose_r+0xf0>
    25b0:	03042583          	lw	x11,48(x8)
    25b4:	00058c63          	beq	x11,x0,25cc <_fclose_r+0xa4>
    25b8:	04040793          	addi	x15,x8,64
    25bc:	00f58663          	beq	x11,x15,25c8 <_fclose_r+0xa0>
    25c0:	00048513          	addi	x10,x9,0
    25c4:	c94ff0ef          	jal	x1,1a58 <_free_r>
    25c8:	02042823          	sw	x0,48(x8)
    25cc:	04442583          	lw	x11,68(x8)
    25d0:	00058863          	beq	x11,x0,25e0 <_fclose_r+0xb8>
    25d4:	00048513          	addi	x10,x9,0
    25d8:	c80ff0ef          	jal	x1,1a58 <_free_r>
    25dc:	04042223          	sw	x0,68(x8)
    25e0:	92dfe0ef          	jal	x1,f0c <__sfp_lock_acquire>
    25e4:	00041623          	sh	x0,12(x8)
    25e8:	929fe0ef          	jal	x1,f10 <__sfp_lock_release>
    25ec:	00c12083          	lw	x1,12(x2)
    25f0:	00812403          	lw	x8,8(x2)
    25f4:	00412483          	lw	x9,4(x2)
    25f8:	00090513          	addi	x10,x18,0
    25fc:	00012903          	lw	x18,0(x2)
    2600:	01010113          	addi	x2,x2,16
    2604:	00008067          	jalr	x0,0(x1)
    2608:	00c45783          	lhu	x15,12(x8)
    260c:	fff00913          	addi	x18,x0,-1
    2610:	0807f793          	andi	x15,x15,128
    2614:	f8078ee3          	beq	x15,x0,25b0 <_fclose_r+0x88>
    2618:	01042583          	lw	x11,16(x8)
    261c:	00048513          	addi	x10,x9,0
    2620:	c38ff0ef          	jal	x1,1a58 <_free_r>
    2624:	f8dff06f          	jal	x0,25b0 <_fclose_r+0x88>
    2628:	8c1fe0ef          	jal	x1,ee8 <__sinit>
    262c:	f29ff06f          	jal	x0,2554 <_fclose_r+0x2c>

00002630 <fclose>:
    2630:	000057b7          	lui	x15,0x5
    2634:	00050593          	addi	x11,x10,0
    2638:	95c7a503          	lw	x10,-1700(x15) # 495c <_impure_ptr>
    263c:	eedff06f          	jal	x0,2528 <_fclose_r>

00002640 <__sflush_r>:
    2640:	00c59703          	lh	x14,12(x11)
    2644:	fe010113          	addi	x2,x2,-32
    2648:	00812c23          	sw	x8,24(x2)
    264c:	01312623          	sw	x19,12(x2)
    2650:	00112e23          	sw	x1,28(x2)
    2654:	00877793          	andi	x15,x14,8
    2658:	00058413          	addi	x8,x11,0
    265c:	00050993          	addi	x19,x10,0
    2660:	12079063          	bne	x15,x0,2780 <__sflush_r+0x140>
    2664:	000017b7          	lui	x15,0x1
    2668:	80078793          	addi	x15,x15,-2048 # 800 <Proc_8+0x3c>
    266c:	0045a683          	lw	x13,4(x11)
    2670:	00f767b3          	or	x15,x14,x15
    2674:	00f59623          	sh	x15,12(x11)
    2678:	18d05263          	bge	x0,x13,27fc <__sflush_r+0x1bc>
    267c:	02842803          	lw	x16,40(x8)
    2680:	0e080463          	beq	x16,x0,2768 <__sflush_r+0x128>
    2684:	00912a23          	sw	x9,20(x2)
    2688:	01371693          	slli	x13,x14,0x13
    268c:	0009a483          	lw	x9,0(x19)
    2690:	0009a023          	sw	x0,0(x19)
    2694:	01c42583          	lw	x11,28(x8)
    2698:	1606ce63          	blt	x13,x0,2814 <__sflush_r+0x1d4>
    269c:	00000613          	addi	x12,x0,0
    26a0:	00100693          	addi	x13,x0,1
    26a4:	00098513          	addi	x10,x19,0
    26a8:	000800e7          	jalr	x1,0(x16)
    26ac:	fff00793          	addi	x15,x0,-1
    26b0:	00050613          	addi	x12,x10,0
    26b4:	1af50463          	beq	x10,x15,285c <__sflush_r+0x21c>
    26b8:	00c41783          	lh	x15,12(x8)
    26bc:	02842803          	lw	x16,40(x8)
    26c0:	01c42583          	lw	x11,28(x8)
    26c4:	0047f793          	andi	x15,x15,4
    26c8:	00078e63          	beq	x15,x0,26e4 <__sflush_r+0xa4>
    26cc:	00442703          	lw	x14,4(x8)
    26d0:	03042783          	lw	x15,48(x8)
    26d4:	40e60633          	sub	x12,x12,x14
    26d8:	00078663          	beq	x15,x0,26e4 <__sflush_r+0xa4>
    26dc:	03c42783          	lw	x15,60(x8)
    26e0:	40f60633          	sub	x12,x12,x15
    26e4:	00000693          	addi	x13,x0,0
    26e8:	00098513          	addi	x10,x19,0
    26ec:	000800e7          	jalr	x1,0(x16)
    26f0:	fff00793          	addi	x15,x0,-1
    26f4:	12f51463          	bne	x10,x15,281c <__sflush_r+0x1dc>
    26f8:	0009a683          	lw	x13,0(x19)
    26fc:	01d00793          	addi	x15,x0,29
    2700:	00c41703          	lh	x14,12(x8)
    2704:	16d7ea63          	bltu	x15,x13,2878 <__sflush_r+0x238>
    2708:	204007b7          	lui	x15,0x20400
    270c:	00178793          	addi	x15,x15,1 # 20400001 <__heap_end+0x20000001>
    2710:	00d7d7b3          	srl	x15,x15,x13
    2714:	0017f793          	andi	x15,x15,1
    2718:	16078063          	beq	x15,x0,2878 <__sflush_r+0x238>
    271c:	01042603          	lw	x12,16(x8)
    2720:	fffff7b7          	lui	x15,0xfffff
    2724:	7ff78793          	addi	x15,x15,2047 # fffff7ff <__heap_end+0xffbff7ff>
    2728:	00f777b3          	and	x15,x14,x15
    272c:	00f41623          	sh	x15,12(x8)
    2730:	00042223          	sw	x0,4(x8)
    2734:	00c42023          	sw	x12,0(x8)
    2738:	01371793          	slli	x15,x14,0x13
    273c:	0007d463          	bge	x15,x0,2744 <__sflush_r+0x104>
    2740:	10068263          	beq	x13,x0,2844 <__sflush_r+0x204>
    2744:	03042583          	lw	x11,48(x8)
    2748:	0099a023          	sw	x9,0(x19)
    274c:	10058463          	beq	x11,x0,2854 <__sflush_r+0x214>
    2750:	04040793          	addi	x15,x8,64
    2754:	00f58663          	beq	x11,x15,2760 <__sflush_r+0x120>
    2758:	00098513          	addi	x10,x19,0
    275c:	afcff0ef          	jal	x1,1a58 <_free_r>
    2760:	01412483          	lw	x9,20(x2)
    2764:	02042823          	sw	x0,48(x8)
    2768:	00000513          	addi	x10,x0,0
    276c:	01c12083          	lw	x1,28(x2)
    2770:	01812403          	lw	x8,24(x2)
    2774:	00c12983          	lw	x19,12(x2)
    2778:	02010113          	addi	x2,x2,32
    277c:	00008067          	jalr	x0,0(x1)
    2780:	01212823          	sw	x18,16(x2)
    2784:	0105a903          	lw	x18,16(x11)
    2788:	08090263          	beq	x18,x0,280c <__sflush_r+0x1cc>
    278c:	00912a23          	sw	x9,20(x2)
    2790:	0005a483          	lw	x9,0(x11)
    2794:	00377713          	andi	x14,x14,3
    2798:	0125a023          	sw	x18,0(x11)
    279c:	412484b3          	sub	x9,x9,x18
    27a0:	00000793          	addi	x15,x0,0
    27a4:	00071463          	bne	x14,x0,27ac <__sflush_r+0x16c>
    27a8:	0145a783          	lw	x15,20(x11)
    27ac:	00f42423          	sw	x15,8(x8)
    27b0:	00904863          	blt	x0,x9,27c0 <__sflush_r+0x180>
    27b4:	0540006f          	jal	x0,2808 <__sflush_r+0x1c8>
    27b8:	00a90933          	add	x18,x18,x10
    27bc:	04905663          	bge	x0,x9,2808 <__sflush_r+0x1c8>
    27c0:	02442783          	lw	x15,36(x8)
    27c4:	01c42583          	lw	x11,28(x8)
    27c8:	00048693          	addi	x13,x9,0
    27cc:	00090613          	addi	x12,x18,0
    27d0:	00098513          	addi	x10,x19,0
    27d4:	000780e7          	jalr	x1,0(x15)
    27d8:	40a484b3          	sub	x9,x9,x10
    27dc:	fca04ee3          	blt	x0,x10,27b8 <__sflush_r+0x178>
    27e0:	00c41703          	lh	x14,12(x8)
    27e4:	01012903          	lw	x18,16(x2)
    27e8:	04076713          	ori	x14,x14,64
    27ec:	01412483          	lw	x9,20(x2)
    27f0:	00e41623          	sh	x14,12(x8)
    27f4:	fff00513          	addi	x10,x0,-1
    27f8:	f75ff06f          	jal	x0,276c <__sflush_r+0x12c>
    27fc:	03c5a683          	lw	x13,60(x11)
    2800:	e6d04ee3          	blt	x0,x13,267c <__sflush_r+0x3c>
    2804:	f65ff06f          	jal	x0,2768 <__sflush_r+0x128>
    2808:	01412483          	lw	x9,20(x2)
    280c:	01012903          	lw	x18,16(x2)
    2810:	f59ff06f          	jal	x0,2768 <__sflush_r+0x128>
    2814:	05042603          	lw	x12,80(x8)
    2818:	eadff06f          	jal	x0,26c4 <__sflush_r+0x84>
    281c:	00c41703          	lh	x14,12(x8)
    2820:	01042683          	lw	x13,16(x8)
    2824:	fffff7b7          	lui	x15,0xfffff
    2828:	7ff78793          	addi	x15,x15,2047 # fffff7ff <__heap_end+0xffbff7ff>
    282c:	00f777b3          	and	x15,x14,x15
    2830:	00f41623          	sh	x15,12(x8)
    2834:	00042223          	sw	x0,4(x8)
    2838:	00d42023          	sw	x13,0(x8)
    283c:	01371793          	slli	x15,x14,0x13
    2840:	f007d2e3          	bge	x15,x0,2744 <__sflush_r+0x104>
    2844:	03042583          	lw	x11,48(x8)
    2848:	04a42823          	sw	x10,80(x8)
    284c:	0099a023          	sw	x9,0(x19)
    2850:	f00590e3          	bne	x11,x0,2750 <__sflush_r+0x110>
    2854:	01412483          	lw	x9,20(x2)
    2858:	f11ff06f          	jal	x0,2768 <__sflush_r+0x128>
    285c:	0009a783          	lw	x15,0(x19)
    2860:	e4078ce3          	beq	x15,x0,26b8 <__sflush_r+0x78>
    2864:	01d00713          	addi	x14,x0,29
    2868:	00e78c63          	beq	x15,x14,2880 <__sflush_r+0x240>
    286c:	01600713          	addi	x14,x0,22
    2870:	00e78863          	beq	x15,x14,2880 <__sflush_r+0x240>
    2874:	00c41703          	lh	x14,12(x8)
    2878:	04076713          	ori	x14,x14,64
    287c:	f71ff06f          	jal	x0,27ec <__sflush_r+0x1ac>
    2880:	0099a023          	sw	x9,0(x19)
    2884:	01412483          	lw	x9,20(x2)
    2888:	ee1ff06f          	jal	x0,2768 <__sflush_r+0x128>

0000288c <_fflush_r>:
    288c:	fe010113          	addi	x2,x2,-32
    2890:	00812c23          	sw	x8,24(x2)
    2894:	00112e23          	sw	x1,28(x2)
    2898:	00050413          	addi	x8,x10,0
    289c:	00050663          	beq	x10,x0,28a8 <_fflush_r+0x1c>
    28a0:	03452783          	lw	x15,52(x10)
    28a4:	02078a63          	beq	x15,x0,28d8 <_fflush_r+0x4c>
    28a8:	00c59783          	lh	x15,12(x11)
    28ac:	00079c63          	bne	x15,x0,28c4 <_fflush_r+0x38>
    28b0:	01c12083          	lw	x1,28(x2)
    28b4:	01812403          	lw	x8,24(x2)
    28b8:	00000513          	addi	x10,x0,0
    28bc:	02010113          	addi	x2,x2,32
    28c0:	00008067          	jalr	x0,0(x1)
    28c4:	00040513          	addi	x10,x8,0
    28c8:	01812403          	lw	x8,24(x2)
    28cc:	01c12083          	lw	x1,28(x2)
    28d0:	02010113          	addi	x2,x2,32
    28d4:	d6dff06f          	jal	x0,2640 <__sflush_r>
    28d8:	00b12623          	sw	x11,12(x2)
    28dc:	e0cfe0ef          	jal	x1,ee8 <__sinit>
    28e0:	00c12583          	lw	x11,12(x2)
    28e4:	fc5ff06f          	jal	x0,28a8 <_fflush_r+0x1c>

000028e8 <fflush>:
    28e8:	06050263          	beq	x10,x0,294c <fflush+0x64>
    28ec:	000057b7          	lui	x15,0x5
    28f0:	00050593          	addi	x11,x10,0
    28f4:	95c7a503          	lw	x10,-1700(x15) # 495c <_impure_ptr>
    28f8:	00050663          	beq	x10,x0,2904 <fflush+0x1c>
    28fc:	03452783          	lw	x15,52(x10)
    2900:	00078c63          	beq	x15,x0,2918 <fflush+0x30>
    2904:	00c59783          	lh	x15,12(x11)
    2908:	00079663          	bne	x15,x0,2914 <fflush+0x2c>
    290c:	00000513          	addi	x10,x0,0
    2910:	00008067          	jalr	x0,0(x1)
    2914:	d2dff06f          	jal	x0,2640 <__sflush_r>
    2918:	fe010113          	addi	x2,x2,-32
    291c:	00b12623          	sw	x11,12(x2)
    2920:	00a12423          	sw	x10,8(x2)
    2924:	00112e23          	sw	x1,28(x2)
    2928:	dc0fe0ef          	jal	x1,ee8 <__sinit>
    292c:	00c12583          	lw	x11,12(x2)
    2930:	00812503          	lw	x10,8(x2)
    2934:	00c59783          	lh	x15,12(x11)
    2938:	02079863          	bne	x15,x0,2968 <fflush+0x80>
    293c:	01c12083          	lw	x1,28(x2)
    2940:	00000513          	addi	x10,x0,0
    2944:	02010113          	addi	x2,x2,32
    2948:	00008067          	jalr	x0,0(x1)
    294c:	00004637          	lui	x12,0x4
    2950:	000035b7          	lui	x11,0x3
    2954:	00004537          	lui	x10,0x4
    2958:	42060613          	addi	x12,x12,1056 # 4420 <__sglue>
    295c:	88c58593          	addi	x11,x11,-1908 # 288c <_fflush_r>
    2960:	43050513          	addi	x10,x10,1072 # 4430 <_impure_data>
    2964:	de0fe06f          	jal	x0,f44 <_fwalk_sglue>
    2968:	01c12083          	lw	x1,28(x2)
    296c:	02010113          	addi	x2,x2,32
    2970:	cd1ff06f          	jal	x0,2640 <__sflush_r>

00002974 <__sfvwrite_r>:
    2974:	00862783          	lw	x15,8(x12)
    2978:	2c078463          	beq	x15,x0,2c40 <__sfvwrite_r+0x2cc>
    297c:	00c59683          	lh	x13,12(x11)
    2980:	fd010113          	addi	x2,x2,-48
    2984:	02812423          	sw	x8,40(x2)
    2988:	01412c23          	sw	x20,24(x2)
    298c:	01612823          	sw	x22,16(x2)
    2990:	02112623          	sw	x1,44(x2)
    2994:	0086f793          	andi	x15,x13,8
    2998:	00060b13          	addi	x22,x12,0
    299c:	00050a13          	addi	x20,x10,0
    29a0:	00058413          	addi	x8,x11,0
    29a4:	08078e63          	beq	x15,x0,2a40 <__sfvwrite_r+0xcc>
    29a8:	0105a783          	lw	x15,16(x11)
    29ac:	08078a63          	beq	x15,x0,2a40 <__sfvwrite_r+0xcc>
    29b0:	02912223          	sw	x9,36(x2)
    29b4:	03212023          	sw	x18,32(x2)
    29b8:	01312e23          	sw	x19,28(x2)
    29bc:	01512a23          	sw	x21,20(x2)
    29c0:	0026f793          	andi	x15,x13,2
    29c4:	000b2483          	lw	x9,0(x22)
    29c8:	0a078463          	beq	x15,x0,2a70 <__sfvwrite_r+0xfc>
    29cc:	02442783          	lw	x15,36(x8)
    29d0:	01c42583          	lw	x11,28(x8)
    29d4:	80000ab7          	lui	x21,0x80000
    29d8:	00000993          	addi	x19,x0,0
    29dc:	00000913          	addi	x18,x0,0
    29e0:	c00a8a93          	addi	x21,x21,-1024 # 7ffffc00 <__heap_end+0x7fbffc00>
    29e4:	00098613          	addi	x12,x19,0
    29e8:	000a0513          	addi	x10,x20,0
    29ec:	04090263          	beq	x18,x0,2a30 <__sfvwrite_r+0xbc>
    29f0:	00090693          	addi	x13,x18,0
    29f4:	012af463          	bgeu	x21,x18,29fc <__sfvwrite_r+0x88>
    29f8:	000a8693          	addi	x13,x21,0
    29fc:	000780e7          	jalr	x1,0(x15)
    2a00:	46a05063          	bge	x0,x10,2e60 <__sfvwrite_r+0x4ec>
    2a04:	008b2783          	lw	x15,8(x22)
    2a08:	00a989b3          	add	x19,x19,x10
    2a0c:	40a90933          	sub	x18,x18,x10
    2a10:	40a787b3          	sub	x15,x15,x10
    2a14:	00fb2423          	sw	x15,8(x22)
    2a18:	1a078663          	beq	x15,x0,2bc4 <__sfvwrite_r+0x250>
    2a1c:	02442783          	lw	x15,36(x8)
    2a20:	01c42583          	lw	x11,28(x8)
    2a24:	00098613          	addi	x12,x19,0
    2a28:	000a0513          	addi	x10,x20,0
    2a2c:	fc0912e3          	bne	x18,x0,29f0 <__sfvwrite_r+0x7c>
    2a30:	0004a983          	lw	x19,0(x9)
    2a34:	0044a903          	lw	x18,4(x9)
    2a38:	00848493          	addi	x9,x9,8
    2a3c:	fa9ff06f          	jal	x0,29e4 <__sfvwrite_r+0x70>
    2a40:	00040593          	addi	x11,x8,0
    2a44:	000a0513          	addi	x10,x20,0
    2a48:	6ec000ef          	jal	x1,3134 <__swsetup_r>
    2a4c:	1c051c63          	bne	x10,x0,2c24 <__sfvwrite_r+0x2b0>
    2a50:	00c41683          	lh	x13,12(x8)
    2a54:	02912223          	sw	x9,36(x2)
    2a58:	03212023          	sw	x18,32(x2)
    2a5c:	01312e23          	sw	x19,28(x2)
    2a60:	01512a23          	sw	x21,20(x2)
    2a64:	0026f793          	andi	x15,x13,2
    2a68:	000b2483          	lw	x9,0(x22)
    2a6c:	f60790e3          	bne	x15,x0,29cc <__sfvwrite_r+0x58>
    2a70:	01712623          	sw	x23,12(x2)
    2a74:	01812423          	sw	x24,8(x2)
    2a78:	0016f793          	andi	x15,x13,1
    2a7c:	1c079663          	bne	x15,x0,2c48 <__sfvwrite_r+0x2d4>
    2a80:	00042783          	lw	x15,0(x8)
    2a84:	00842703          	lw	x14,8(x8)
    2a88:	80000ab7          	lui	x21,0x80000
    2a8c:	01912223          	sw	x25,4(x2)
    2a90:	00000b93          	addi	x23,x0,0
    2a94:	00000993          	addi	x19,x0,0
    2a98:	fffa8a93          	addi	x21,x21,-1 # 7fffffff <__heap_end+0x7fbfffff>
    2a9c:	00078513          	addi	x10,x15,0
    2aa0:	00070c13          	addi	x24,x14,0
    2aa4:	10098263          	beq	x19,x0,2ba8 <__sfvwrite_r+0x234>
    2aa8:	2006f613          	andi	x12,x13,512
    2aac:	28060863          	beq	x12,x0,2d3c <__sfvwrite_r+0x3c8>
    2ab0:	00070c93          	addi	x25,x14,0
    2ab4:	32e9e663          	bltu	x19,x14,2de0 <__sfvwrite_r+0x46c>
    2ab8:	4806f713          	andi	x14,x13,1152
    2abc:	08070a63          	beq	x14,x0,2b50 <__sfvwrite_r+0x1dc>
    2ac0:	01442603          	lw	x12,20(x8)
    2ac4:	01042583          	lw	x11,16(x8)
    2ac8:	00161713          	slli	x14,x12,0x1
    2acc:	00c70733          	add	x14,x14,x12
    2ad0:	40b78933          	sub	x18,x15,x11
    2ad4:	01f75c13          	srli	x24,x14,0x1f
    2ad8:	00ec0c33          	add	x24,x24,x14
    2adc:	00190793          	addi	x15,x18,1
    2ae0:	401c5c13          	srai	x24,x24,0x1
    2ae4:	013787b3          	add	x15,x15,x19
    2ae8:	000c0613          	addi	x12,x24,0
    2aec:	00fc7663          	bgeu	x24,x15,2af8 <__sfvwrite_r+0x184>
    2af0:	00078c13          	addi	x24,x15,0
    2af4:	00078613          	addi	x12,x15,0
    2af8:	4006f693          	andi	x13,x13,1024
    2afc:	30068e63          	beq	x13,x0,2e18 <__sfvwrite_r+0x4a4>
    2b00:	00060593          	addi	x11,x12,0
    2b04:	000a0513          	addi	x10,x20,0
    2b08:	a54ff0ef          	jal	x1,1d5c <_malloc_r>
    2b0c:	00050c93          	addi	x25,x10,0
    2b10:	34050c63          	beq	x10,x0,2e68 <__sfvwrite_r+0x4f4>
    2b14:	01042583          	lw	x11,16(x8)
    2b18:	00090613          	addi	x12,x18,0
    2b1c:	a17fd0ef          	jal	x1,532 <memcpy>
    2b20:	00c45783          	lhu	x15,12(x8)
    2b24:	b7f7f793          	andi	x15,x15,-1153
    2b28:	0807e793          	ori	x15,x15,128
    2b2c:	00f41623          	sh	x15,12(x8)
    2b30:	012c8533          	add	x10,x25,x18
    2b34:	412c07b3          	sub	x15,x24,x18
    2b38:	01942823          	sw	x25,16(x8)
    2b3c:	01842a23          	sw	x24,20(x8)
    2b40:	00a42023          	sw	x10,0(x8)
    2b44:	00098c13          	addi	x24,x19,0
    2b48:	00f42423          	sw	x15,8(x8)
    2b4c:	00098c93          	addi	x25,x19,0
    2b50:	000c8613          	addi	x12,x25,0
    2b54:	000b8593          	addi	x11,x23,0
    2b58:	041000ef          	jal	x1,3398 <memmove>
    2b5c:	00842703          	lw	x14,8(x8)
    2b60:	00042783          	lw	x15,0(x8)
    2b64:	00098913          	addi	x18,x19,0
    2b68:	41870733          	sub	x14,x14,x24
    2b6c:	019787b3          	add	x15,x15,x25
    2b70:	00e42423          	sw	x14,8(x8)
    2b74:	00f42023          	sw	x15,0(x8)
    2b78:	00000993          	addi	x19,x0,0
    2b7c:	008b2783          	lw	x15,8(x22)
    2b80:	012b8bb3          	add	x23,x23,x18
    2b84:	412787b3          	sub	x15,x15,x18
    2b88:	00fb2423          	sw	x15,8(x22)
    2b8c:	02078663          	beq	x15,x0,2bb8 <__sfvwrite_r+0x244>
    2b90:	00042783          	lw	x15,0(x8)
    2b94:	00842703          	lw	x14,8(x8)
    2b98:	00c41683          	lh	x13,12(x8)
    2b9c:	00078513          	addi	x10,x15,0
    2ba0:	00070c13          	addi	x24,x14,0
    2ba4:	f00992e3          	bne	x19,x0,2aa8 <__sfvwrite_r+0x134>
    2ba8:	0004ab83          	lw	x23,0(x9)
    2bac:	0044a983          	lw	x19,4(x9)
    2bb0:	00848493          	addi	x9,x9,8
    2bb4:	ee9ff06f          	jal	x0,2a9c <__sfvwrite_r+0x128>
    2bb8:	00c12b83          	lw	x23,12(x2)
    2bbc:	00812c03          	lw	x24,8(x2)
    2bc0:	00412c83          	lw	x25,4(x2)
    2bc4:	02c12083          	lw	x1,44(x2)
    2bc8:	02812403          	lw	x8,40(x2)
    2bcc:	02412483          	lw	x9,36(x2)
    2bd0:	02012903          	lw	x18,32(x2)
    2bd4:	01c12983          	lw	x19,28(x2)
    2bd8:	01412a83          	lw	x21,20(x2)
    2bdc:	01812a03          	lw	x20,24(x2)
    2be0:	01012b03          	lw	x22,16(x2)
    2be4:	00000513          	addi	x10,x0,0
    2be8:	03010113          	addi	x2,x2,48
    2bec:	00008067          	jalr	x0,0(x1)
    2bf0:	00040593          	addi	x11,x8,0
    2bf4:	000a0513          	addi	x10,x20,0
    2bf8:	c95ff0ef          	jal	x1,288c <_fflush_r>
    2bfc:	0a050e63          	beq	x10,x0,2cb8 <__sfvwrite_r+0x344>
    2c00:	00c41783          	lh	x15,12(x8)
    2c04:	00c12b83          	lw	x23,12(x2)
    2c08:	00812c03          	lw	x24,8(x2)
    2c0c:	02412483          	lw	x9,36(x2)
    2c10:	02012903          	lw	x18,32(x2)
    2c14:	01c12983          	lw	x19,28(x2)
    2c18:	01412a83          	lw	x21,20(x2)
    2c1c:	0407e793          	ori	x15,x15,64
    2c20:	00f41623          	sh	x15,12(x8)
    2c24:	02c12083          	lw	x1,44(x2)
    2c28:	02812403          	lw	x8,40(x2)
    2c2c:	01812a03          	lw	x20,24(x2)
    2c30:	01012b03          	lw	x22,16(x2)
    2c34:	fff00513          	addi	x10,x0,-1
    2c38:	03010113          	addi	x2,x2,48
    2c3c:	00008067          	jalr	x0,0(x1)
    2c40:	00000513          	addi	x10,x0,0
    2c44:	00008067          	jalr	x0,0(x1)
    2c48:	00000a93          	addi	x21,x0,0
    2c4c:	00000513          	addi	x10,x0,0
    2c50:	00000c13          	addi	x24,x0,0
    2c54:	00000993          	addi	x19,x0,0
    2c58:	08098263          	beq	x19,x0,2cdc <__sfvwrite_r+0x368>
    2c5c:	08050a63          	beq	x10,x0,2cf0 <__sfvwrite_r+0x37c>
    2c60:	000a8793          	addi	x15,x21,0
    2c64:	00098b93          	addi	x23,x19,0
    2c68:	0137f463          	bgeu	x15,x19,2c70 <__sfvwrite_r+0x2fc>
    2c6c:	00078b93          	addi	x23,x15,0
    2c70:	00042503          	lw	x10,0(x8)
    2c74:	01042783          	lw	x15,16(x8)
    2c78:	00842903          	lw	x18,8(x8)
    2c7c:	01442683          	lw	x13,20(x8)
    2c80:	00a7f663          	bgeu	x15,x10,2c8c <__sfvwrite_r+0x318>
    2c84:	00d90933          	add	x18,x18,x13
    2c88:	09794463          	blt	x18,x23,2d10 <__sfvwrite_r+0x39c>
    2c8c:	16dbc063          	blt	x23,x13,2dec <__sfvwrite_r+0x478>
    2c90:	02442783          	lw	x15,36(x8)
    2c94:	01c42583          	lw	x11,28(x8)
    2c98:	000c0613          	addi	x12,x24,0
    2c9c:	000a0513          	addi	x10,x20,0
    2ca0:	000780e7          	jalr	x1,0(x15)
    2ca4:	00050913          	addi	x18,x10,0
    2ca8:	f4a05ce3          	bge	x0,x10,2c00 <__sfvwrite_r+0x28c>
    2cac:	412a8ab3          	sub	x21,x21,x18
    2cb0:	00100513          	addi	x10,x0,1
    2cb4:	f20a8ee3          	beq	x21,x0,2bf0 <__sfvwrite_r+0x27c>
    2cb8:	008b2783          	lw	x15,8(x22)
    2cbc:	012c0c33          	add	x24,x24,x18
    2cc0:	412989b3          	sub	x19,x19,x18
    2cc4:	412787b3          	sub	x15,x15,x18
    2cc8:	00fb2423          	sw	x15,8(x22)
    2ccc:	f80796e3          	bne	x15,x0,2c58 <__sfvwrite_r+0x2e4>
    2cd0:	00c12b83          	lw	x23,12(x2)
    2cd4:	00812c03          	lw	x24,8(x2)
    2cd8:	eedff06f          	jal	x0,2bc4 <__sfvwrite_r+0x250>
    2cdc:	0044a983          	lw	x19,4(x9)
    2ce0:	00048793          	addi	x15,x9,0
    2ce4:	00848493          	addi	x9,x9,8
    2ce8:	fe098ae3          	beq	x19,x0,2cdc <__sfvwrite_r+0x368>
    2cec:	0007ac03          	lw	x24,0(x15)
    2cf0:	00098613          	addi	x12,x19,0
    2cf4:	00a00593          	addi	x11,x0,10
    2cf8:	000c0513          	addi	x10,x24,0
    2cfc:	57c000ef          	jal	x1,3278 <memchr>
    2d00:	14050a63          	beq	x10,x0,2e54 <__sfvwrite_r+0x4e0>
    2d04:	00150513          	addi	x10,x10,1
    2d08:	41850ab3          	sub	x21,x10,x24
    2d0c:	f55ff06f          	jal	x0,2c60 <__sfvwrite_r+0x2ec>
    2d10:	000c0593          	addi	x11,x24,0
    2d14:	00090613          	addi	x12,x18,0
    2d18:	680000ef          	jal	x1,3398 <memmove>
    2d1c:	00042783          	lw	x15,0(x8)
    2d20:	00040593          	addi	x11,x8,0
    2d24:	000a0513          	addi	x10,x20,0
    2d28:	012787b3          	add	x15,x15,x18
    2d2c:	00f42023          	sw	x15,0(x8)
    2d30:	b5dff0ef          	jal	x1,288c <_fflush_r>
    2d34:	f6050ce3          	beq	x10,x0,2cac <__sfvwrite_r+0x338>
    2d38:	ec9ff06f          	jal	x0,2c00 <__sfvwrite_r+0x28c>
    2d3c:	01042683          	lw	x13,16(x8)
    2d40:	04f6e263          	bltu	x13,x15,2d84 <__sfvwrite_r+0x410>
    2d44:	01442603          	lw	x12,20(x8)
    2d48:	02c9ee63          	bltu	x19,x12,2d84 <__sfvwrite_r+0x410>
    2d4c:	00098793          	addi	x15,x19,0
    2d50:	013af463          	bgeu	x21,x19,2d58 <__sfvwrite_r+0x3e4>
    2d54:	000a8793          	addi	x15,x21,0
    2d58:	02c7e6b3          	rem	x13,x15,x12
    2d5c:	02442703          	lw	x14,36(x8)
    2d60:	01c42583          	lw	x11,28(x8)
    2d64:	000b8613          	addi	x12,x23,0
    2d68:	000a0513          	addi	x10,x20,0
    2d6c:	40d786b3          	sub	x13,x15,x13
    2d70:	000700e7          	jalr	x1,0(x14)
    2d74:	00050913          	addi	x18,x10,0
    2d78:	04a05a63          	bge	x0,x10,2dcc <__sfvwrite_r+0x458>
    2d7c:	412989b3          	sub	x19,x19,x18
    2d80:	dfdff06f          	jal	x0,2b7c <__sfvwrite_r+0x208>
    2d84:	00070913          	addi	x18,x14,0
    2d88:	00e9f463          	bgeu	x19,x14,2d90 <__sfvwrite_r+0x41c>
    2d8c:	00098913          	addi	x18,x19,0
    2d90:	00078513          	addi	x10,x15,0
    2d94:	00090613          	addi	x12,x18,0
    2d98:	000b8593          	addi	x11,x23,0
    2d9c:	5fc000ef          	jal	x1,3398 <memmove>
    2da0:	00842703          	lw	x14,8(x8)
    2da4:	00042783          	lw	x15,0(x8)
    2da8:	41270733          	sub	x14,x14,x18
    2dac:	012787b3          	add	x15,x15,x18
    2db0:	00e42423          	sw	x14,8(x8)
    2db4:	00f42023          	sw	x15,0(x8)
    2db8:	fc0712e3          	bne	x14,x0,2d7c <__sfvwrite_r+0x408>
    2dbc:	00040593          	addi	x11,x8,0
    2dc0:	000a0513          	addi	x10,x20,0
    2dc4:	ac9ff0ef          	jal	x1,288c <_fflush_r>
    2dc8:	fa050ae3          	beq	x10,x0,2d7c <__sfvwrite_r+0x408>
    2dcc:	00c41783          	lh	x15,12(x8)
    2dd0:	00c12b83          	lw	x23,12(x2)
    2dd4:	00812c03          	lw	x24,8(x2)
    2dd8:	00412c83          	lw	x25,4(x2)
    2ddc:	e31ff06f          	jal	x0,2c0c <__sfvwrite_r+0x298>
    2de0:	00098c13          	addi	x24,x19,0
    2de4:	00098c93          	addi	x25,x19,0
    2de8:	d69ff06f          	jal	x0,2b50 <__sfvwrite_r+0x1dc>
    2dec:	000b8613          	addi	x12,x23,0
    2df0:	000c0593          	addi	x11,x24,0
    2df4:	5a4000ef          	jal	x1,3398 <memmove>
    2df8:	00842703          	lw	x14,8(x8)
    2dfc:	00042783          	lw	x15,0(x8)
    2e00:	000b8913          	addi	x18,x23,0
    2e04:	41770733          	sub	x14,x14,x23
    2e08:	017787b3          	add	x15,x15,x23
    2e0c:	00e42423          	sw	x14,8(x8)
    2e10:	00f42023          	sw	x15,0(x8)
    2e14:	e99ff06f          	jal	x0,2cac <__sfvwrite_r+0x338>
    2e18:	000a0513          	addi	x10,x20,0
    2e1c:	688000ef          	jal	x1,34a4 <_realloc_r>
    2e20:	00050c93          	addi	x25,x10,0
    2e24:	d00516e3          	bne	x10,x0,2b30 <__sfvwrite_r+0x1bc>
    2e28:	01042583          	lw	x11,16(x8)
    2e2c:	000a0513          	addi	x10,x20,0
    2e30:	c29fe0ef          	jal	x1,1a58 <_free_r>
    2e34:	00c41783          	lh	x15,12(x8)
    2e38:	00c00713          	addi	x14,x0,12
    2e3c:	00c12b83          	lw	x23,12(x2)
    2e40:	00812c03          	lw	x24,8(x2)
    2e44:	00412c83          	lw	x25,4(x2)
    2e48:	00ea2023          	sw	x14,0(x20)
    2e4c:	f7f7f793          	andi	x15,x15,-129
    2e50:	dbdff06f          	jal	x0,2c0c <__sfvwrite_r+0x298>
    2e54:	00198793          	addi	x15,x19,1
    2e58:	00078a93          	addi	x21,x15,0
    2e5c:	e09ff06f          	jal	x0,2c64 <__sfvwrite_r+0x2f0>
    2e60:	00c41783          	lh	x15,12(x8)
    2e64:	da9ff06f          	jal	x0,2c0c <__sfvwrite_r+0x298>
    2e68:	00c00713          	addi	x14,x0,12
    2e6c:	00c41783          	lh	x15,12(x8)
    2e70:	00c12b83          	lw	x23,12(x2)
    2e74:	00812c03          	lw	x24,8(x2)
    2e78:	00412c83          	lw	x25,4(x2)
    2e7c:	00ea2023          	sw	x14,0(x20)
    2e80:	d8dff06f          	jal	x0,2c0c <__sfvwrite_r+0x298>

00002e84 <_putc_r>:
    2e84:	fe010113          	addi	x2,x2,-32
    2e88:	00812c23          	sw	x8,24(x2)
    2e8c:	00112e23          	sw	x1,28(x2)
    2e90:	00050413          	addi	x8,x10,0
    2e94:	00050663          	beq	x10,x0,2ea0 <_putc_r+0x1c>
    2e98:	03452783          	lw	x15,52(x10)
    2e9c:	06078063          	beq	x15,x0,2efc <_putc_r+0x78>
    2ea0:	00862783          	lw	x15,8(x12)
    2ea4:	fff78793          	addi	x15,x15,-1
    2ea8:	00f62423          	sw	x15,8(x12)
    2eac:	0007dc63          	bge	x15,x0,2ec4 <_putc_r+0x40>
    2eb0:	01862703          	lw	x14,24(x12)
    2eb4:	02e7ca63          	blt	x15,x14,2ee8 <_putc_r+0x64>
    2eb8:	0ff5f793          	andi	x15,x11,255
    2ebc:	00a00713          	addi	x14,x0,10
    2ec0:	02e78463          	beq	x15,x14,2ee8 <_putc_r+0x64>
    2ec4:	00062783          	lw	x15,0(x12)
    2ec8:	0ff5f513          	andi	x10,x11,255
    2ecc:	00178713          	addi	x14,x15,1
    2ed0:	00e62023          	sw	x14,0(x12)
    2ed4:	00b78023          	sb	x11,0(x15)
    2ed8:	01c12083          	lw	x1,28(x2)
    2edc:	01812403          	lw	x8,24(x2)
    2ee0:	02010113          	addi	x2,x2,32
    2ee4:	00008067          	jalr	x0,0(x1)
    2ee8:	00040513          	addi	x10,x8,0
    2eec:	01812403          	lw	x8,24(x2)
    2ef0:	01c12083          	lw	x1,28(x2)
    2ef4:	02010113          	addi	x2,x2,32
    2ef8:	0c40006f          	jal	x0,2fbc <__swbuf_r>
    2efc:	00c12623          	sw	x12,12(x2)
    2f00:	00b12423          	sw	x11,8(x2)
    2f04:	fe5fd0ef          	jal	x1,ee8 <__sinit>
    2f08:	00c12603          	lw	x12,12(x2)
    2f0c:	00812583          	lw	x11,8(x2)
    2f10:	f91ff06f          	jal	x0,2ea0 <_putc_r+0x1c>

00002f14 <putc>:
    2f14:	fe010113          	addi	x2,x2,-32
    2f18:	000057b7          	lui	x15,0x5
    2f1c:	01212a23          	sw	x18,20(x2)
    2f20:	95c7a903          	lw	x18,-1700(x15) # 495c <_impure_ptr>
    2f24:	00912c23          	sw	x9,24(x2)
    2f28:	00112e23          	sw	x1,28(x2)
    2f2c:	00050493          	addi	x9,x10,0
    2f30:	00090663          	beq	x18,x0,2f3c <putc+0x28>
    2f34:	03492783          	lw	x15,52(x18)
    2f38:	06078863          	beq	x15,x0,2fa8 <putc+0x94>
    2f3c:	0085a783          	lw	x15,8(x11)
    2f40:	fff78793          	addi	x15,x15,-1
    2f44:	00f5a423          	sw	x15,8(x11)
    2f48:	0007dc63          	bge	x15,x0,2f60 <putc+0x4c>
    2f4c:	0185a703          	lw	x14,24(x11)
    2f50:	02e7cc63          	blt	x15,x14,2f88 <putc+0x74>
    2f54:	0ff4f793          	andi	x15,x9,255
    2f58:	00a00713          	addi	x14,x0,10
    2f5c:	02e78663          	beq	x15,x14,2f88 <putc+0x74>
    2f60:	0005a783          	lw	x15,0(x11)
    2f64:	0ff4f513          	andi	x10,x9,255
    2f68:	00178713          	addi	x14,x15,1
    2f6c:	00e5a023          	sw	x14,0(x11)
    2f70:	00978023          	sb	x9,0(x15)
    2f74:	01c12083          	lw	x1,28(x2)
    2f78:	01812483          	lw	x9,24(x2)
    2f7c:	01412903          	lw	x18,20(x2)
    2f80:	02010113          	addi	x2,x2,32
    2f84:	00008067          	jalr	x0,0(x1)
    2f88:	01c12083          	lw	x1,28(x2)
    2f8c:	00058613          	addi	x12,x11,0
    2f90:	00090513          	addi	x10,x18,0
    2f94:	00048593          	addi	x11,x9,0
    2f98:	01412903          	lw	x18,20(x2)
    2f9c:	01812483          	lw	x9,24(x2)
    2fa0:	02010113          	addi	x2,x2,32
    2fa4:	0180006f          	jal	x0,2fbc <__swbuf_r>
    2fa8:	00090513          	addi	x10,x18,0
    2fac:	00b12623          	sw	x11,12(x2)
    2fb0:	f39fd0ef          	jal	x1,ee8 <__sinit>
    2fb4:	00c12583          	lw	x11,12(x2)
    2fb8:	f85ff06f          	jal	x0,2f3c <putc+0x28>

00002fbc <__swbuf_r>:
    2fbc:	fe010113          	addi	x2,x2,-32
    2fc0:	00812c23          	sw	x8,24(x2)
    2fc4:	00912a23          	sw	x9,20(x2)
    2fc8:	01212823          	sw	x18,16(x2)
    2fcc:	00112e23          	sw	x1,28(x2)
    2fd0:	00050913          	addi	x18,x10,0
    2fd4:	00058493          	addi	x9,x11,0
    2fd8:	00060413          	addi	x8,x12,0
    2fdc:	00050663          	beq	x10,x0,2fe8 <__swbuf_r+0x2c>
    2fe0:	03452783          	lw	x15,52(x10)
    2fe4:	12078863          	beq	x15,x0,3114 <__swbuf_r+0x158>
    2fe8:	01842703          	lw	x14,24(x8)
    2fec:	00c41783          	lh	x15,12(x8)
    2ff0:	00e42423          	sw	x14,8(x8)
    2ff4:	0087f713          	andi	x14,x15,8
    2ff8:	08070863          	beq	x14,x0,3088 <__swbuf_r+0xcc>
    2ffc:	01042703          	lw	x14,16(x8)
    3000:	08070463          	beq	x14,x0,3088 <__swbuf_r+0xcc>
    3004:	01312623          	sw	x19,12(x2)
    3008:	01279693          	slli	x13,x15,0x12
    300c:	0ff4f993          	andi	x19,x9,255
    3010:	06442703          	lw	x14,100(x8)
    3014:	0ff4f493          	andi	x9,x9,255
    3018:	0806de63          	bge	x13,x0,30b4 <__swbuf_r+0xf8>
    301c:	01271793          	slli	x15,x14,0x12
    3020:	0c07c663          	blt	x15,x0,30ec <__swbuf_r+0x130>
    3024:	00042703          	lw	x14,0(x8)
    3028:	01042783          	lw	x15,16(x8)
    302c:	01442683          	lw	x13,20(x8)
    3030:	40f707b3          	sub	x15,x14,x15
    3034:	0cd7d263          	bge	x15,x13,30f8 <__swbuf_r+0x13c>
    3038:	00178793          	addi	x15,x15,1
    303c:	00842683          	lw	x13,8(x8)
    3040:	00170613          	addi	x12,x14,1
    3044:	00c42023          	sw	x12,0(x8)
    3048:	fff68693          	addi	x13,x13,-1
    304c:	00d42423          	sw	x13,8(x8)
    3050:	01370023          	sb	x19,0(x14)
    3054:	01442703          	lw	x14,20(x8)
    3058:	08f70263          	beq	x14,x15,30dc <__swbuf_r+0x120>
    305c:	00c45783          	lhu	x15,12(x8)
    3060:	0017f793          	andi	x15,x15,1
    3064:	06079863          	bne	x15,x0,30d4 <__swbuf_r+0x118>
    3068:	00c12983          	lw	x19,12(x2)
    306c:	01c12083          	lw	x1,28(x2)
    3070:	01812403          	lw	x8,24(x2)
    3074:	01012903          	lw	x18,16(x2)
    3078:	00048513          	addi	x10,x9,0
    307c:	01412483          	lw	x9,20(x2)
    3080:	02010113          	addi	x2,x2,32
    3084:	00008067          	jalr	x0,0(x1)
    3088:	00040593          	addi	x11,x8,0
    308c:	00090513          	addi	x10,x18,0
    3090:	0a4000ef          	jal	x1,3134 <__swsetup_r>
    3094:	04051e63          	bne	x10,x0,30f0 <__swbuf_r+0x134>
    3098:	00c41783          	lh	x15,12(x8)
    309c:	01312623          	sw	x19,12(x2)
    30a0:	06442703          	lw	x14,100(x8)
    30a4:	01279693          	slli	x13,x15,0x12
    30a8:	0ff4f993          	andi	x19,x9,255
    30ac:	0ff4f493          	andi	x9,x9,255
    30b0:	f606c6e3          	blt	x13,x0,301c <__swbuf_r+0x60>
    30b4:	ffffe6b7          	lui	x13,0xffffe
    30b8:	fff68693          	addi	x13,x13,-1 # ffffdfff <__heap_end+0xffbfdfff>
    30bc:	00002637          	lui	x12,0x2
    30c0:	00c7e7b3          	or	x15,x15,x12
    30c4:	00d77733          	and	x14,x14,x13
    30c8:	00f41623          	sh	x15,12(x8)
    30cc:	06e42223          	sw	x14,100(x8)
    30d0:	f4dff06f          	jal	x0,301c <__swbuf_r+0x60>
    30d4:	00a00793          	addi	x15,x0,10
    30d8:	f8f498e3          	bne	x9,x15,3068 <__swbuf_r+0xac>
    30dc:	00040593          	addi	x11,x8,0
    30e0:	00090513          	addi	x10,x18,0
    30e4:	fa8ff0ef          	jal	x1,288c <_fflush_r>
    30e8:	f80500e3          	beq	x10,x0,3068 <__swbuf_r+0xac>
    30ec:	00c12983          	lw	x19,12(x2)
    30f0:	fff00493          	addi	x9,x0,-1
    30f4:	f79ff06f          	jal	x0,306c <__swbuf_r+0xb0>
    30f8:	00040593          	addi	x11,x8,0
    30fc:	00090513          	addi	x10,x18,0
    3100:	f8cff0ef          	jal	x1,288c <_fflush_r>
    3104:	fe0514e3          	bne	x10,x0,30ec <__swbuf_r+0x130>
    3108:	00042703          	lw	x14,0(x8)
    310c:	00100793          	addi	x15,x0,1
    3110:	f2dff06f          	jal	x0,303c <__swbuf_r+0x80>
    3114:	dd5fd0ef          	jal	x1,ee8 <__sinit>
    3118:	ed1ff06f          	jal	x0,2fe8 <__swbuf_r+0x2c>

0000311c <__swbuf>:
    311c:	00005737          	lui	x14,0x5
    3120:	00050793          	addi	x15,x10,0
    3124:	95c72503          	lw	x10,-1700(x14) # 495c <_impure_ptr>
    3128:	00058613          	addi	x12,x11,0
    312c:	00078593          	addi	x11,x15,0
    3130:	e8dff06f          	jal	x0,2fbc <__swbuf_r>

00003134 <__swsetup_r>:
    3134:	000057b7          	lui	x15,0x5
    3138:	95c7a783          	lw	x15,-1700(x15) # 495c <_impure_ptr>
    313c:	ff010113          	addi	x2,x2,-16
    3140:	00812423          	sw	x8,8(x2)
    3144:	00912223          	sw	x9,4(x2)
    3148:	00112623          	sw	x1,12(x2)
    314c:	00050493          	addi	x9,x10,0
    3150:	00058413          	addi	x8,x11,0
    3154:	00078663          	beq	x15,x0,3160 <__swsetup_r+0x2c>
    3158:	0347a703          	lw	x14,52(x15)
    315c:	0e070c63          	beq	x14,x0,3254 <__swsetup_r+0x120>
    3160:	00c41783          	lh	x15,12(x8)
    3164:	0087f713          	andi	x14,x15,8
    3168:	06070a63          	beq	x14,x0,31dc <__swsetup_r+0xa8>
    316c:	01042703          	lw	x14,16(x8)
    3170:	08070663          	beq	x14,x0,31fc <__swsetup_r+0xc8>
    3174:	0017f693          	andi	x13,x15,1
    3178:	02068863          	beq	x13,x0,31a8 <__swsetup_r+0x74>
    317c:	01442683          	lw	x13,20(x8)
    3180:	00042423          	sw	x0,8(x8)
    3184:	00000513          	addi	x10,x0,0
    3188:	40d006b3          	sub	x13,x0,x13
    318c:	00d42c23          	sw	x13,24(x8)
    3190:	02070a63          	beq	x14,x0,31c4 <__swsetup_r+0x90>
    3194:	00c12083          	lw	x1,12(x2)
    3198:	00812403          	lw	x8,8(x2)
    319c:	00412483          	lw	x9,4(x2)
    31a0:	01010113          	addi	x2,x2,16
    31a4:	00008067          	jalr	x0,0(x1)
    31a8:	0027f693          	andi	x13,x15,2
    31ac:	00000613          	addi	x12,x0,0
    31b0:	00069463          	bne	x13,x0,31b8 <__swsetup_r+0x84>
    31b4:	01442603          	lw	x12,20(x8)
    31b8:	00c42423          	sw	x12,8(x8)
    31bc:	00000513          	addi	x10,x0,0
    31c0:	fc071ae3          	bne	x14,x0,3194 <__swsetup_r+0x60>
    31c4:	0807f713          	andi	x14,x15,128
    31c8:	fc0706e3          	beq	x14,x0,3194 <__swsetup_r+0x60>
    31cc:	0407e793          	ori	x15,x15,64
    31d0:	00f41623          	sh	x15,12(x8)
    31d4:	fff00513          	addi	x10,x0,-1
    31d8:	fbdff06f          	jal	x0,3194 <__swsetup_r+0x60>
    31dc:	0107f713          	andi	x14,x15,16
    31e0:	08070063          	beq	x14,x0,3260 <__swsetup_r+0x12c>
    31e4:	0047f713          	andi	x14,x15,4
    31e8:	02071c63          	bne	x14,x0,3220 <__swsetup_r+0xec>
    31ec:	01042703          	lw	x14,16(x8)
    31f0:	0087e793          	ori	x15,x15,8
    31f4:	00f41623          	sh	x15,12(x8)
    31f8:	f6071ee3          	bne	x14,x0,3174 <__swsetup_r+0x40>
    31fc:	2807f693          	andi	x13,x15,640
    3200:	20000613          	addi	x12,x0,512
    3204:	f6c688e3          	beq	x13,x12,3174 <__swsetup_r+0x40>
    3208:	00040593          	addi	x11,x8,0
    320c:	00048513          	addi	x10,x9,0
    3210:	005000ef          	jal	x1,3a14 <__smakebuf_r>
    3214:	00c41783          	lh	x15,12(x8)
    3218:	01042703          	lw	x14,16(x8)
    321c:	f59ff06f          	jal	x0,3174 <__swsetup_r+0x40>
    3220:	03042583          	lw	x11,48(x8)
    3224:	00058e63          	beq	x11,x0,3240 <__swsetup_r+0x10c>
    3228:	04040713          	addi	x14,x8,64
    322c:	00e58863          	beq	x11,x14,323c <__swsetup_r+0x108>
    3230:	00048513          	addi	x10,x9,0
    3234:	825fe0ef          	jal	x1,1a58 <_free_r>
    3238:	00c41783          	lh	x15,12(x8)
    323c:	02042823          	sw	x0,48(x8)
    3240:	01042703          	lw	x14,16(x8)
    3244:	fdb7f793          	andi	x15,x15,-37
    3248:	00042223          	sw	x0,4(x8)
    324c:	00e42023          	sw	x14,0(x8)
    3250:	fa1ff06f          	jal	x0,31f0 <__swsetup_r+0xbc>
    3254:	00078513          	addi	x10,x15,0
    3258:	c91fd0ef          	jal	x1,ee8 <__sinit>
    325c:	f05ff06f          	jal	x0,3160 <__swsetup_r+0x2c>
    3260:	00900713          	addi	x14,x0,9
    3264:	00e4a023          	sw	x14,0(x9)
    3268:	0407e793          	ori	x15,x15,64
    326c:	00f41623          	sh	x15,12(x8)
    3270:	fff00513          	addi	x10,x0,-1
    3274:	f21ff06f          	jal	x0,3194 <__swsetup_r+0x60>

00003278 <memchr>:
    3278:	00357793          	andi	x15,x10,3
    327c:	0ff5f693          	andi	x13,x11,255
    3280:	02078a63          	beq	x15,x0,32b4 <memchr+0x3c>
    3284:	fff60793          	addi	x15,x12,-1 # 1fff <_malloc_r+0x2a3>
    3288:	02060e63          	beq	x12,x0,32c4 <memchr+0x4c>
    328c:	fff00613          	addi	x12,x0,-1
    3290:	0180006f          	jal	x0,32a8 <memchr+0x30>
    3294:	00150513          	addi	x10,x10,1
    3298:	00357713          	andi	x14,x10,3
    329c:	00070e63          	beq	x14,x0,32b8 <memchr+0x40>
    32a0:	fff78793          	addi	x15,x15,-1
    32a4:	02c78063          	beq	x15,x12,32c4 <memchr+0x4c>
    32a8:	00054703          	lbu	x14,0(x10)
    32ac:	fed714e3          	bne	x14,x13,3294 <memchr+0x1c>
    32b0:	00008067          	jalr	x0,0(x1)
    32b4:	00060793          	addi	x15,x12,0
    32b8:	00300713          	addi	x14,x0,3
    32bc:	00f76863          	bltu	x14,x15,32cc <memchr+0x54>
    32c0:	06079063          	bne	x15,x0,3320 <memchr+0xa8>
    32c4:	00000513          	addi	x10,x0,0
    32c8:	00008067          	jalr	x0,0(x1)
    32cc:	0ff5f593          	andi	x11,x11,255
    32d0:	00859713          	slli	x14,x11,0x8
    32d4:	00b705b3          	add	x11,x14,x11
    32d8:	01059713          	slli	x14,x11,0x10
    32dc:	feff08b7          	lui	x17,0xfeff0
    32e0:	80808837          	lui	x16,0x80808
    32e4:	00e585b3          	add	x11,x11,x14
    32e8:	eff88893          	addi	x17,x17,-257 # fefefeff <__heap_end+0xfebefeff>
    32ec:	08080813          	addi	x16,x16,128 # 80808080 <__heap_end+0x80408080>
    32f0:	00300313          	addi	x6,x0,3
    32f4:	0100006f          	jal	x0,3304 <memchr+0x8c>
    32f8:	ffc78793          	addi	x15,x15,-4
    32fc:	00450513          	addi	x10,x10,4
    3300:	fcf370e3          	bgeu	x6,x15,32c0 <memchr+0x48>
    3304:	00052703          	lw	x14,0(x10)
    3308:	00e5c733          	xor	x14,x11,x14
    330c:	01170633          	add	x12,x14,x17
    3310:	fff74713          	xori	x14,x14,-1
    3314:	00e67733          	and	x14,x12,x14
    3318:	01077733          	and	x14,x14,x16
    331c:	fc070ee3          	beq	x14,x0,32f8 <memchr+0x80>
    3320:	00f507b3          	add	x15,x10,x15
    3324:	00c0006f          	jal	x0,3330 <memchr+0xb8>
    3328:	00150513          	addi	x10,x10,1
    332c:	f8a78ce3          	beq	x15,x10,32c4 <memchr+0x4c>
    3330:	00054703          	lbu	x14,0(x10)
    3334:	fed71ae3          	bne	x14,x13,3328 <memchr+0xb0>
    3338:	00008067          	jalr	x0,0(x1)

0000333c <_sbrk_r>:
    333c:	ff010113          	addi	x2,x2,-16
    3340:	00812423          	sw	x8,8(x2)
    3344:	00912223          	sw	x9,4(x2)
    3348:	00050413          	addi	x8,x10,0
    334c:	00058513          	addi	x10,x11,0
    3350:	00112623          	sw	x1,12(x2)
    3354:	8401a823          	sw	x0,-1968(x3) # 49a8 <errno>
    3358:	f48fd0ef          	jal	x1,aa0 <_sbrk>
    335c:	fff00793          	addi	x15,x0,-1
    3360:	00f50c63          	beq	x10,x15,3378 <_sbrk_r+0x3c>
    3364:	00c12083          	lw	x1,12(x2)
    3368:	00812403          	lw	x8,8(x2)
    336c:	00412483          	lw	x9,4(x2)
    3370:	01010113          	addi	x2,x2,16
    3374:	00008067          	jalr	x0,0(x1)
    3378:	8501a783          	lw	x15,-1968(x3) # 49a8 <errno>
    337c:	fe0784e3          	beq	x15,x0,3364 <_sbrk_r+0x28>
    3380:	00c12083          	lw	x1,12(x2)
    3384:	00f42023          	sw	x15,0(x8)
    3388:	00812403          	lw	x8,8(x2)
    338c:	00412483          	lw	x9,4(x2)
    3390:	01010113          	addi	x2,x2,16
    3394:	00008067          	jalr	x0,0(x1)

00003398 <memmove>:
    3398:	02a5f663          	bgeu	x11,x10,33c4 <memmove+0x2c>
    339c:	00c58733          	add	x14,x11,x12
    33a0:	02e57263          	bgeu	x10,x14,33c4 <memmove+0x2c>
    33a4:	00c507b3          	add	x15,x10,x12
    33a8:	04060663          	beq	x12,x0,33f4 <memmove+0x5c>
    33ac:	fff74683          	lbu	x13,-1(x14)
    33b0:	fff78793          	addi	x15,x15,-1
    33b4:	fff70713          	addi	x14,x14,-1
    33b8:	00d78023          	sb	x13,0(x15)
    33bc:	fef518e3          	bne	x10,x15,33ac <memmove+0x14>
    33c0:	00008067          	jalr	x0,0(x1)
    33c4:	00f00793          	addi	x15,x0,15
    33c8:	02c7e863          	bltu	x15,x12,33f8 <memmove+0x60>
    33cc:	00050793          	addi	x15,x10,0
    33d0:	fff60693          	addi	x13,x12,-1
    33d4:	0c060263          	beq	x12,x0,3498 <memmove+0x100>
    33d8:	00168693          	addi	x13,x13,1
    33dc:	00d786b3          	add	x13,x15,x13
    33e0:	0005c703          	lbu	x14,0(x11)
    33e4:	00178793          	addi	x15,x15,1
    33e8:	00158593          	addi	x11,x11,1
    33ec:	fee78fa3          	sb	x14,-1(x15)
    33f0:	fed798e3          	bne	x15,x13,33e0 <memmove+0x48>
    33f4:	00008067          	jalr	x0,0(x1)
    33f8:	00b567b3          	or	x15,x10,x11
    33fc:	0037f793          	andi	x15,x15,3
    3400:	08079663          	bne	x15,x0,348c <memmove+0xf4>
    3404:	ff060893          	addi	x17,x12,-16
    3408:	ff08f893          	andi	x17,x17,-16
    340c:	01088893          	addi	x17,x17,16
    3410:	011506b3          	add	x13,x10,x17
    3414:	00058713          	addi	x14,x11,0
    3418:	00050793          	addi	x15,x10,0
    341c:	00072803          	lw	x16,0(x14)
    3420:	01070713          	addi	x14,x14,16
    3424:	01078793          	addi	x15,x15,16
    3428:	ff07a823          	sw	x16,-16(x15)
    342c:	ff472803          	lw	x16,-12(x14)
    3430:	ff07aa23          	sw	x16,-12(x15)
    3434:	ff872803          	lw	x16,-8(x14)
    3438:	ff07ac23          	sw	x16,-8(x15)
    343c:	ffc72803          	lw	x16,-4(x14)
    3440:	ff07ae23          	sw	x16,-4(x15)
    3444:	fcd79ce3          	bne	x15,x13,341c <memmove+0x84>
    3448:	00c67813          	andi	x16,x12,12
    344c:	011585b3          	add	x11,x11,x17
    3450:	00f67713          	andi	x14,x12,15
    3454:	04080463          	beq	x16,x0,349c <memmove+0x104>
    3458:	ffc70813          	addi	x16,x14,-4
    345c:	ffc87813          	andi	x16,x16,-4
    3460:	00480813          	addi	x16,x16,4
    3464:	010687b3          	add	x15,x13,x16
    3468:	00058713          	addi	x14,x11,0
    346c:	00072883          	lw	x17,0(x14)
    3470:	00468693          	addi	x13,x13,4
    3474:	00470713          	addi	x14,x14,4
    3478:	ff16ae23          	sw	x17,-4(x13)
    347c:	fef698e3          	bne	x13,x15,346c <memmove+0xd4>
    3480:	00367613          	andi	x12,x12,3
    3484:	010585b3          	add	x11,x11,x16
    3488:	f49ff06f          	jal	x0,33d0 <memmove+0x38>
    348c:	fff60693          	addi	x13,x12,-1
    3490:	00050793          	addi	x15,x10,0
    3494:	f45ff06f          	jal	x0,33d8 <memmove+0x40>
    3498:	00008067          	jalr	x0,0(x1)
    349c:	00070613          	addi	x12,x14,0
    34a0:	f31ff06f          	jal	x0,33d0 <memmove+0x38>

000034a4 <_realloc_r>:
    34a4:	fd010113          	addi	x2,x2,-48
    34a8:	02912223          	sw	x9,36(x2)
    34ac:	02112623          	sw	x1,44(x2)
    34b0:	00060493          	addi	x9,x12,0
    34b4:	1e058863          	beq	x11,x0,36a4 <_realloc_r+0x200>
    34b8:	02812423          	sw	x8,40(x2)
    34bc:	03212023          	sw	x18,32(x2)
    34c0:	00058413          	addi	x8,x11,0
    34c4:	01312e23          	sw	x19,28(x2)
    34c8:	01512a23          	sw	x21,20(x2)
    34cc:	01412c23          	sw	x20,24(x2)
    34d0:	00050913          	addi	x18,x10,0
    34d4:	84cff0ef          	jal	x1,2520 <__malloc_lock>
    34d8:	ffc42703          	lw	x14,-4(x8)
    34dc:	00b48793          	addi	x15,x9,11
    34e0:	01600693          	addi	x13,x0,22
    34e4:	ff840a93          	addi	x21,x8,-8
    34e8:	ffc77993          	andi	x19,x14,-4
    34ec:	10f6f263          	bgeu	x13,x15,35f0 <_realloc_r+0x14c>
    34f0:	ff87fa13          	andi	x20,x15,-8
    34f4:	1007c263          	blt	x15,x0,35f8 <_realloc_r+0x154>
    34f8:	109a6063          	bltu	x20,x9,35f8 <_realloc_r+0x154>
    34fc:	1349d263          	bge	x19,x20,3620 <_realloc_r+0x17c>
    3500:	000047b7          	lui	x15,0x4
    3504:	01812423          	sw	x24,8(x2)
    3508:	55078c13          	addi	x24,x15,1360 # 4550 <__malloc_av_>
    350c:	008c2603          	lw	x12,8(x24)
    3510:	013a86b3          	add	x13,x21,x19
    3514:	0046a783          	lw	x15,4(x13)
    3518:	1cd60863          	beq	x12,x13,36e8 <_realloc_r+0x244>
    351c:	ffe7f613          	andi	x12,x15,-2
    3520:	00c68633          	add	x12,x13,x12
    3524:	00462603          	lw	x12,4(x12)
    3528:	00167613          	andi	x12,x12,1
    352c:	14061a63          	bne	x12,x0,3680 <_realloc_r+0x1dc>
    3530:	ffc7f793          	andi	x15,x15,-4
    3534:	00f98633          	add	x12,x19,x15
    3538:	0d465863          	bge	x12,x20,3608 <_realloc_r+0x164>
    353c:	00177713          	andi	x14,x14,1
    3540:	02071c63          	bne	x14,x0,3578 <_realloc_r+0xd4>
    3544:	01712623          	sw	x23,12(x2)
    3548:	ff842b83          	lw	x23,-8(x8)
    354c:	01612823          	sw	x22,16(x2)
    3550:	417a8bb3          	sub	x23,x21,x23
    3554:	004ba703          	lw	x14,4(x23)
    3558:	ffc77713          	andi	x14,x14,-4
    355c:	00e787b3          	add	x15,x15,x14
    3560:	01378b33          	add	x22,x15,x19
    3564:	334b5c63          	bge	x22,x20,389c <_realloc_r+0x3f8>
    3568:	00e98b33          	add	x22,x19,x14
    356c:	294b5863          	bge	x22,x20,37fc <_realloc_r+0x358>
    3570:	01012b03          	lw	x22,16(x2)
    3574:	00c12b83          	lw	x23,12(x2)
    3578:	00048593          	addi	x11,x9,0
    357c:	00090513          	addi	x10,x18,0
    3580:	fdcfe0ef          	jal	x1,1d5c <_malloc_r>
    3584:	00050493          	addi	x9,x10,0
    3588:	40050863          	beq	x10,x0,3998 <_realloc_r+0x4f4>
    358c:	ffc42783          	lw	x15,-4(x8)
    3590:	ff850713          	addi	x14,x10,-8
    3594:	ffe7f793          	andi	x15,x15,-2
    3598:	00fa87b3          	add	x15,x21,x15
    359c:	24e78663          	beq	x15,x14,37e8 <_realloc_r+0x344>
    35a0:	ffc98613          	addi	x12,x19,-4
    35a4:	02400793          	addi	x15,x0,36
    35a8:	2ec7e463          	bltu	x15,x12,3890 <_realloc_r+0x3ec>
    35ac:	01300713          	addi	x14,x0,19
    35b0:	20c76a63          	bltu	x14,x12,37c4 <_realloc_r+0x320>
    35b4:	00050793          	addi	x15,x10,0
    35b8:	00040713          	addi	x14,x8,0
    35bc:	00072683          	lw	x13,0(x14)
    35c0:	00d7a023          	sw	x13,0(x15)
    35c4:	00472683          	lw	x13,4(x14)
    35c8:	00d7a223          	sw	x13,4(x15)
    35cc:	00872703          	lw	x14,8(x14)
    35d0:	00e7a423          	sw	x14,8(x15)
    35d4:	00040593          	addi	x11,x8,0
    35d8:	00090513          	addi	x10,x18,0
    35dc:	c7cfe0ef          	jal	x1,1a58 <_free_r>
    35e0:	00090513          	addi	x10,x18,0
    35e4:	f41fe0ef          	jal	x1,2524 <__malloc_unlock>
    35e8:	00812c03          	lw	x24,8(x2)
    35ec:	06c0006f          	jal	x0,3658 <_realloc_r+0x1b4>
    35f0:	01000a13          	addi	x20,x0,16
    35f4:	f09a74e3          	bgeu	x20,x9,34fc <_realloc_r+0x58>
    35f8:	00c00793          	addi	x15,x0,12
    35fc:	00f92023          	sw	x15,0(x18)
    3600:	00000493          	addi	x9,x0,0
    3604:	0540006f          	jal	x0,3658 <_realloc_r+0x1b4>
    3608:	00c6a783          	lw	x15,12(x13)
    360c:	0086a703          	lw	x14,8(x13)
    3610:	00812c03          	lw	x24,8(x2)
    3614:	00060993          	addi	x19,x12,0
    3618:	00f72623          	sw	x15,12(x14)
    361c:	00e7a423          	sw	x14,8(x15)
    3620:	004aa783          	lw	x15,4(x21)
    3624:	414986b3          	sub	x13,x19,x20
    3628:	00f00613          	addi	x12,x0,15
    362c:	0017f793          	andi	x15,x15,1
    3630:	013a8733          	add	x14,x21,x19
    3634:	08d66263          	bltu	x12,x13,36b8 <_realloc_r+0x214>
    3638:	0137e7b3          	or	x15,x15,x19
    363c:	00faa223          	sw	x15,4(x21)
    3640:	00472783          	lw	x15,4(x14)
    3644:	0017e793          	ori	x15,x15,1
    3648:	00f72223          	sw	x15,4(x14)
    364c:	00090513          	addi	x10,x18,0
    3650:	ed5fe0ef          	jal	x1,2524 <__malloc_unlock>
    3654:	00040493          	addi	x9,x8,0
    3658:	02812403          	lw	x8,40(x2)
    365c:	02c12083          	lw	x1,44(x2)
    3660:	02012903          	lw	x18,32(x2)
    3664:	01c12983          	lw	x19,28(x2)
    3668:	01812a03          	lw	x20,24(x2)
    366c:	01412a83          	lw	x21,20(x2)
    3670:	00048513          	addi	x10,x9,0
    3674:	02412483          	lw	x9,36(x2)
    3678:	03010113          	addi	x2,x2,48
    367c:	00008067          	jalr	x0,0(x1)
    3680:	00177713          	andi	x14,x14,1
    3684:	ee071ae3          	bne	x14,x0,3578 <_realloc_r+0xd4>
    3688:	01712623          	sw	x23,12(x2)
    368c:	ff842b83          	lw	x23,-8(x8)
    3690:	01612823          	sw	x22,16(x2)
    3694:	417a8bb3          	sub	x23,x21,x23
    3698:	004ba703          	lw	x14,4(x23)
    369c:	ffc77713          	andi	x14,x14,-4
    36a0:	ec9ff06f          	jal	x0,3568 <_realloc_r+0xc4>
    36a4:	02c12083          	lw	x1,44(x2)
    36a8:	02412483          	lw	x9,36(x2)
    36ac:	00060593          	addi	x11,x12,0
    36b0:	03010113          	addi	x2,x2,48
    36b4:	ea8fe06f          	jal	x0,1d5c <_malloc_r>
    36b8:	0147e7b3          	or	x15,x15,x20
    36bc:	00faa223          	sw	x15,4(x21)
    36c0:	014a85b3          	add	x11,x21,x20
    36c4:	0016e693          	ori	x13,x13,1
    36c8:	00d5a223          	sw	x13,4(x11)
    36cc:	00472783          	lw	x15,4(x14)
    36d0:	00858593          	addi	x11,x11,8
    36d4:	00090513          	addi	x10,x18,0
    36d8:	0017e793          	ori	x15,x15,1
    36dc:	00f72223          	sw	x15,4(x14)
    36e0:	b78fe0ef          	jal	x1,1a58 <_free_r>
    36e4:	f69ff06f          	jal	x0,364c <_realloc_r+0x1a8>
    36e8:	ffc7f793          	andi	x15,x15,-4
    36ec:	013786b3          	add	x13,x15,x19
    36f0:	010a0613          	addi	x12,x20,16
    36f4:	26c6d063          	bge	x13,x12,3954 <_realloc_r+0x4b0>
    36f8:	00177713          	andi	x14,x14,1
    36fc:	e6071ee3          	bne	x14,x0,3578 <_realloc_r+0xd4>
    3700:	01712623          	sw	x23,12(x2)
    3704:	ff842b83          	lw	x23,-8(x8)
    3708:	01612823          	sw	x22,16(x2)
    370c:	417a8bb3          	sub	x23,x21,x23
    3710:	004ba703          	lw	x14,4(x23)
    3714:	ffc77713          	andi	x14,x14,-4
    3718:	00e787b3          	add	x15,x15,x14
    371c:	01378b33          	add	x22,x15,x19
    3720:	e4cb44e3          	blt	x22,x12,3568 <_realloc_r+0xc4>
    3724:	00cba783          	lw	x15,12(x23)
    3728:	008ba703          	lw	x14,8(x23)
    372c:	ffc98613          	addi	x12,x19,-4
    3730:	02400693          	addi	x13,x0,36
    3734:	00f72623          	sw	x15,12(x14)
    3738:	00e7a423          	sw	x14,8(x15)
    373c:	008b8493          	addi	x9,x23,8
    3740:	28c6e463          	bltu	x13,x12,39c8 <_realloc_r+0x524>
    3744:	01300713          	addi	x14,x0,19
    3748:	00048793          	addi	x15,x9,0
    374c:	02c77263          	bgeu	x14,x12,3770 <_realloc_r+0x2cc>
    3750:	00042703          	lw	x14,0(x8)
    3754:	01b00793          	addi	x15,x0,27
    3758:	00eba423          	sw	x14,8(x23)
    375c:	00442703          	lw	x14,4(x8)
    3760:	00eba623          	sw	x14,12(x23)
    3764:	26c7ea63          	bltu	x15,x12,39d8 <_realloc_r+0x534>
    3768:	00840413          	addi	x8,x8,8
    376c:	010b8793          	addi	x15,x23,16
    3770:	00042703          	lw	x14,0(x8)
    3774:	00e7a023          	sw	x14,0(x15)
    3778:	00442703          	lw	x14,4(x8)
    377c:	00e7a223          	sw	x14,4(x15)
    3780:	00842703          	lw	x14,8(x8)
    3784:	00e7a423          	sw	x14,8(x15)
    3788:	014b8733          	add	x14,x23,x20
    378c:	414b0b33          	sub	x22,x22,x20
    3790:	00ec2423          	sw	x14,8(x24)
    3794:	001b6793          	ori	x15,x22,1
    3798:	00f72223          	sw	x15,4(x14)
    379c:	004ba783          	lw	x15,4(x23)
    37a0:	00090513          	addi	x10,x18,0
    37a4:	0017f793          	andi	x15,x15,1
    37a8:	0147e7b3          	or	x15,x15,x20
    37ac:	00fba223          	sw	x15,4(x23)
    37b0:	d75fe0ef          	jal	x1,2524 <__malloc_unlock>
    37b4:	01012b03          	lw	x22,16(x2)
    37b8:	00c12b83          	lw	x23,12(x2)
    37bc:	00812c03          	lw	x24,8(x2)
    37c0:	e99ff06f          	jal	x0,3658 <_realloc_r+0x1b4>
    37c4:	00042683          	lw	x13,0(x8)
    37c8:	01b00713          	addi	x14,x0,27
    37cc:	00d52023          	sw	x13,0(x10)
    37d0:	00442683          	lw	x13,4(x8)
    37d4:	00d52223          	sw	x13,4(x10)
    37d8:	14c76e63          	bltu	x14,x12,3934 <_realloc_r+0x490>
    37dc:	00840713          	addi	x14,x8,8
    37e0:	00850793          	addi	x15,x10,8
    37e4:	dd9ff06f          	jal	x0,35bc <_realloc_r+0x118>
    37e8:	ffc52783          	lw	x15,-4(x10)
    37ec:	00812c03          	lw	x24,8(x2)
    37f0:	ffc7f793          	andi	x15,x15,-4
    37f4:	00f989b3          	add	x19,x19,x15
    37f8:	e29ff06f          	jal	x0,3620 <_realloc_r+0x17c>
    37fc:	00cba783          	lw	x15,12(x23)
    3800:	008ba703          	lw	x14,8(x23)
    3804:	ffc98613          	addi	x12,x19,-4
    3808:	02400693          	addi	x13,x0,36
    380c:	00f72623          	sw	x15,12(x14)
    3810:	00e7a423          	sw	x14,8(x15)
    3814:	008b8493          	addi	x9,x23,8
    3818:	10c6e663          	bltu	x13,x12,3924 <_realloc_r+0x480>
    381c:	01300713          	addi	x14,x0,19
    3820:	00048793          	addi	x15,x9,0
    3824:	02c77c63          	bgeu	x14,x12,385c <_realloc_r+0x3b8>
    3828:	00042703          	lw	x14,0(x8)
    382c:	01b00793          	addi	x15,x0,27
    3830:	00eba423          	sw	x14,8(x23)
    3834:	00442703          	lw	x14,4(x8)
    3838:	00eba623          	sw	x14,12(x23)
    383c:	14c7f863          	bgeu	x15,x12,398c <_realloc_r+0x4e8>
    3840:	00842783          	lw	x15,8(x8)
    3844:	00fba823          	sw	x15,16(x23)
    3848:	00c42783          	lw	x15,12(x8)
    384c:	00fbaa23          	sw	x15,20(x23)
    3850:	0ad60c63          	beq	x12,x13,3908 <_realloc_r+0x464>
    3854:	01040413          	addi	x8,x8,16
    3858:	018b8793          	addi	x15,x23,24
    385c:	00042703          	lw	x14,0(x8)
    3860:	00e7a023          	sw	x14,0(x15)
    3864:	00442703          	lw	x14,4(x8)
    3868:	00e7a223          	sw	x14,4(x15)
    386c:	00842703          	lw	x14,8(x8)
    3870:	00e7a423          	sw	x14,8(x15)
    3874:	000b0993          	addi	x19,x22,0
    3878:	000b8a93          	addi	x21,x23,0
    387c:	01012b03          	lw	x22,16(x2)
    3880:	00c12b83          	lw	x23,12(x2)
    3884:	00812c03          	lw	x24,8(x2)
    3888:	00048413          	addi	x8,x9,0
    388c:	d95ff06f          	jal	x0,3620 <_realloc_r+0x17c>
    3890:	00040593          	addi	x11,x8,0
    3894:	b05ff0ef          	jal	x1,3398 <memmove>
    3898:	d3dff06f          	jal	x0,35d4 <_realloc_r+0x130>
    389c:	00c6a783          	lw	x15,12(x13)
    38a0:	0086a703          	lw	x14,8(x13)
    38a4:	ffc98613          	addi	x12,x19,-4
    38a8:	02400693          	addi	x13,x0,36
    38ac:	00f72623          	sw	x15,12(x14)
    38b0:	00e7a423          	sw	x14,8(x15)
    38b4:	008ba703          	lw	x14,8(x23)
    38b8:	00cba783          	lw	x15,12(x23)
    38bc:	008b8493          	addi	x9,x23,8
    38c0:	00f72623          	sw	x15,12(x14)
    38c4:	00e7a423          	sw	x14,8(x15)
    38c8:	04c6ee63          	bltu	x13,x12,3924 <_realloc_r+0x480>
    38cc:	01300713          	addi	x14,x0,19
    38d0:	00048793          	addi	x15,x9,0
    38d4:	f8c774e3          	bgeu	x14,x12,385c <_realloc_r+0x3b8>
    38d8:	00042703          	lw	x14,0(x8)
    38dc:	01b00793          	addi	x15,x0,27
    38e0:	00eba423          	sw	x14,8(x23)
    38e4:	00442703          	lw	x14,4(x8)
    38e8:	00eba623          	sw	x14,12(x23)
    38ec:	0ac7f063          	bgeu	x15,x12,398c <_realloc_r+0x4e8>
    38f0:	00842703          	lw	x14,8(x8)
    38f4:	02400793          	addi	x15,x0,36
    38f8:	00eba823          	sw	x14,16(x23)
    38fc:	00c42703          	lw	x14,12(x8)
    3900:	00ebaa23          	sw	x14,20(x23)
    3904:	f4f618e3          	bne	x12,x15,3854 <_realloc_r+0x3b0>
    3908:	01042703          	lw	x14,16(x8)
    390c:	020b8793          	addi	x15,x23,32
    3910:	01840413          	addi	x8,x8,24
    3914:	00ebac23          	sw	x14,24(x23)
    3918:	ffc42703          	lw	x14,-4(x8)
    391c:	00ebae23          	sw	x14,28(x23)
    3920:	f3dff06f          	jal	x0,385c <_realloc_r+0x3b8>
    3924:	00040593          	addi	x11,x8,0
    3928:	00048513          	addi	x10,x9,0
    392c:	a6dff0ef          	jal	x1,3398 <memmove>
    3930:	f45ff06f          	jal	x0,3874 <_realloc_r+0x3d0>
    3934:	00842703          	lw	x14,8(x8)
    3938:	00e52423          	sw	x14,8(x10)
    393c:	00c42703          	lw	x14,12(x8)
    3940:	00e52623          	sw	x14,12(x10)
    3944:	06f60463          	beq	x12,x15,39ac <_realloc_r+0x508>
    3948:	01040713          	addi	x14,x8,16
    394c:	01050793          	addi	x15,x10,16
    3950:	c6dff06f          	jal	x0,35bc <_realloc_r+0x118>
    3954:	014a8ab3          	add	x21,x21,x20
    3958:	414686b3          	sub	x13,x13,x20
    395c:	015c2423          	sw	x21,8(x24)
    3960:	0016e793          	ori	x15,x13,1
    3964:	00faa223          	sw	x15,4(x21)
    3968:	ffc42783          	lw	x15,-4(x8)
    396c:	00090513          	addi	x10,x18,0
    3970:	00040493          	addi	x9,x8,0
    3974:	0017f793          	andi	x15,x15,1
    3978:	0147e7b3          	or	x15,x15,x20
    397c:	fef42e23          	sw	x15,-4(x8)
    3980:	ba5fe0ef          	jal	x1,2524 <__malloc_unlock>
    3984:	00812c03          	lw	x24,8(x2)
    3988:	cd1ff06f          	jal	x0,3658 <_realloc_r+0x1b4>
    398c:	00840413          	addi	x8,x8,8
    3990:	010b8793          	addi	x15,x23,16
    3994:	ec9ff06f          	jal	x0,385c <_realloc_r+0x3b8>
    3998:	00090513          	addi	x10,x18,0
    399c:	b89fe0ef          	jal	x1,2524 <__malloc_unlock>
    39a0:	00000493          	addi	x9,x0,0
    39a4:	00812c03          	lw	x24,8(x2)
    39a8:	cb1ff06f          	jal	x0,3658 <_realloc_r+0x1b4>
    39ac:	01042683          	lw	x13,16(x8)
    39b0:	01840713          	addi	x14,x8,24
    39b4:	01850793          	addi	x15,x10,24
    39b8:	00d52823          	sw	x13,16(x10)
    39bc:	01442683          	lw	x13,20(x8)
    39c0:	00d52a23          	sw	x13,20(x10)
    39c4:	bf9ff06f          	jal	x0,35bc <_realloc_r+0x118>
    39c8:	00040593          	addi	x11,x8,0
    39cc:	00048513          	addi	x10,x9,0
    39d0:	9c9ff0ef          	jal	x1,3398 <memmove>
    39d4:	db5ff06f          	jal	x0,3788 <_realloc_r+0x2e4>
    39d8:	00842783          	lw	x15,8(x8)
    39dc:	00fba823          	sw	x15,16(x23)
    39e0:	00c42783          	lw	x15,12(x8)
    39e4:	00fbaa23          	sw	x15,20(x23)
    39e8:	00d60863          	beq	x12,x13,39f8 <_realloc_r+0x554>
    39ec:	01040413          	addi	x8,x8,16
    39f0:	018b8793          	addi	x15,x23,24
    39f4:	d7dff06f          	jal	x0,3770 <_realloc_r+0x2cc>
    39f8:	01042703          	lw	x14,16(x8)
    39fc:	020b8793          	addi	x15,x23,32
    3a00:	01840413          	addi	x8,x8,24
    3a04:	00ebac23          	sw	x14,24(x23)
    3a08:	ffc42703          	lw	x14,-4(x8)
    3a0c:	00ebae23          	sw	x14,28(x23)
    3a10:	d61ff06f          	jal	x0,3770 <_realloc_r+0x2cc>

00003a14 <__smakebuf_r>:
    3a14:	00c59783          	lh	x15,12(x11)
    3a18:	f8010113          	addi	x2,x2,-128
    3a1c:	06812c23          	sw	x8,120(x2)
    3a20:	06112e23          	sw	x1,124(x2)
    3a24:	0027f713          	andi	x14,x15,2
    3a28:	00058413          	addi	x8,x11,0
    3a2c:	02070463          	beq	x14,x0,3a54 <__smakebuf_r+0x40>
    3a30:	04358793          	addi	x15,x11,67
    3a34:	00f5a023          	sw	x15,0(x11)
    3a38:	00f5a823          	sw	x15,16(x11)
    3a3c:	00100793          	addi	x15,x0,1
    3a40:	00f5aa23          	sw	x15,20(x11)
    3a44:	07c12083          	lw	x1,124(x2)
    3a48:	07812403          	lw	x8,120(x2)
    3a4c:	08010113          	addi	x2,x2,128
    3a50:	00008067          	jalr	x0,0(x1)
    3a54:	00e59583          	lh	x11,14(x11)
    3a58:	06912a23          	sw	x9,116(x2)
    3a5c:	07212823          	sw	x18,112(x2)
    3a60:	07312623          	sw	x19,108(x2)
    3a64:	07412423          	sw	x20,104(x2)
    3a68:	00050493          	addi	x9,x10,0
    3a6c:	0805c663          	blt	x11,x0,3af8 <__smakebuf_r+0xe4>
    3a70:	00810613          	addi	x12,x2,8
    3a74:	210000ef          	jal	x1,3c84 <_fstat_r>
    3a78:	06054e63          	blt	x10,x0,3af4 <__smakebuf_r+0xe0>
    3a7c:	00c12783          	lw	x15,12(x2)
    3a80:	0000f937          	lui	x18,0xf
    3a84:	000019b7          	lui	x19,0x1
    3a88:	00f97933          	and	x18,x18,x15
    3a8c:	ffffe7b7          	lui	x15,0xffffe
    3a90:	00f90933          	add	x18,x18,x15
    3a94:	00193913          	sltiu	x18,x18,1
    3a98:	40000a13          	addi	x20,x0,1024
    3a9c:	80098993          	addi	x19,x19,-2048 # 800 <Proc_8+0x3c>
    3aa0:	000a0593          	addi	x11,x20,0
    3aa4:	00048513          	addi	x10,x9,0
    3aa8:	ab4fe0ef          	jal	x1,1d5c <_malloc_r>
    3aac:	00c41783          	lh	x15,12(x8)
    3ab0:	06050863          	beq	x10,x0,3b20 <__smakebuf_r+0x10c>
    3ab4:	0807e793          	ori	x15,x15,128
    3ab8:	00a42023          	sw	x10,0(x8)
    3abc:	00a42823          	sw	x10,16(x8)
    3ac0:	00f41623          	sh	x15,12(x8)
    3ac4:	01442a23          	sw	x20,20(x8)
    3ac8:	0a091063          	bne	x18,x0,3b68 <__smakebuf_r+0x154>
    3acc:	0137e7b3          	or	x15,x15,x19
    3ad0:	07c12083          	lw	x1,124(x2)
    3ad4:	00f41623          	sh	x15,12(x8)
    3ad8:	07812403          	lw	x8,120(x2)
    3adc:	07412483          	lw	x9,116(x2)
    3ae0:	07012903          	lw	x18,112(x2)
    3ae4:	06c12983          	lw	x19,108(x2)
    3ae8:	06812a03          	lw	x20,104(x2)
    3aec:	08010113          	addi	x2,x2,128
    3af0:	00008067          	jalr	x0,0(x1)
    3af4:	00c41783          	lh	x15,12(x8)
    3af8:	0807f793          	andi	x15,x15,128
    3afc:	00000913          	addi	x18,x0,0
    3b00:	04078e63          	beq	x15,x0,3b5c <__smakebuf_r+0x148>
    3b04:	04000a13          	addi	x20,x0,64
    3b08:	000a0593          	addi	x11,x20,0
    3b0c:	00048513          	addi	x10,x9,0
    3b10:	a4cfe0ef          	jal	x1,1d5c <_malloc_r>
    3b14:	00c41783          	lh	x15,12(x8)
    3b18:	00000993          	addi	x19,x0,0
    3b1c:	f8051ce3          	bne	x10,x0,3ab4 <__smakebuf_r+0xa0>
    3b20:	2007f713          	andi	x14,x15,512
    3b24:	04071e63          	bne	x14,x0,3b80 <__smakebuf_r+0x16c>
    3b28:	ffc7f793          	andi	x15,x15,-4
    3b2c:	0027e793          	ori	x15,x15,2
    3b30:	04340713          	addi	x14,x8,67
    3b34:	00f41623          	sh	x15,12(x8)
    3b38:	00100793          	addi	x15,x0,1
    3b3c:	07412483          	lw	x9,116(x2)
    3b40:	07012903          	lw	x18,112(x2)
    3b44:	06c12983          	lw	x19,108(x2)
    3b48:	06812a03          	lw	x20,104(x2)
    3b4c:	00e42023          	sw	x14,0(x8)
    3b50:	00e42823          	sw	x14,16(x8)
    3b54:	00f42a23          	sw	x15,20(x8)
    3b58:	eedff06f          	jal	x0,3a44 <__smakebuf_r+0x30>
    3b5c:	40000a13          	addi	x20,x0,1024
    3b60:	00000993          	addi	x19,x0,0
    3b64:	f3dff06f          	jal	x0,3aa0 <__smakebuf_r+0x8c>
    3b68:	00e41583          	lh	x11,14(x8)
    3b6c:	00048513          	addi	x10,x9,0
    3b70:	178000ef          	jal	x1,3ce8 <_isatty_r>
    3b74:	02051063          	bne	x10,x0,3b94 <__smakebuf_r+0x180>
    3b78:	00c41783          	lh	x15,12(x8)
    3b7c:	f51ff06f          	jal	x0,3acc <__smakebuf_r+0xb8>
    3b80:	07412483          	lw	x9,116(x2)
    3b84:	07012903          	lw	x18,112(x2)
    3b88:	06c12983          	lw	x19,108(x2)
    3b8c:	06812a03          	lw	x20,104(x2)
    3b90:	eb5ff06f          	jal	x0,3a44 <__smakebuf_r+0x30>
    3b94:	00c45783          	lhu	x15,12(x8)
    3b98:	ffc7f793          	andi	x15,x15,-4
    3b9c:	0017e793          	ori	x15,x15,1
    3ba0:	01079793          	slli	x15,x15,0x10
    3ba4:	4107d793          	srai	x15,x15,0x10
    3ba8:	f25ff06f          	jal	x0,3acc <__smakebuf_r+0xb8>

00003bac <__swhatbuf_r>:
    3bac:	f9010113          	addi	x2,x2,-112
    3bb0:	06812423          	sw	x8,104(x2)
    3bb4:	00058413          	addi	x8,x11,0
    3bb8:	00e59583          	lh	x11,14(x11)
    3bbc:	06912223          	sw	x9,100(x2)
    3bc0:	07212023          	sw	x18,96(x2)
    3bc4:	06112623          	sw	x1,108(x2)
    3bc8:	00060493          	addi	x9,x12,0
    3bcc:	00068913          	addi	x18,x13,0
    3bd0:	0405ca63          	blt	x11,x0,3c24 <__swhatbuf_r+0x78>
    3bd4:	00810613          	addi	x12,x2,8
    3bd8:	0ac000ef          	jal	x1,3c84 <_fstat_r>
    3bdc:	04054463          	blt	x10,x0,3c24 <__swhatbuf_r+0x78>
    3be0:	00c12703          	lw	x14,12(x2)
    3be4:	0000f7b7          	lui	x15,0xf
    3be8:	06c12083          	lw	x1,108(x2)
    3bec:	00e7f7b3          	and	x15,x15,x14
    3bf0:	ffffe737          	lui	x14,0xffffe
    3bf4:	00e787b3          	add	x15,x15,x14
    3bf8:	06812403          	lw	x8,104(x2)
    3bfc:	0017b793          	sltiu	x15,x15,1
    3c00:	00f92023          	sw	x15,0(x18) # f000 <__heap_start+0x7770>
    3c04:	40000713          	addi	x14,x0,1024
    3c08:	00e4a023          	sw	x14,0(x9)
    3c0c:	00001537          	lui	x10,0x1
    3c10:	06412483          	lw	x9,100(x2)
    3c14:	06012903          	lw	x18,96(x2)
    3c18:	80050513          	addi	x10,x10,-2048 # 800 <Proc_8+0x3c>
    3c1c:	07010113          	addi	x2,x2,112
    3c20:	00008067          	jalr	x0,0(x1)
    3c24:	00c45783          	lhu	x15,12(x8)
    3c28:	0807f793          	andi	x15,x15,128
    3c2c:	02078863          	beq	x15,x0,3c5c <__swhatbuf_r+0xb0>
    3c30:	06c12083          	lw	x1,108(x2)
    3c34:	06812403          	lw	x8,104(x2)
    3c38:	00000793          	addi	x15,x0,0
    3c3c:	00f92023          	sw	x15,0(x18)
    3c40:	04000713          	addi	x14,x0,64
    3c44:	00e4a023          	sw	x14,0(x9)
    3c48:	06012903          	lw	x18,96(x2)
    3c4c:	06412483          	lw	x9,100(x2)
    3c50:	00000513          	addi	x10,x0,0
    3c54:	07010113          	addi	x2,x2,112
    3c58:	00008067          	jalr	x0,0(x1)
    3c5c:	06c12083          	lw	x1,108(x2)
    3c60:	06812403          	lw	x8,104(x2)
    3c64:	00f92023          	sw	x15,0(x18)
    3c68:	40000713          	addi	x14,x0,1024
    3c6c:	00e4a023          	sw	x14,0(x9)
    3c70:	06012903          	lw	x18,96(x2)
    3c74:	06412483          	lw	x9,100(x2)
    3c78:	00000513          	addi	x10,x0,0
    3c7c:	07010113          	addi	x2,x2,112
    3c80:	00008067          	jalr	x0,0(x1)

00003c84 <_fstat_r>:
    3c84:	ff010113          	addi	x2,x2,-16
    3c88:	00058713          	addi	x14,x11,0
    3c8c:	00812423          	sw	x8,8(x2)
    3c90:	00912223          	sw	x9,4(x2)
    3c94:	00050413          	addi	x8,x10,0
    3c98:	00060593          	addi	x11,x12,0
    3c9c:	00070513          	addi	x10,x14,0 # ffffe000 <__heap_end+0xffbfe000>
    3ca0:	00112623          	sw	x1,12(x2)
    3ca4:	8401a823          	sw	x0,-1968(x3) # 49a8 <errno>
    3ca8:	d19fc0ef          	jal	x1,9c0 <_fstat>
    3cac:	fff00793          	addi	x15,x0,-1
    3cb0:	00f50c63          	beq	x10,x15,3cc8 <_fstat_r+0x44>
    3cb4:	00c12083          	lw	x1,12(x2)
    3cb8:	00812403          	lw	x8,8(x2)
    3cbc:	00412483          	lw	x9,4(x2)
    3cc0:	01010113          	addi	x2,x2,16
    3cc4:	00008067          	jalr	x0,0(x1)
    3cc8:	8501a783          	lw	x15,-1968(x3) # 49a8 <errno>
    3ccc:	fe0784e3          	beq	x15,x0,3cb4 <_fstat_r+0x30>
    3cd0:	00c12083          	lw	x1,12(x2)
    3cd4:	00f42023          	sw	x15,0(x8)
    3cd8:	00812403          	lw	x8,8(x2)
    3cdc:	00412483          	lw	x9,4(x2)
    3ce0:	01010113          	addi	x2,x2,16
    3ce4:	00008067          	jalr	x0,0(x1)

00003ce8 <_isatty_r>:
    3ce8:	ff010113          	addi	x2,x2,-16
    3cec:	00812423          	sw	x8,8(x2)
    3cf0:	00912223          	sw	x9,4(x2)
    3cf4:	00050413          	addi	x8,x10,0
    3cf8:	00058513          	addi	x10,x11,0
    3cfc:	00112623          	sw	x1,12(x2)
    3d00:	8401a823          	sw	x0,-1968(x3) # 49a8 <errno>
    3d04:	cf9fc0ef          	jal	x1,9fc <_isatty>
    3d08:	fff00793          	addi	x15,x0,-1
    3d0c:	00f50c63          	beq	x10,x15,3d24 <_isatty_r+0x3c>
    3d10:	00c12083          	lw	x1,12(x2)
    3d14:	00812403          	lw	x8,8(x2)
    3d18:	00412483          	lw	x9,4(x2)
    3d1c:	01010113          	addi	x2,x2,16
    3d20:	00008067          	jalr	x0,0(x1)
    3d24:	8501a783          	lw	x15,-1968(x3) # 49a8 <errno>
    3d28:	fe0784e3          	beq	x15,x0,3d10 <_isatty_r+0x28>
    3d2c:	00c12083          	lw	x1,12(x2)
    3d30:	00f42023          	sw	x15,0(x8)
    3d34:	00812403          	lw	x8,8(x2)
    3d38:	00412483          	lw	x9,4(x2)
    3d3c:	01010113          	addi	x2,x2,16
    3d40:	00008067          	jalr	x0,0(x1)
